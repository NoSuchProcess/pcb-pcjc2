Bottom: e6b75bf6c23eae16d261c63b88c95ff22c7754b2
Top:    914c57ac2203bc8d7aaffd0d7d30888c8dfd037b
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2012-12-23 19:21:37 +0000

Remove usage of RATFLAG... I think


---

diff --git a/src/const.h b/src/const.h
index 0e858d1..3ae7eab 100644
--- a/src/const.h
+++ b/src/const.h
@@ -127,8 +127,9 @@ without a copper annulus.
 For pads, set to prevent a solderpaste stencil opening for the
 pad.  Primarily used for pads used as fiducials.
 @item 0x0010 rat
-If set for a line, indicates that this line is a rat line instead of a
-copper trace.
+If set for a line (in an old PCB file), indicates that this line is a rat line
+instead of a copper trace. It is not used internally by PCB, and not assigned
+to rats.
 @item 0x0010 pininpoly
 For pins and pads, this flag is used internally to indicate that the
 pin or pad overlaps a polygon on some layer.
@@ -186,7 +187,7 @@ Marker used internally to avoid revisiting an object.
 #define NOPASTEFLAG             0x0008  /* pad should not receive
                                            solderpaste.  This is to
                                            support fiducials */
-#define RATFLAG                 0x0010  /* indicates line is a rat line */
+#define RATFLAG                 0x0010  /* indicates a line is a rat line when reading older PCB files. Not used internally */
 #define PININPOLYFLAG           0x0010  /* pin found inside poly - same as */
                                         /* rat line since not used on lines */
 #define CLEARPOLYFLAG           0x0010  /* pins/vias clear these polygons */
diff --git a/src/create.c b/src/create.c
index e1ab2a1..ad795ef 100644
--- a/src/create.c
+++ b/src/create.c
@@ -466,7 +466,6 @@ CreateNewLineOnLayer (LayerType *Layer,
     return (Line);
   Line->ID = ID++;
   Line->Flags = Flags;
-  CLEAR_FLAG (RATFLAG, Line);
   Line->Thickness = Thickness;
   Line->Clearance = Clearance;
   Line->Point1.X = X1;
@@ -497,7 +496,6 @@ CreateNewRat (DataType *Data, Coord X1, Coord Y1,
 
   Line->ID = ID++;
   Line->Flags = Flags;
-  SET_FLAG (RATFLAG, Line);
   Line->Thickness = Thickness;
   Line->Point1.X = X1;
   Line->Point1.Y = Y1;
diff --git a/src/strflags.c b/src/strflags.c
index e9a60f2..ef5ee74 100644
--- a/src/strflags.c
+++ b/src/strflags.c
@@ -89,7 +89,6 @@ static FlagBitsType object_flagbits[] = {
   { VIAFLAG, N ("via"), RATLINE_TYPES },
   { FOUNDFLAG, N ("found"), ALL_TYPES },
   { HOLEFLAG, N ("hole"), PIN_TYPES },
-  { RATFLAG, N ("rat"), RATLINE_TYPE },
   { PININPOLYFLAG, N ("pininpoly"), PIN_TYPES | PAD_TYPE },
   { CLEARPOLYFLAG, N ("clearpoly"), POLYGON_TYPE },
   { HIDENAMEFLAG, N ("hidename"), ELEMENT_TYPE },
@@ -459,11 +458,6 @@ string_to_pcbflags (const char *flagstring,
  * Given a set of flags for a given type of object, return a string
  * which reflects those flags.  The only requirement is that this
  * string be parseable by string_to_flags.
- *
- * Note that this function knows a little about what kinds of flags
- * will be automatically set by parsing, so it won't (for example)
- * include the "rat" flag for RATLINE_TYPEs because it knows those get
- * forcibly set when vias are parsed.
  */
 
 static char *
@@ -479,15 +473,6 @@ common_flags_to_string (FlagType flags,
 
   fh.Flags = flags;
 
-#ifndef FLAG_TEST
-  switch (object_type)
-    {
-    case RATLINE_TYPE:
-      CLEAR_FLAG (RATFLAG, &fh);
-      break;
-    }
-#endif
-
   savef = fh;
 
   len = 3;			/* for "()\0" */
diff --git a/src/undo.h b/src/undo.h
index f415c3c..e32f3a2 100644
--- a/src/undo.h
+++ b/src/undo.h
@@ -32,7 +32,7 @@
 
 #include "global.h"
 
-#define DRAW_FLAGS	(RATFLAG | SELECTEDFLAG | SQUAREFLAG \
+#define DRAW_FLAGS	(SELECTEDFLAG | SQUAREFLAG \
 			| HIDENAMEFLAG | HOLEFLAG | OCTAGONFLAG | FOUNDFLAG | CLEARLINEFLAG)
 
 											/* different layers */
