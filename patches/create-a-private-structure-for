Bottom: e4f744502d141513375ab1604138821c6e30e3a9
Top:    3a18ce023807b326824a02c018bd3a27d6bc53ce
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2010-08-27 15:51:03 +0100

Create a private structure for the render to isolate some of its internals


---

diff --git a/src/hid/gtk/gtkhid-gdk.c b/src/hid/gtk/gtkhid-gdk.c
index 50ac011..28fcd8a 100644
--- a/src/hid/gtk/gtkhid-gdk.c
+++ b/src/hid/gtk/gtkhid-gdk.c
@@ -21,13 +21,21 @@ RCSID ("$Id$");
 
 extern HID ghid_hid;
 
-/* Sets gport->u_gc to the "right" GC to use (wrt mask or window)
+/* Sets priv->u_gc to the "right" GC to use (wrt mask or window)
 */
 #define USE_GC(gc) if (!use_gc(gc)) return
 
 static int cur_mask = -1;
 static int mask_seq = 0;
 
+typedef struct render_priv {
+  GdkGC *bg_gc;
+  GdkGC *offlimits_gc;
+  GdkGC *mask_gc;
+  GdkGC *u_gc;
+  GdkGC *grid_gc;
+} render_priv;
+
 /* ------------------------------------------------------------ */
 
 static inline int
@@ -85,12 +93,13 @@ ghid_draw_grid (void)
   static int npoints = 0;
   int x1, y1, x2, y2, n, i;
   double x, y;
+  render_priv *priv = gport->render_priv;
 
   if (!Settings.DrawGrid)
     return;
   if (Vz (PCB->Grid) < MIN_GRID_DISTANCE)
     return;
-  if (!gport->grid_gc)
+  if (!priv->grid_gc)
     {
       if (gdk_color_parse (Settings.GridColor, &gport->grid_color))
 	{
@@ -99,9 +108,9 @@ ghid_draw_grid (void)
 	  gport->grid_color.blue ^= gport->bg_color.blue;
 	  gdk_color_alloc (gport->colormap, &gport->grid_color);
 	}
-      gport->grid_gc = gdk_gc_new (gport->drawable);
-      gdk_gc_set_function (gport->grid_gc, GDK_XOR);
-      gdk_gc_set_foreground (gport->grid_gc, &gport->grid_color);
+      priv->grid_gc = gdk_gc_new (gport->drawable);
+      gdk_gc_set_function (priv->grid_gc, GDK_XOR);
+      gdk_gc_set_foreground (priv->grid_gc, &gport->grid_color);
     }
   x1 = GRIDFIT_X (SIDE_X (gport->view_x0), PCB->Grid);
   y1 = GRIDFIT_Y (SIDE_Y (gport->view_y0), PCB->Grid);
@@ -148,7 +157,7 @@ ghid_draw_grid (void)
       int vy = Vy (y);
       for (i = 0; i < n; i++)
 	points[i].y = vy;
-      gdk_draw_points (gport->drawable, gport->grid_gc, points, n);
+      gdk_draw_points (gport->drawable, priv->grid_gc, points, n);
     }
 }
 
@@ -160,6 +169,7 @@ ghid_draw_bg_image (void)
   GdkInterpType interp_type;
   gint x, y, w, h, w_src, h_src;
   static gint w_scaled, h_scaled;
+  render_priv *priv = gport->render_priv;
 
   if (!ghidgui->bg_pixbuf)
     return;
@@ -187,12 +197,12 @@ ghid_draw_bg_image (void)
       h_scaled = h;
     }
   if (pixbuf)
-    gdk_pixbuf_render_to_drawable (pixbuf, gport->drawable, gport->bg_gc,
+    gdk_pixbuf_render_to_drawable (pixbuf, gport->drawable, priv->bg_gc,
 				   x, y, 0, 0,
 				   w - x, h - y, GDK_RGB_DITHER_NORMAL, 0, 0);
 }
 
-#define WHICH_GC(gc) (cur_mask == HID_MASK_CLEAR ? gport->mask_gc : (gc)->gc)
+#define WHICH_GC(gc) (cur_mask == HID_MASK_CLEAR ? priv->mask_gc : (gc)->gc)
 
 void
 ghid_use_mask (int use_it)
@@ -200,6 +210,7 @@ ghid_use_mask (int use_it)
   static int mask_seq_id = 0;
   static GdkDrawable *old;
   GdkColor color;
+  render_priv *priv = gport->render_priv;
 
   if (use_it == HID_FLUSH_DRAW_Q)
     {
@@ -238,16 +249,16 @@ ghid_use_mask (int use_it)
 	gport->mask = gdk_pixmap_new (0, gport->width, gport->height, 1);
       gport->drawable = gport->mask;
       mask_seq = 0;
-      if (!gport->mask_gc)
+      if (!priv->mask_gc)
 	{
-	  gport->mask_gc = gdk_gc_new (gport->drawable);
+	  priv->mask_gc = gdk_gc_new (gport->drawable);
 	}
       color.pixel = 1;
-      gdk_gc_set_foreground (gport->mask_gc, &color);
-      gdk_draw_rectangle (gport->drawable, gport->mask_gc, TRUE, 0, 0,
+      gdk_gc_set_foreground (priv->mask_gc, &color);
+      gdk_draw_rectangle (gport->drawable, priv->mask_gc, TRUE, 0, 0,
 			  gport->width, gport->height);
       color.pixel = 0;
-      gdk_gc_set_foreground (gport->mask_gc, &color);
+      gdk_gc_set_foreground (priv->mask_gc, &color);
       break;
 
     case HID_MASK_AFTER:
@@ -279,33 +290,37 @@ typedef struct
 static void
 set_special_grid_color (void)
 {
+  render_priv *priv = gport->render_priv;
+
   if (!gport->colormap)
     return;
   gport->grid_color.red ^= gport->bg_color.red;
   gport->grid_color.green ^= gport->bg_color.green;
   gport->grid_color.blue ^= gport->bg_color.blue;
   gdk_color_alloc (gport->colormap, &gport->grid_color);
-  if (gport->grid_gc)
-    gdk_gc_set_foreground (gport->grid_gc, &gport->grid_color);
+  if (priv->grid_gc)
+    gdk_gc_set_foreground (priv->grid_gc, &gport->grid_color);
 }
 
 void
 ghid_set_special_colors (HID_Attribute * ha)
 {
+  render_priv *priv = gport->render_priv;
+
   if (!ha->name || !ha->value)
     return;
-  if (!strcmp (ha->name, "background-color") && gport->bg_gc)
+  if (!strcmp (ha->name, "background-color") && priv->bg_gc)
     {
       ghid_map_color_string (*(char **) ha->value, &gport->bg_color);
-      gdk_gc_set_foreground (gport->bg_gc, &gport->bg_color);
+      gdk_gc_set_foreground (priv->bg_gc, &gport->bg_color);
       set_special_grid_color ();
     }
-  else if (!strcmp (ha->name, "off-limit-color") && gport->offlimits_gc)
+  else if (!strcmp (ha->name, "off-limit-color") && priv->offlimits_gc)
     {
       ghid_map_color_string (*(char **) ha->value, &gport->offlimits_color);
-      gdk_gc_set_foreground (gport->offlimits_gc, &gport->offlimits_color);
+      gdk_gc_set_foreground (priv->offlimits_gc, &gport->offlimits_color);
     }
-  else if (!strcmp (ha->name, "grid-color") && gport->grid_gc)
+  else if (!strcmp (ha->name, "grid-color") && priv->grid_gc)
     {
       ghid_map_color_string (*(char **) ha->value, &gport->grid_color);
       set_special_grid_color ();
@@ -386,6 +401,7 @@ ghid_set_color (hidGC gc, const char *name)
 void
 ghid_set_line_cap (hidGC gc, EndCapStyle style)
 {
+  render_priv *priv = gport->render_priv;
 
   switch (style)
     {
@@ -409,6 +425,7 @@ ghid_set_line_cap (hidGC gc, EndCapStyle style)
 void
 ghid_set_line_width (hidGC gc, int width)
 {
+  render_priv *priv = gport->render_priv;
 
   gc->width = width;
   if (gc->gc)
@@ -442,6 +459,7 @@ ghid_set_line_cap_angle (hidGC gc, int x1, int y1, int x2, int y2)
 static int
 use_gc (hidGC gc)
 {
+  render_priv *priv = gport->render_priv;
 
   if (gc->me_pointer != &ghid_hid)
     {
@@ -467,7 +485,7 @@ use_gc (hidGC gc)
 	gdk_gc_set_clip_mask (gc->gc, NULL);
       gc->mask_seq = mask_seq;
     }
-  gport->u_gc = WHICH_GC (gc);
+  priv->u_gc = WHICH_GC (gc);
   return 1;
 }
 
@@ -475,6 +493,7 @@ void
 ghid_draw_line (hidGC gc, int x1, int y1, int x2, int y2)
 {
   double dx1, dy1, dx2, dy2;
+  render_priv *priv = gport->render_priv;
 
   dx1 = Vx ((double) x1);
   dy1 = Vy ((double) y1);
@@ -486,7 +505,7 @@ ghid_draw_line (hidGC gc, int x1, int y1, int x2, int y2)
     return;
 
   USE_GC (gc);
-  gdk_draw_line (gport->drawable, gport->u_gc, dx1, dy1, dx2, dy2);
+  gdk_draw_line (gport->drawable, priv->u_gc, dx1, dy1, dx2, dy2);
 }
 
 void
@@ -495,6 +514,7 @@ ghid_draw_arc (hidGC gc, int cx, int cy,
 {
   gint vrx, vry;
   gint w, h, radius;
+  render_priv *priv = gport->render_priv;
 
   w = gport->width * gport->zoom;
   h = gport->height * gport->zoom;
@@ -522,7 +542,7 @@ ghid_draw_arc (hidGC gc, int cx, int cy,
   /* make sure we fall in the -180 to +180 range */
   start_angle = (start_angle + 360 + 180) % 360 - 180;
 
-  gdk_draw_arc (gport->drawable, gport->u_gc, 0,
+  gdk_draw_arc (gport->drawable, priv->u_gc, 0,
 		Vx (cx) - vrx, Vy (cy) - vry,
 		vrx * 2, vry * 2, (start_angle + 180) * 64, delta_angle * 64);
 }
@@ -531,6 +551,7 @@ void
 ghid_draw_rect (hidGC gc, int x1, int y1, int x2, int y2)
 {
   gint w, h, lw;
+  render_priv *priv = gport->render_priv;
 
   lw = gc->width;
   w = gport->width * gport->zoom;
@@ -565,7 +586,7 @@ ghid_draw_rect (hidGC gc, int x1, int y1, int x2, int y2)
     }
 
   USE_GC (gc);
-  gdk_draw_rectangle (gport->drawable, gport->u_gc, FALSE,
+  gdk_draw_rectangle (gport->drawable, priv->u_gc, FALSE,
 		      x1, y1, x2 - x1 + 1, y2 - y1 + 1);
 }
 
@@ -574,6 +595,7 @@ void
 ghid_fill_circle (hidGC gc, int cx, int cy, int radius)
 {
   gint w, h, vr;
+  render_priv *priv = gport->render_priv;
 
   w = gport->width * gport->zoom;
   h = gport->height * gport->zoom;
@@ -585,7 +607,7 @@ ghid_fill_circle (hidGC gc, int cx, int cy, int radius)
 
   USE_GC (gc);
   vr = Vz (radius);
-  gdk_draw_arc (gport->drawable, gport->u_gc, TRUE,
+  gdk_draw_arc (gport->drawable, priv->u_gc, TRUE,
 		Vx (cx) - vr, Vy (cy) - vr, vr * 2, vr * 2, 0, 360 * 64);
 }
 
@@ -595,6 +617,7 @@ ghid_fill_polygon (hidGC gc, int n_coords, int *x, int *y)
   static GdkPoint *points = 0;
   static int npoints = 0;
   int i;
+  render_priv *priv = gport->render_priv;
   USE_GC (gc);
 
   if (npoints < n_coords)
@@ -608,13 +631,14 @@ ghid_fill_polygon (hidGC gc, int n_coords, int *x, int *y)
       points[i].x = Vx (x[i]);
       points[i].y = Vy (y[i]);
     }
-  gdk_draw_polygon (gport->drawable, gport->u_gc, 1, points, n_coords);
+  gdk_draw_polygon (gport->drawable, priv->u_gc, 1, points, n_coords);
 }
 
 void
 ghid_fill_rect (hidGC gc, int x1, int y1, int x2, int y2)
 {
   gint w, h, lw, xx, yy;
+  render_priv *priv = gport->render_priv;
 
   lw = gc->width;
   w = gport->width * gport->zoom;
@@ -647,7 +671,7 @@ ghid_fill_rect (hidGC gc, int x1, int y1, int x2, int y2)
       y2 = yy;
     }
   USE_GC (gc);
-  gdk_draw_rectangle (gport->drawable, gport->u_gc, TRUE,
+  gdk_draw_rectangle (gport->drawable, priv->u_gc, TRUE,
 		      x1, y1, x2 - x1 + 1, y2 - y1 + 1);
 }
 
@@ -662,6 +686,7 @@ ghid_invalidate_all ()
 {
   int eleft, eright, etop, ebottom;
   BoxType region;
+  render_priv *priv = gport->render_priv;
 
   if (!gport->pixmap)
     return;
@@ -689,28 +714,28 @@ ghid_invalidate_all ()
     }
 
   if (eleft > 0)
-    gdk_draw_rectangle (gport->drawable, gport->offlimits_gc,
+    gdk_draw_rectangle (gport->drawable, priv->offlimits_gc,
 			1, 0, 0, eleft, gport->height);
   else
     eleft = 0;
   if (eright < gport->width)
-    gdk_draw_rectangle (gport->drawable, gport->offlimits_gc,
+    gdk_draw_rectangle (gport->drawable, priv->offlimits_gc,
 			1, eright, 0, gport->width - eright, gport->height);
   else
     eright = gport->width;
   if (etop > 0)
-    gdk_draw_rectangle (gport->drawable, gport->offlimits_gc,
+    gdk_draw_rectangle (gport->drawable, priv->offlimits_gc,
 			1, eleft, 0, eright - eleft + 1, etop);
   else
     etop = 0;
   if (ebottom < gport->height)
-    gdk_draw_rectangle (gport->drawable, gport->offlimits_gc,
+    gdk_draw_rectangle (gport->drawable, priv->offlimits_gc,
 			1, eleft, ebottom, eright - eleft + 1,
 			gport->height - ebottom);
   else
     ebottom = gport->height;
 
-  gdk_draw_rectangle (gport->drawable, gport->bg_gc, 1,
+  gdk_draw_rectangle (gport->drawable, priv->bg_gc, 1,
 		      eleft, etop, eright - eleft + 1, ebottom - etop + 1);
 
   ghid_draw_bg_image();
@@ -887,10 +912,42 @@ ghid_show_crosshair (gboolean show)
 }
 
 void
+ghid_init_renderer (int *argc, char ***argv, GHidPort *port)
+{
+  /* Init any GC's required */
+  port->render_priv = g_new0 (render_priv, 1);
+}
+
+void
+ghid_drawing_area_configure_hook (GHidPort *port)
+{
+  static int done_once = 0;
+  render_priv *priv = port->render_priv;
+
+  if (!done_once)
+    {
+      priv->bg_gc = gdk_gc_new (port->drawable);
+      gdk_gc_set_foreground (priv->bg_gc, &port->bg_color);
+
+      priv->offlimits_gc = gdk_gc_new (port->drawable);
+      gdk_gc_set_foreground (priv->offlimits_gc, &port->offlimits_color);
+      done_once = 1;
+    }
+
+  if (port->mask)
+    {
+      gdk_pixmap_unref (port->mask);
+      port->mask = gdk_pixmap_new (0, port->width, port->height, 1);
+    }
+}
+
+void
 ghid_screen_update (void)
 {
+  render_priv *priv = gport->render_priv;
+
   ghid_show_crosshair (FALSE);
-  gdk_draw_drawable (gport->drawing_area->window, gport->bg_gc, gport->pixmap,
+  gdk_draw_drawable (gport->drawing_area->window, priv->bg_gc, gport->pixmap,
 		     0, 0, 0, 0, gport->width, gport->height);
   ghid_show_crosshair (TRUE);
 }
@@ -900,8 +957,10 @@ ghid_drawing_area_expose_cb (GtkWidget *widget,
                              GdkEventExpose *ev,
                              GHidPort *port)
 {
+  render_priv *priv = port->render_priv;
+
   ghid_show_crosshair (FALSE);
-  gdk_draw_drawable (widget->window, port->bg_gc, port->pixmap,
+  gdk_draw_drawable (widget->window, priv->bg_gc, port->pixmap,
                     ev->area.x, ev->area.y, ev->area.x, ev->area.y,
                     ev->area.width, ev->area.height);
   ghid_show_crosshair (TRUE);
@@ -921,6 +980,7 @@ ghid_pinout_preview_expose (GtkWidget *widget,
   int save_width, save_height;
   int save_view_width, save_view_height;
   double xz, yz;
+  render_priv *priv = gport->render_priv;
 
   save_zoom = gport->zoom;
   save_width = gport->width;
@@ -951,7 +1011,7 @@ ghid_pinout_preview_expose (GtkWidget *widget,
   gport->view_y0 = (pinout->y_max - gport->view_height) / 2;
 
   /* clear background */
-  gdk_draw_rectangle (widget->window, gport->bg_gc, TRUE, 0, 0, da_w, da_h);
+  gdk_draw_rectangle (widget->window, priv->bg_gc, TRUE, 0, 0, da_w, da_h);
 
   /* call the drawing routine */
   hid_expose_callback (&ghid_hid, NULL, &pinout->element);
@@ -987,7 +1047,7 @@ ghid_pinout_preview_expose (GtkWidget *widget,
   gport->view_y0 = (pinout->y_max - gport->view_height) / 2;
 
   /* clear background */
-  gdk_draw_rectangle (widget->window, gport->bg_gc, TRUE, 0, 0, da_w, da_h);
+  gdk_draw_rectangle (widget->window, priv->bg_gc, TRUE, 0, 0, da_w, da_h);
 
   /* call the drawing routine */
   hid_expose_callback (&ghid_hid, NULL, &pinout->element);
@@ -1015,6 +1075,7 @@ ghid_render_pixmap (int cx, int cy, double zoom, int width, int height, int dept
   int save_width, save_height;
   int save_view_width, save_view_height;
   BoxType region;
+  render_priv *priv = gport->render_priv;
 
   save_drawable = gport->drawable;
   save_zoom = gport->zoom;
@@ -1042,7 +1103,7 @@ ghid_render_pixmap (int cx, int cy, double zoom, int width, int height, int dept
   gport->view_y0 -= gport->view_width  / 2;
 
   /* clear background */
-  gdk_draw_rectangle (pixmap, gport->bg_gc, TRUE, 0, 0, width, height);
+  gdk_draw_rectangle (pixmap, priv->bg_gc, TRUE, 0, 0, width, height);
 
   /* call the drawing routine */
   region.X1 = MIN(Px(0), Px(gport->width + 1));
diff --git a/src/hid/gtk/gui-output-events.c b/src/hid/gtk/gui-output-events.c
index 8814c68..b7346de 100644
--- a/src/hid/gtk/gui-output-events.c
+++ b/src/hid/gtk/gui-output-events.c
@@ -547,13 +547,14 @@ ghid_port_drawing_area_configure_event_cb (GtkWidget * widget,
 	gdk_color_white (gport->colormap, &gport->offlimits_color);
       gdk_gc_set_foreground (gport->offlimits_gc, &gport->offlimits_color);
       first_time_done = TRUE;
+      ghid_drawing_area_configure_hook (out);
       PCBChanged (0, NULL, 0, 0);
     }
-  if (gport->mask)
+  else
     {
-      gdk_pixmap_unref (gport->mask);
-      gport->mask = gdk_pixmap_new (0, gport->width, gport->height, 1);
+      ghid_drawing_area_configure_hook (out);
     }
+
   ghid_port_ranges_scale (FALSE);
   ghid_invalidate_all ();
   RestoreCrosshair (TRUE);
diff --git a/src/hid/gtk/gui.h b/src/hid/gtk/gui.h
index 49e2aef..c4d71b4 100644
--- a/src/hid/gtk/gui.h
+++ b/src/hid/gtk/gui.h
@@ -164,7 +164,7 @@ typedef struct
   GdkDrawable *drawable;	/* Current drawable for drawing routines */
   gint width, height;
 
-  GdkGC *bg_gc, *offlimits_gc, *mask_gc, *u_gc, *grid_gc;
+  struct render_priv *render_priv;
 
   GdkColor bg_color, offlimits_color, grid_color;
 
@@ -496,6 +496,8 @@ void ghid_fill_rect (hidGC gc, int x1, int y1, int x2, int y2);
 void ghid_invalidate_lr ();
 void ghid_invalidate_all ();
 void ghid_show_crosshair (gboolean show);
+void ghid_init_renderer (int *, char ***, GHidPort *);
+void ghid_drawing_area_configure_hook (GHidPort *port);
 void ghid_screen_update (void);
 gboolean ghid_drawing_area_expose_cb (GtkWidget *, GdkEventExpose *,
                                       GHidPort *);
