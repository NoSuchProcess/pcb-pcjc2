Bottom: 96c7d678475e7240f10e2802ff4cb513df535dc6
Top:    ea52edf2695312182406b6fbfde3613ba8fdecd3
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-09-15 00:24:17 +0100

report.c: Don't leave actions in the undo stack or change the user's flags

Some actions in ReportNetLength*() would have been lumped in with
whatever actions were next added to the undo stack. These functions
also left the user's board with a different "FOUND" flags on various
items.

In the case of the "Report(AllNetLenths)" action, a very long undo stack
would be created, which is not very helpful to the user.

These changes hide the internal flag changes made during the net length
calculation from the undo system.

We are able to get back to the inital board state because we save the
operations caused by our initial RestConnections() on the undo stack.
After we have done our work (modifying various flags in the process),
we reset the flags again (this time bypassing the Undo system), so the
board is consistent with the ResetConnections() call we DID save undo
data for. We then Undo() these changes before we leave the function.


---

diff --git a/src/report.c b/src/report.c
index cf3635b..d461bd2 100644
--- a/src/report.c
+++ b/src/report.c
@@ -545,6 +545,10 @@ ReportFoundPins (int argc, char **argv, Coord x, Coord y)
   return 0;
 }
 
+/* Assumes that we start with a blank connection state,
+ * e.g. ResetConnections() has been run.
+ * Does not add its own changes to the undo system
+ */
 static double
 XYtoNetLength (Coord x, Coord y, int *found)
 {
@@ -552,7 +556,11 @@ XYtoNetLength (Coord x, Coord y, int *found)
 
   length = 0;
   *found = 0;
-  LookupConnection (x, y, true, PCB->Grid, FOUNDFLAG);
+
+  /* NB: The third argument here, 'false' ensures LookupConnection
+   *     does not add its changes to the undo system.
+   */
+  LookupConnection (x, y, false, PCB->Grid, FOUNDFLAG);
 
   ALLLINE_LOOP (PCB->Data);
   {
@@ -591,6 +599,17 @@ ReportAllNetLengths (int argc, char **argv, Coord x, Coord y)
   int ni;
   int found;
 
+  /* Reset all connection flags and save an undo-state to get back
+   * to the state the board was in when we started this function.
+   *
+   * After this, we don't add any changes to the undo system, but
+   * ensure we get back to a point where we can Undo() our changes
+   * by resetting the connections with ResetConnections() before
+   * calling Undo() at the end of the procedure.
+   */
+  ResetConnections (true);
+  IncrementUndoSerialNumber ();
+
   for (ni = 0; ni < PCB->NetlistLib.MenuN; ni++)
     {
       char *netname = PCB->NetlistLib.Menu[ni].Name + 2;
@@ -647,17 +666,18 @@ ReportAllNetLengths (int argc, char **argv, Coord x, Coord y)
           if (argc < 1)
             units_name = Settings.grid_unit->suffix;
 
-          if (ResetConnections (true))
-            Draw ();
-          /* NB: XYtoNetLength calls LookupConnection, which performs an undo
-           *     serial number update, so we don't need to add one here.
-           */
           length = XYtoNetLength (x, y, &found);
 
+          /* Reset connectors for the next lookup */
+          ResetConnections (false);
+
           pcb_sprintf(buf, "%$m*", units_name, length);
           gui->log("Net %s length %s\n", netname, buf);
         }
     }
+
+  ResetConnections (false);
+  Undo (true);
   return 0;
 }
 
@@ -668,17 +688,25 @@ ReportNetLength (int argc, char **argv, Coord x, Coord y)
   char *netname = 0;
   int found = 0;
 
-  if (ResetConnections (true))
-    Draw ();
-  /* NB: XYtoNetLength calls LookupConnection, which performs an undo
-   *     serial number update, so we don't need to add one here.
-   */
   gui->get_coords ("Click on a connection", &x, &y);
 
+  /* Reset all connection flags and save an undo-state to get back
+   * to the state the board was in when we started this function.
+   *
+   * After this, we don't add any changes to the undo system, but
+   * ensure we get back to a point where we can Undo() our changes
+   * by resetting the connections with ResetConnections() before
+   * calling Undo() at the end of the procedure.
+   */
+  ResetConnections (true);
+  IncrementUndoSerialNumber ();
+
   length = XYtoNetLength (x, y, &found);
 
   if (!found)
     {
+      ResetConnections (false);
+      Undo (true);
       gui->log ("No net under cursor.\n");
       return 1;
     }
@@ -737,7 +765,10 @@ ReportNetLength (int argc, char **argv, Coord x, Coord y)
     END_LOOP;
   }
   END_LOOP;
- got_net_name:
+
+got_net_name:
+  ResetConnections (false);
+  Undo (true);
 
   {
     char buf[50];
@@ -747,6 +778,7 @@ ReportNetLength (int argc, char **argv, Coord x, Coord y)
     else
       gui->log ("Net length: %s\n", buf);
   }
+
   return 0;
 }
 
@@ -778,12 +810,6 @@ ReportNetLengthByName (char *tofind, int x, int y)
   if (!tofind)
     return 1;
 
-  SaveUndoSerialNumber ();
-  ResetFoundPinsViasAndPads (true);
-  RestoreUndoSerialNumber ();
-  ResetFoundLinesAndPolygons (true);
-  RestoreUndoSerialNumber ();
-
 #if defined(USE_RE)
       use_re = 1;
       for (i = 0; i < PCB->NetlistLib.MenuN; i++)
@@ -864,24 +890,38 @@ ReportNetLengthByName (char *tofind, int x, int y)
       gui->log ("No net named %s\n", tofind);
       return 1;
     }
+
 #ifdef HAVE_REGCOMP
   if (use_re)
     regfree (&elt_pattern);
 #endif
 
+  /* Reset all connection flags and save an undo-state to get back
+   * to the state the board was in when we started.
+   *
+   * After this, we don't add any changes to the undo system, but
+   * ensure we get back to a point where we can Undo() our changes
+   * by resetting the connections with ResetConnections() before
+   * calling Undo() when we are finished.
+   */
+  ResetConnections (true);
+  IncrementUndoSerialNumber ();
+
   length = XYtoNetLength (x, y, &found);
   netname = net->Name + 2;
 
-  if (!found && net_found)
-  {
-      gui->log ("Net found, but no lines or arcs were flagged.\n");
-      return 1;
-  }
-  else if (!found)
-  {
-      gui->log ("Net not found.\n");
+  ResetConnections (false);
+  Undo (true);
+
+  if (!found)
+    {
+      if (net_found)
+        gui->log ("Net found, but no lines or arcs were flagged.\n");
+      else
+        gui->log ("Net not found.\n");
+
       return 1;
-  }
+    }
 
   {
     char buf[50];
@@ -891,6 +931,7 @@ ReportNetLengthByName (char *tofind, int x, int y)
     else
       gui->log ("Net length: %s\n", buf);
   }
+
   return 0;
 }
