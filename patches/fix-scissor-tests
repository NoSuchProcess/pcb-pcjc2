Bottom: a1902e75c2832bc22da0884ed1ad105985e23da7
Top:    e5fe7428caa52fb03c726a185c4df561525294cf
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2010-08-28 04:06:23 +0100

Fix scissor tests?

I'm not certain this isn't just breaking things actually - for non-whole window exposes.


---

diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index 5ce5ac1..1432ef2 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -1832,11 +1832,6 @@ ghid_drawing_area_expose_cb (GtkWidget *widget,
 
   glViewport (0, 0, widget->allocation.width, widget->allocation.height);
 
-  glEnable (GL_SCISSOR_TEST);
-  glScissor (ev->area.x,
-             widget->allocation.height - ev->area.height - ev->area.y,
-             ev->area.width, ev->area.height);
-
   glMatrixMode (GL_PROJECTION);
   glLoadIdentity ();
   glOrtho (0, widget->allocation.width, widget->allocation.height, 0, -100000, 100000);
@@ -1863,6 +1858,7 @@ ghid_drawing_area_expose_cb (GtkWidget *widget,
 
   glStencilMask (~0);
   glClearStencil (0);
+  glDisable (GL_SCISSOR_TEST);
   glClear (GL_COLOR_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);
   hidgl_reset_stencil_usage ();
 
@@ -1931,6 +1927,12 @@ ghid_drawing_area_expose_cb (GtkWidget *widget,
   region.Y1 = MIN (Py (min_y), Py (max_y + 1));
   region.Y2 = MAX (Py (min_y), Py (max_y + 1));
 
+
+  glEnable (GL_SCISSOR_TEST);
+  glScissor (ev->area.x,
+             widget->allocation.height - ev->area.height - ev->area.y,
+             ev->area.width, ev->area.height);
+
   eleft = Vx (0);  eright  = Vx (PCB->MaxWidth);
   etop  = Vy (0);  ebottom = Vy (PCB->MaxHeight);
 
@@ -2099,11 +2101,6 @@ ghid_pinout_preview_expose (GtkWidget *widget,
 
   glViewport (0, 0, widget->allocation.width, widget->allocation.height);
 
-  glEnable (GL_SCISSOR_TEST);
-  glScissor (ev->area.x,
-             widget->allocation.height - ev->area.height - ev->area.y,
-             ev->area.width, ev->area.height);
-
   glMatrixMode (GL_PROJECTION);
   glLoadIdentity ();
   glOrtho (0, widget->allocation.width, widget->allocation.height, 0, -100000, 100000);
@@ -2117,10 +2114,16 @@ ghid_pinout_preview_expose (GtkWidget *widget,
                 1.);
   glStencilMask (~0);
   glClearStencil (0);
+  glDisable (GL_SCISSOR_TEST);
   glClear (GL_COLOR_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);
 
   hidgl_reset_stencil_usage ();
 
+  glEnable (GL_SCISSOR_TEST);
+  glScissor (ev->area.x,
+             widget->allocation.height - ev->area.height - ev->area.y,
+             ev->area.width, ev->area.height);
+
   /* call the drawing routine */
   hidgl_init_triangle_array (&buffer);
   ghid_invalidate_current_gc ();
@@ -2212,9 +2215,6 @@ ghid_render_pixmap (int cx, int cy, double zoom, int width, int height, int dept
 
   glViewport (0, 0, width, height);
 
-  glEnable (GL_SCISSOR_TEST);
-  glScissor (0, 0, width, height);
-
   glMatrixMode (GL_PROJECTION);
   glLoadIdentity ();
   glOrtho (0, width, height, 0, -100000, 100000);
@@ -2228,9 +2228,13 @@ ghid_render_pixmap (int cx, int cy, double zoom, int width, int height, int dept
                 1.);
   glStencilMask (~0);
   glClearStencil (0);
+  glDisable (GL_SCISSOR_TEST);
   glClear (GL_COLOR_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);
   hidgl_reset_stencil_usage ();
 
+  glEnable (GL_SCISSOR_TEST);
+  glScissor (0, 0, width, height);
+
   /* call the drawing routine */
   hidgl_init_triangle_array (&buffer);
   ghid_invalidate_current_gc ();
