Bottom: bdce5454837a195314f89eb137b6b14a4eaf710b
Top:    70d236c4885608eda9e952f12288befc04ad895f
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-05-03 13:52:15 +0100

polygon stuff


---

diff --git a/src/hid/common/hidgl.c b/src/hid/common/hidgl.c
index 1142db6..80e7fe5 100644
--- a/src/hid/common/hidgl.c
+++ b/src/hid/common/hidgl.c
@@ -665,51 +665,59 @@ hidgl_fill_pcb_polygon (PolygonType *poly, const BoxType *clip_box, double scale
       return;
     }
 
-  stencil_bit = hidgl_assign_clear_stencil_bit ();
-  if (!stencil_bit)
-    {
-      printf ("hidgl_fill_pcb_polygon: No free stencil bits, aborting polygon\n");
-      return;
-    }
-
-  /* Flush out any existing geoemtry to be rendered */
-  hidgl_flush_triangles (&buffer);
-
-  glPushAttrib (GL_STENCIL_BUFFER_BIT);                   // Save the write mask etc.. for final restore
-  glPushAttrib (GL_STENCIL_BUFFER_BIT |                   // Resave the stencil write-mask etc.., and
-                GL_COLOR_BUFFER_BIT);                     // the colour buffer write mask etc.. for part way restore
-  glStencilMask (stencil_bit);                            // Only write to our stencil bit
-  glStencilFunc (GL_ALWAYS, stencil_bit, stencil_bit);    // Always pass stencil test, ref value is our bit
-  glColorMask (0, 0, 0, 0);                               // Disable writting in color buffer
-
-  /* It will already be setup like this (so avoid prodding the state-machine):
-   * glStencilOp (GL_KEEP, GL_KEEP, GL_REPLACE); // Stencil pass => replace stencil value
-   */
-  /* Drawing operations now set our reference bit in the stencil buffer */
-
-  r_search (poly->Clipped->contour_tree, clip_box, NULL, do_hole, &info);
-  hidgl_flush_triangles (&buffer);
+  if (poly->Clipped->contour_tree->size > 1) {
+    /* Polygon has holes */
+
+    stencil_bit = hidgl_assign_clear_stencil_bit ();
+    if (!stencil_bit)
+      {
+        printf ("hidgl_fill_pcb_polygon: No free stencil bits, aborting polygon\n");
+        /* XXX: Could use the GLU tesselator or the full BO polygon tesselator */
+        return;
+      }
+
+    /* Flush out any existing geoemtry to be rendered */
+    hidgl_flush_triangles (&buffer);
+
+    glPushAttrib (GL_STENCIL_BUFFER_BIT |                   // Resave the stencil write-mask etc.., and
+                  GL_COLOR_BUFFER_BIT);                     // the colour buffer write mask etc.. for part way restore
+    glStencilMask (stencil_bit);                            // Only write to our stencil bit
+    glStencilFunc (GL_ALWAYS, stencil_bit, stencil_bit);    // Always pass stencil test, ref value is our bit
+    glColorMask (0, 0, 0, 0);                               // Disable writting in color buffer
+
+    /* It will already be setup like this (so avoid prodding the state-machine):
+     * glStencilOp (GL_KEEP, GL_KEEP, GL_REPLACE); // Stencil pass => replace stencil value
+     */
+    /* Drawing operations now set our reference bit in the stencil buffer */
+
+    r_search (poly->Clipped->contour_tree, clip_box, NULL, do_hole, &info);
+    hidgl_flush_triangles (&buffer);
+
+    /* Drawing operations as masked to areas where the stencil buffer is '0' */
+
+    glPopAttrib ();                                             // Restore the colour and stencil buffer write-mask etc..
+    glPushAttrib (GL_STENCIL_BUFFER_BIT);                       // Save the stencil op and function
+
+    glStencilOp (GL_KEEP, GL_KEEP, GL_INVERT); // This allows us to toggle the bit on the subcompositing bitplane
+                                               // If the stencil test has passed, we know that bit is 0, so we're
+                                               // effectively just setting it to 1.
+    glStencilFunc (GL_GEQUAL, 0, assigned_bits);
+  //  glStencilFunc (GL_GREATER, assigned_bits, assigned_bits);   // Pass stencil test if all assigned bits clear,
+                                                                // reference is all assigned bits so we set
+                                                                // any bits permitted by the stencil writemask
+    /* Draw the polygon outer */
+    fill_contour (poly->Clipped->contours, scale);
+    hidgl_flush_triangles (&buffer);
+
+    /* Unassign our stencil buffer bit */
+    hidgl_return_stencil_bit (stencil_bit);
+
+    glPopAttrib ();                                             // Restore the stencil buffer op and function
 
-  /* Drawing operations as masked to areas where the stencil buffer is '0' */
-
-  glPopAttrib ();                                             // Restore the colour and stencil buffer write-mask etc..
-
-  glStencilOp (GL_KEEP, GL_KEEP, GL_INVERT); // This allows us to toggle the bit on the subcompositing bitplane
-                                             // If the stencil test has passed, we know that bit is 0, so we're
-                                             // effectively just setting it to 1.
-  glStencilFunc (GL_GEQUAL, 0, assigned_bits);
-//  glStencilFunc (GL_GREATER, assigned_bits, assigned_bits);   // Pass stencil test if all assigned bits clear,
-                                                              // reference is all assigned bits so we set
-                                                              // any bits permitted by the stencil writemask
-
-  /* Draw the polygon outer */
-  fill_contour (poly->Clipped->contours, scale);
-  hidgl_flush_triangles (&buffer);
-
-  /* Unassign our stencil buffer bit */
-  hidgl_return_stencil_bit (stencil_bit);
-
-  glPopAttrib ();                                             // Restore the stencil buffer write-mask etc..
+  } else {
+    /* Polygon does not have holes */
+    fill_contour (poly->Clipped->contours, scale);
+  }
 }
 
 void
