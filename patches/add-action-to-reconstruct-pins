Bottom: 821f217b6d02cdabf3e98722b9321042f94054db
Top:    fc22cb50a8c8685cb6cdc7a0d53f6159d5a473ec
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2015-02-14 18:49:09 +0000

Add action to reconstruct pins / vias


---

diff --git a/src/action.c b/src/action.c
index 828f2f1..d7106b1 100644
--- a/src/action.c
+++ b/src/action.c
@@ -8162,6 +8162,149 @@ ActionSmash (int argc, char **argv, Coord x, Coord y)
   AFAIL (smash);
 }
 
+
+static const char smash_syntax[] = N_("Smash(Object|Selected|SelectedElements)");
+static const char smash_help[] = N_("Smash an element or elements into pieces.");
+
+/* %start-doc actions Attributes
+
+This smashes the given object into pieces in-place on the PCB.
+
+%end-doc */
+
+
+static void
+SmashElement (ElementType *element)
+{
+  Cardinal group;
+  LayerType *top_copper, *bottom_copper;
+  LayerType *top_silk, *bottom_silk;
+  LayerType *layer;
+  LineType *new_line;
+  ArcType *new_arc;
+  PinType *new_via;
+
+  group = GetLayerGroupNumberBySide (TOP_SIDE);
+  top_copper = &PCB->Data->Layer[PCB->LayerGroups.Entries[group][0]];
+  group = GetLayerGroupNumberBySide (BOTTOM_SIDE);
+  bottom_copper = &PCB->Data->Layer[PCB->LayerGroups.Entries[group][0]];
+  top_silk = &PCB->Data->Layer[top_silk_layer];
+  bottom_silk = &PCB->Data->Layer[bottom_silk_layer];
+
+  ELEMENTLINE_LOOP (element);
+  {
+    layer = TEST_FLAG (ONSOLDERFLAG, element) ? bottom_silk : top_silk;
+    new_line = CreateNewLineOnLayer (layer,
+                                     line->Point1.X, line->Point1.Y,
+                                     line->Point2.X, line->Point2.Y,
+                                     line->Thickness, 0, NoFlags ());
+    if (new_line)
+      {
+        new_line->Number = STRDUP (NAMEONPCB_NAME (element));
+        AddObjectToCreateUndoList (LINE_TYPE, layer, new_line, new_line);
+      }
+  }
+  END_LOOP;
+  ARC_LOOP (element);
+  {
+    layer = TEST_FLAG (ONSOLDERFLAG, element) ? bottom_silk : top_silk;
+    new_arc = CreateNewArcOnLayer (layer,
+                                   arc->X, arc->Y, arc->Width, arc->Height, arc->StartAngle,
+                                   arc->Delta, arc->Thickness, 0, NoFlags ());
+    if (new_arc)
+      AddObjectToCreateUndoList (LINE_TYPE, layer, new_line, new_line);
+
+  }
+  END_LOOP;
+  PIN_LOOP (element);
+  {
+    FlagType f = NoFlags ();
+    AddFlags (f, VIAFLAG);
+    if (TEST_FLAG (HOLEFLAG, pin))
+      AddFlags (f, HOLEFLAG);
+
+    new_via = CreateNewVia (PCB->Data, pin->X, pin->Y,
+                            pin->Thickness, pin->Clearance, pin->Mask,
+                            pin->DrillingHole, pin->Number, f);
+    if (new_via)
+      AddObjectToCreateUndoList (VIA_TYPE, new_via, new_via, new_via);
+  }
+  END_LOOP;
+  PAD_LOOP (element);
+  {
+    layer = TEST_FLAG (ONSOLDERFLAG, pad) ? bottom_copper : top_copper;
+    new_line = CreateNewLineOnLayer (layer,
+                                      pad->Point1.X, pad->Point1.Y,
+                                      pad->Point2.X, pad->Point2.Y,
+                                      pad->Thickness, pad->Clearance, NoFlags ());
+    if (new_line)
+      {
+        new_line->Number = STRDUP (pad->Number);
+        AddObjectToCreateUndoList (LINE_TYPE, layer, new_line, new_line);
+      }
+  }
+  END_LOOP;
+  RemoveElement (element);
+}
+
+/*---------------------------------------------------------------------------
+ *
+ * break selected element(s) into pieces
+ */
+static int
+ActionSmash (int argc, char **argv, Coord x, Coord y)
+{
+  char *function = ARG (0);
+  ElementType *element;
+  void *ptr1, *ptr2, *ptr3;
+  bool change = false;
+
+  if (function)
+    {
+      switch (GetFunctionID (function))
+        {
+        case F_Object:
+          if (SearchScreen (Crosshair.X, Crosshair.Y, ELEMENT_TYPE,
+                            &ptr1, &ptr2, &ptr3) != NO_TYPE)
+            {
+              element = ptr1;
+              change = true;
+              SmashElement (element);
+            }
+          break;
+
+        case F_Selected:
+        case F_SelectedElements:
+          if (PCB->PinOn && PCB->ElementOn)
+            {
+              ELEMENT_LOOP (PCB->Data);
+                {
+                  if (TEST_FLAG (SELECTEDFLAG, element))
+                    {
+                      change = true;
+                      SmashElement (element);
+                    }
+                }
+              END_LOOP;
+            }
+          break;
+
+        default:
+          AFAIL (smash);
+        }
+
+      if (change)
+        {
+          SetChangedFlag (true);
+          Draw ();
+          IncrementUndoSerialNumber ();
+        }
+      return 0;
+    }
+
+  AFAIL (smash);
+}
+
 /* --------------------------------------------------------------------------- */
 
 HID_Action action_action_list[] = {
