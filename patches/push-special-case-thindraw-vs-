Bottom: c32cf80c504833d5fa2f32b5d11ebda138ac8a79
Top:    c0c964bd124f49ffdc3ea51f527201e84931b17f
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2012-11-19 00:49:05 +0000

Remove (HID_DRAW *)->{fill,thindraw}_pcb_polygon() APIs.

These were used as an implementation detail of the
common_gui_draw_pcb_polygon implementation of (HID_DRAW *)->draw_pcb_polygon().

They were initially kept as they allowed renders (such as the OpenGL port)
to special case either the fill or thindraw logic without having to
duplicate the (minimal) remaining logic in common_gui_draw_pcb_polygon().

To keep the HID_DRAW API cleaner, I'm removing this now, forcing any
GUI which wishes to over-ride either the fill or thindraw routine to
re-implement the whole ->draw_pcb_polygon() entrypoint. This causes some
minor code duplication, but it keeps the outer API a little cleaner.


---

diff --git a/src/hid/common/draw_helpers.c b/src/hid/common/draw_helpers.c
index 9ea5094..1c85d5c 100644
--- a/src/hid/common/draw_helpers.c
+++ b/src/hid/common/draw_helpers.c
@@ -260,9 +260,9 @@ void
 common_gui_draw_pcb_polygon (hidGC gc, PolygonType *polygon, const BoxType *clip_box)
 {
   if (TEST_FLAG (THINDRAWFLAG, PCB) || TEST_FLAG (THINDRAWPOLYFLAG, PCB))
-    gui->graphics->thindraw_pcb_polygon (gc, polygon, clip_box);
+    common_thindraw_pcb_polygon (gc, polygon, clip_box);
   else
-    gui->graphics->fill_pcb_polygon (gc, polygon, clip_box);
+    common_fill_pcb_polygon (gc, polygon, clip_box);
 
   /* If checking planes, thin-draw any pieces which have been clipped away */
   if (TEST_FLAG (CHECKPLANESFLAG, PCB) && !TEST_FLAG (FULLPOLYFLAG, polygon))
@@ -272,7 +272,7 @@ common_gui_draw_pcb_polygon (hidGC gc, PolygonType *polygon, const BoxType *clip
       for (poly.Clipped = polygon->Clipped->f;
            poly.Clipped != polygon->Clipped;
            poly.Clipped = poly.Clipped->f)
-        gui->graphics->thindraw_pcb_polygon (gc, &poly, clip_box);
+        common_thindraw_pcb_polygon (gc, &poly, clip_box);
     }
 }
 
@@ -611,8 +611,7 @@ common_draw_helpers_init (HID_DRAW *graphics)
   graphics->draw_pcb_text        = common_draw_pcb_text;
   graphics->draw_pcb_polygon     = common_fill_pcb_polygon; /* Default is the non-GUI case */
 
-  graphics->fill_pcb_polygon     = common_fill_pcb_polygon;
-  graphics->thindraw_pcb_polygon = common_thindraw_pcb_polygon;
+  graphics->draw_pcb_polygon     = common_fill_pcb_polygon;
   graphics->fill_pcb_pad         = common_fill_pcb_pad;
   graphics->thindraw_pcb_pad     = common_thindraw_pcb_pad;
   graphics->fill_pcb_pv          = common_fill_pcb_pv;
diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index 9124ba5..04f1e05 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -575,20 +575,20 @@ ghid_fill_polygon (hidGC gc, int n_coords, Coord *x, Coord *y)
   hidgl_fill_polygon (n_coords, x, y);
 }
 
-void
-ghid_fill_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box)
+static void
+fill_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box)
 {
   USE_GC (gc);
 
   hidgl_fill_pcb_polygon (poly, clip_box, gport->view.coord_per_px);
 }
 
-void
-ghid_thindraw_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box)
+static void
+thindraw_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box)
 {
   common_thindraw_pcb_polygon (gc, poly, clip_box);
   ghid_set_alpha_mult (gc, 0.25);
-  gui->graphics->fill_pcb_polygon (gc, poly, clip_box);
+  fill_pcb_polygon (gc, poly, clip_box);
   ghid_set_alpha_mult (gc, 1.0);
 }
 
@@ -600,6 +600,28 @@ ghid_fill_rect (hidGC gc, Coord x1, Coord y1, Coord x2, Coord y2)
   hidgl_fill_rect (x1, y1, x2, y2);
 }
 
+static void
+ghid_draw_pcb_polygon (hidGC gc, PolygonType *polygon, const BoxType *drawn_area)
+{
+  USE_GC (gc);
+
+  if (TEST_FLAG (THINDRAWFLAG, PCB) || TEST_FLAG (THINDRAWPOLYFLAG, PCB))
+    thindraw_pcb_polygon (gc, polygon, drawn_area);
+  else
+    fill_pcb_polygon (gc, polygon, drawn_area);
+
+  /* If checking planes, thin-draw any pieces which have been clipped away */
+  if (TEST_FLAG (CHECKPLANESFLAG, PCB) && !TEST_FLAG (FULLPOLYFLAG, polygon))
+    {
+      PolygonType poly = *polygon;
+
+      for (poly.Clipped = polygon->Clipped->f;
+           poly.Clipped != polygon->Clipped;
+           poly.Clipped = poly.Clipped->f)
+        thindraw_pcb_polygon (gc, &poly, drawn_area);
+    }
+}
+
 void
 ghid_invalidate_lr (int left, int right, int top, int bottom)
 {
@@ -790,8 +812,7 @@ ghid_init_renderer (int *argc, char ***argv, GHidPort *port)
 
   /* Setup HID function pointers specific to the GL renderer*/
   ghid_hid.end_layer = ghid_end_layer;
-  ghid_graphics.fill_pcb_polygon = ghid_fill_pcb_polygon;
-  ghid_graphics.thindraw_pcb_polygon = ghid_thindraw_pcb_polygon;
+  ghid_graphics.draw_pcb_polygon = ghid_draw_pcb_polygon;
 }
 
 void
@@ -881,7 +902,7 @@ ghid_drawing_area_expose_cb (GtkWidget *widget,
      we can't use the hidgl polygon drawing routine */
   /* TODO: We could use the GLU tessellator though */
   if (hidgl_stencil_bits() == 0)
-    ghid_graphics.fill_pcb_polygon = common_fill_pcb_polygon;
+    ghid_graphics.draw_pcb_polygon = common_gui_draw_pcb_polygon;
 
   glEnable (GL_BLEND);
   glBlendFunc (GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
diff --git a/src/hid_draw.h b/src/hid_draw.h
index 5fec955..a6f8938 100644
--- a/src/hid_draw.h
+++ b/src/hid_draw.h
@@ -56,8 +56,6 @@ struct hid_draw_st
   void (*draw_pcb_text) (hidGC gc, TextType *, Coord);
   void (*draw_pcb_polygon) (hidGC gc, PolygonType *poly, const BoxType *clip_box);
 
-  void (*fill_pcb_polygon) (hidGC gc, PolygonType *poly, const BoxType *clip_box);
-  void (*thindraw_pcb_polygon) (hidGC gc, PolygonType *poly, const BoxType *clip_box);
   void (*fill_pcb_pad) (hidGC gc, PadType *pad, bool clip, bool mask);
   void (*thindraw_pcb_pad) (hidGC gc, PadType *pad, bool clip, bool mask);
   void (*fill_pcb_pv) (hidGC fg_gc, hidGC bg_gc, PinType *pv, bool drawHole, bool mask);
