Bottom: d584b4b1c2416f18c5564bd31225cba9138d84a9
Top:    3edded9a42dad188c814b8a3227a45eeaf5d17a1
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-09-14 23:27:45 +0100

undo.c: Add error message where RestoreUndoSerialNumber() will break things

If operations are addded to the undo stack between a call to
IncrementUndoSerialNumber() and a subsequent call for
RestoreUndoSerialNumber(), those added operations will be placed in the
undo stack with an inconsistent serial number.

The {Save,Restore}UndoSerialNumber() API is pretty fragile in this
regard, and we should avoid using it where possible.

An better alternative might be to implement a "LockUndoSerialNumber()"
call which temporarily disables IncrementUndoSerialNumber(), and a
"UnlockUndoSerialNumber()" call which re-enables its increment function.


---

diff --git a/src/undo.c b/src/undo.c
index 7832600..38fd1bd 100644
--- a/src/undo.c
+++ b/src/undo.c
@@ -76,6 +76,8 @@
 
 RCSID ("$Id$");
 
+static bool added_undo_whilst_bumped = false;
+
 /* ---------------------------------------------------------------------------
  * some local data types
  */
@@ -254,6 +256,9 @@ GetUndoSlot (int CommandType, int ID, int Kind)
 	break;
       }
 
+  if (Bumped)
+    added_undo_whilst_bumped = true;
+
   /* copy typefield and serial number to the list */
   ptr = &UndoList[UndoN++];
   ptr->Type = CommandType;
@@ -1177,6 +1182,8 @@ Redo (bool draw)
 void
 RestoreUndoSerialNumber (void)
 {
+  if (added_undo_whilst_bumped)
+    Message (_("ERROR: Operations were added to the Undo stack with an incorrect serial number\n"));
   Serial = SavedSerial;
 }
 
@@ -1187,6 +1194,7 @@ void
 SaveUndoSerialNumber (void)
 {
   Bumped = false;
+  added_undo_whilst_bumped = false;
   SavedSerial = Serial;
 }
