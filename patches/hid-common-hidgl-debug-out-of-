Bottom: 261b2ed7cabb8874d81c5e68d5ad756c43b3c3d6
Top:    e03b1742642e3fabe62dcbaf9ee2e9494106ffa5
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2015-01-04 20:07:17 +0000

hid/common/hidgl: Debug out of context rendering


---

diff --git a/src/hid/common/hidgl.c b/src/hid/common/hidgl.c
index bccc246..5df34b9 100644
--- a/src/hid/common/hidgl.c
+++ b/src/hid/common/hidgl.c
@@ -71,6 +71,17 @@
 triangle_buffer buffer;
 float global_depth = 0;
 
+static bool in_context = false;
+
+#define CHECK_IS_IN_CONTEXT(retcode) \
+  do { \
+    if (!in_context) { \
+      fprintf (stderr, "hidgl: Drawing called out of context in function %s\n", \
+             __FUNCTION__); \
+      return retcode; \
+    } \
+  } while (0)
+
 static void
 hidgl_init_triangle_array (triangle_buffer *buffer)
 {
@@ -81,6 +92,7 @@ hidgl_init_triangle_array (triangle_buffer *buffer)
 void
 hidgl_flush_triangles (triangle_buffer *buffer)
 {
+  CHECK_IS_IN_CONTEXT ();
   if (buffer->triangle_count == 0)
     return;
 
@@ -96,6 +108,7 @@ hidgl_flush_triangles (triangle_buffer *buffer)
 void
 hidgl_ensure_triangle_space (triangle_buffer *buffer, int count)
 {
+  CHECK_IS_IN_CONTEXT ();
   if (count > TRIANGLE_ARRAY_SIZE)
     {
       fprintf (stderr, "Not enough space in vertex buffer\n");
@@ -193,6 +206,7 @@ static void draw_cap (Coord width, Coord x, Coord y, Angle angle, double scale)
   int slices = calc_slices (radius / scale, M_PI);
   int i;
 
+  CHECK_IS_IN_CONTEXT ();
   if (slices < MIN_TRIANGLES_PER_CAP)
     slices = MIN_TRIANGLES_PER_CAP;
 
@@ -221,6 +235,7 @@ hidgl_draw_line (int cap, Coord width, Coord x1, Coord y1, Coord x2, Coord y2, d
   int circular_caps = 0;
   int hairline = 0;
 
+  CHECK_IS_IN_CONTEXT ();
   if (width == 0.0)
     hairline = 1;
 
@@ -297,6 +312,7 @@ hidgl_draw_arc (Coord width, Coord x, Coord y, Coord rx, Coord ry,
   int i;
   int hairline = 0;
 
+  CHECK_IS_IN_CONTEXT ();
   if (width == 0.0)
     hairline = 1;
 
@@ -360,6 +376,7 @@ hidgl_draw_arc (Coord width, Coord x, Coord y, Coord rx, Coord ry,
 void
 hidgl_draw_rect (Coord x1, Coord y1, Coord x2, Coord y2)
 {
+  CHECK_IS_IN_CONTEXT ();
   glBegin (GL_LINE_LOOP);
   glVertex3f (x1, y1, global_depth);
   glVertex3f (x1, y2, global_depth);
@@ -379,6 +396,7 @@ hidgl_fill_circle (Coord vx, Coord vy, Coord vr, double scale)
   int slices;
   int i;
 
+  CHECK_IS_IN_CONTEXT ();
   slices = calc_slices (vr / scale, 2 * M_PI);
 
   if (slices < MIN_TRIANGLES_PER_CIRCLE)
@@ -528,6 +546,8 @@ hidgl_fill_polygon (int n_coords, Coord *x, Coord *y)
   GLUtesselator *tobj;
   GLdouble *vertices;
 
+  CHECK_IS_IN_CONTEXT ();
+
   assert (n_coords > 0);
 
   vertices = malloc (sizeof(GLdouble) * n_coords * 3);
@@ -608,6 +628,7 @@ fill_polyarea (POLYAREA *pa, const BoxType *clip_box, double scale)
   struct do_hole_info info;
   int stencil_bit;
 
+  CHECK_IS_IN_CONTEXT ();
   info.scale = scale;
   global_scale = scale;
 
@@ -687,6 +708,7 @@ hidgl_fill_pcb_polygon (PolygonType *poly, const BoxType *clip_box, double scale
 void
 hidgl_fill_rect (Coord x1, Coord y1, Coord x2, Coord y2)
 {
+  CHECK_IS_IN_CONTEXT ();
   hidgl_ensure_triangle_space (&buffer, 2);
   hidgl_add_triangle (&buffer, x1, y1, x1, y2, x2, y2);
   hidgl_add_triangle (&buffer, x2, y1, x2, y2, x1, y1);
@@ -695,6 +717,7 @@ hidgl_fill_rect (Coord x1, Coord y1, Coord x2, Coord y2)
 void
 hidgl_init (void)
 {
+  CHECK_IS_IN_CONTEXT ();
   glGetIntegerv (GL_STENCIL_BITS, &stencil_bits);
 
   if (stencil_bits == 0)
@@ -714,6 +737,10 @@ hidgl_init (void)
 void
 hidgl_start_render (void)
 {
+  if (in_context)
+    fprintf (stderr, "hidgl: hidgl_start_render() - Already in rendering context!\n");
+
+  in_context = true;
   hidgl_init ();
   hidgl_init_triangle_array (&buffer);
 }
@@ -721,6 +748,10 @@ hidgl_start_render (void)
 void
 hidgl_finish_render (void)
 {
+  if (!in_context)
+    fprintf (stderr, "hidgl: hidgl_finish_render() - Not currently in rendering context!\n");
+
+  in_context = false;
 }
 
 int
@@ -732,6 +763,7 @@ hidgl_stencil_bits (void)
 static void
 hidgl_clean_unassigned_stencil (void)
 {
+  CHECK_IS_IN_CONTEXT ();
   glPushAttrib (GL_STENCIL_BUFFER_BIT);
   glStencilMask (~assigned_bits);
   glClearStencil (0);
