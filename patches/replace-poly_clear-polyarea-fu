Bottom: 10bd21dc7781bdf4134ef7143a26a7737ffc32e7
Top:    ced064e361cd55883d55df3ebca12b1e89d750f0
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2009-10-21 19:45:05 +0100

Replace poly_Clear(POLYAREA *) function with poly_FreeContours(PLINE **)

The poly_Clear function only clears the contours of the polygon anyway,
so make a more explicitly named function to do this work, and pass the
contours directly.

This will be useful should we want to deal with a series of contours
separately from a POLYAREA object.


---

diff --git a/src/polyarea.h b/src/polyarea.h
index 42acc1a..a883750 100644
--- a/src/polyarea.h
+++ b/src/polyarea.h
@@ -158,7 +158,7 @@ POLYAREA *poly_Create(void);
 
 void poly_Free(POLYAREA **p);
 void poly_Init(POLYAREA  *p);
-void poly_Clear(POLYAREA *p);
+void poly_FreeContours(PLINE **pl);
 BOOLp poly_Valid(POLYAREA *p);
 
 enum PolygonBooleanOperation {
diff --git a/src/polygon1.c b/src/polygon1.c
index fc01611..bfa39b3 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -2314,15 +2314,14 @@ poly_Create (void)
 }
 
 void
-poly_Clear (POLYAREA * P)
+poly_FreeContours (PLINE **pline)
 {
-  PLINE *p;
+  PLINE *pl;
 
-  assert (P != NULL);
-  while ((p = P->contours) != NULL)
+  while ((pl = *pline) != NULL)
     {
-      P->contours = p->next;
-      poly_DelContour (&p);
+      *pline = pl->next;
+      poly_DelContour (&pl);
     }
 }
 
@@ -2335,12 +2334,12 @@ poly_Free (POLYAREA ** p)
     return;
   for (cur = (*p)->f; cur != *p; cur = (*p)->f)
     {
-      poly_Clear (cur);
+      poly_FreeContours (&cur->contours);
       cur->f->b = cur->b;
       cur->b->f = cur->f;
       free (cur);
     }
-  poly_Clear (cur);
+  poly_FreeContours (&cur->contours);
   free (*p), *p = NULL;
 }
