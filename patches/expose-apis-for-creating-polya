Bottom: 86fa4e4337ca70b88584a7d6989ffdac081bc2bf
Top:    1878654fc938fe8a800bbfc9486c5423756d24f2
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2010-06-06 22:02:12 +0100

Expose APIs for creating POLYAREA from PolygonType objects and back

The PolygonPoly() API wraps polygon.c's original_poly() function,
whilst PolyToPolygonsOnLayer() converts the passed POLYAREA and all
those linked to it into discrete PolygonType objects on the board.


---

diff --git a/src/polygon.c b/src/polygon.c
index 971481f..b45ae4d 100644
--- a/src/polygon.c
+++ b/src/polygon.c
@@ -327,6 +327,12 @@ original_poly (PolygonType * p)
 }
 
 POLYAREA *
+PolygonToPoly (PolygonType *p)
+{
+  return original_poly (p);
+}
+
+POLYAREA *
 RectPoly (LocationType x1, LocationType x2, LocationType y1, LocationType y2)
 {
   PLINE *contour = NULL;
@@ -1955,6 +1961,62 @@ delete_piece_cb (gpointer data, gpointer userdata)
   poly_Free (&piece);
 }
 
+/* Convert a POLYAREA (and all linked POLYAREA) to
+ * raw PCB polygons on the given layer.
+ */
+void
+PolyToPolygonsOnLayer (DataType *Destination, LayerType *Layer,
+                       POLYAREA *Input, FlagType Flags)
+{
+  PolygonType *Polygon;
+  POLYAREA *pa;
+  PLINE *pline;
+  VNODE *node;
+  bool outer;
+
+  if (Input == NULL)
+    return;
+
+  pa = Input;
+  do
+    {
+      Polygon = CreateNewPolygon (Layer, Flags);
+
+      pline = pa->contours;
+      outer = true;
+
+      do
+        {
+          if (!outer)
+            CreateNewHoleInPolygon (Polygon);
+          outer = false;
+
+          node = &pline->head;
+          do
+            {
+              CreateNewPointInPolygon (Polygon, node->point[0],
+                                                node->point[1]);
+            }
+          while ((node = node->next) != &pline->head);
+
+        }
+      while ((pline = pline->next) != NULL);
+
+      InitClip (Destination, Layer, Polygon);
+      SetPolygonBoundingBox (Polygon);
+      if (!Layer->polygon_tree)
+        Layer->polygon_tree = r_create_tree (NULL, 0, 0);
+      r_insert_entry (Layer->polygon_tree, (BoxType *) Polygon, 0);
+
+      DrawPolygon (Layer, Polygon, 0);
+      /* add to undo list */
+      AddObjectToCreateUndoList (POLYGON_TYPE, Layer, Polygon, Polygon);
+    }
+  while ((pa = pa->f) != Input);
+
+  SetChangedFlag (true);
+}
+
 POLYAREA *board_outline_poly ()
 {
   int i;
diff --git a/src/polygon.h b/src/polygon.h
index 6b23e4d..5b3baf6 100644
--- a/src/polygon.h
+++ b/src/polygon.h
@@ -50,6 +50,7 @@ int PlowsPolygon (DataType *, int, void *, void *,
 		  int (*callback) (DataTypePtr, LayerTypePtr, PolygonTypePtr, int, void *, void *));
 void ComputeNoHoles (PolygonType *poly);
 POLYAREA * ContourToPoly (PLINE *);
+POLYAREA * PolygonToPoly (PolygonType *);
 POLYAREA * RectPoly (LocationType x1, LocationType x2, LocationType y1, LocationType y2);
 POLYAREA * CirclePoly(LocationType x, LocationType y, BDimension radius);
 POLYAREA * OctagonPoly(LocationType x, LocationType y, BDimension radius);
@@ -70,5 +71,6 @@ bool isects (POLYAREA *, PolygonTypePtr, bool);
 bool MorphPolygon (LayerTypePtr, PolygonTypePtr);
 void NoHolesPolygonDicer (PolygonType *p, const BoxType *clip,
                           void (*emit) (PLINE *, void *), void *user_data);
+void PolyToPolygonsOnLayer (DataType *, LayerType *, POLYAREA *, FlagType);
 POLYAREA *board_outline_poly ();
 #endif
