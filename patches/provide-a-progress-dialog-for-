Bottom: 979925f0c38de7d565108736f8dfbd6307e6aa7b
Top:    0be548f61c69dec3a736aaf5790ba5c607ea0192
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-05-02 15:26:15 +0100

Provide a progress dialog for the autorouter


---

diff --git a/src/autoroute.c b/src/autoroute.c
index d419031..cc6587f 100644
--- a/src/autoroute.c
+++ b/src/autoroute.c
@@ -92,7 +92,6 @@ RCSID ("$Id$");
 #define ROUTE_VERBOSE
 */
 
-/*
 #define ROUTE_DEBUG
 //#define DEBUG_SHOW_ROUTE_BOXES
 #define DEBUG_SHOW_EXPANSION_BOXES
@@ -101,7 +100,6 @@ RCSID ("$Id$");
 #define DEBUG_SHOW_TARGETS
 #define DEBUG_SHOW_SOURCES
 //#define DEBUG_SHOW_ZIGZAG
-*/
 
 static direction_t
 directionIncrement(direction_t dir)
@@ -441,6 +439,7 @@ static int passes = 12;
 static int routing_layers = 0;
 static float total_wire_length = 0;
 static int total_via_count = 0;
+static double old_percent = 0;
 
 /* assertion helper for routeboxen */
 #ifndef NDEBUG
@@ -4650,6 +4649,7 @@ RouteAll (routedata_t * rd)
   struct routeall_status ras;
   struct routeone_status ros;
   bool rip;
+  int request_cancel;
 #ifdef NET_HEAP
   heap_t *net_heap;
 #endif
@@ -4834,8 +4834,15 @@ RouteAll (routedata_t * rd)
 				ras.conflict_subnets++;
 			      else
 				{
+                                  double percent;
 				  ras.routed_subnets++;
 				  ras.total_nets_routed++;
+                                  percent = MAX (0, /*old_percent, */
+                                             ((double)AutoRouteParameters.pass - 1.+
+                                             pow ((double)ras.routed_subnets / (double)ras.total_subnets, 4)) /
+                                             (double)(passes + smoothes + 1));
+                                  gui->progress (percent * 100., 100,  _("Autorouting tracks"));
+                                  old_percent = percent;
 				}
 			    }
 			  else
@@ -4884,7 +4891,15 @@ RouteAll (routedata_t * rd)
       tmp = this_pass;
       this_pass = next_pass;
       next_pass = tmp;
-      /* XXX: here we should update a status bar */
+      {
+        double percent = MAX (0, /*old_percent, */
+                           ((double)AutoRouteParameters.pass - 1.+
+                           pow ((double)ras.routed_subnets / (double)ras.total_subnets, 4)) /
+                           (double)(passes + smoothes + 1));
+        old_percent = percent;
+        request_cancel = gui->progress (percent * 100., 100,
+                                        _("Autorouting tracks"));
+      }
 #if defined(ROUTE_DEBUG) || defined (ROUTE_VERBOSE)
       printf
 	("END OF PASS %d: %d/%d subnets routed without conflicts at cost %.0f, %d conflicts, %d failed %d ripped\n",
@@ -5121,6 +5136,8 @@ AutoRoute (bool selected)
   total_wire_length = 0;
   total_via_count = 0;
 
+  old_percent = 0;
+
 #ifdef ROUTE_DEBUG
   ddraw = gui->request_debug_draw ();
   if (ddraw != NULL)
@@ -5283,6 +5300,7 @@ AutoRoute (bool selected)
   /* auto-route all nets */
   changed = (RouteAll (rd).total_nets_routed > 0) || changed;
 donerouting:
+  gui->progress (0, 0, NULL);
   if (changed && TEST_FLAG (LIVEROUTEFLAG, PCB))
     {
       int i;
diff --git a/src/hid/gtk/gtkhid-main.c b/src/hid/gtk/gtkhid-main.c
index ac961db..ca6db96 100644
--- a/src/hid/gtk/gtkhid-main.c
+++ b/src/hid/gtk/gtkhid-main.c
@@ -739,9 +739,66 @@ ghid_beep ()
   gdk_beep ();
 }
 
+struct progress_dialog
+{
+  GtkWidget *dialog;
+  GtkWidget *message;
+  GtkWidget *progress;
+};
+
+static struct progress_dialog *
+make_progress_dialog (void)
+{
+  struct progress_dialog *pd;
+  GtkWidget *vbox;
+
+  pd = g_new0 (struct progress_dialog, 1);
+
+  pd->dialog = gtk_dialog_new ();
+  gtk_window_set_title (GTK_WINDOW (pd->dialog), _("Progress"));
+
+  pd->message = gtk_label_new (NULL);
+  pd->progress = gtk_progress_bar_new ();
+
+  vbox = gtk_vbox_new (false, 8);
+  gtk_box_pack_start (GTK_BOX (vbox), pd->message, true, true, 8);
+  gtk_box_pack_start (GTK_BOX (vbox), pd->progress, false, true, 8);
+
+  gtk_box_pack_start (GTK_BOX (GTK_DIALOG (pd->dialog)->vbox),
+                      vbox, true, true, 0);
+  gtk_widget_show_all (vbox);
+
+  return pd;
+}
+
 static int
 ghid_progress (int so_far, int total, const char *message)
 {
+  static struct progress_dialog *pd = NULL;
+
+  /* If we are finished, destroy any dialog */
+  if (so_far == 0 && total == 0 && message == NULL)
+    {
+      if (pd != NULL)
+        gtk_widget_destroy (pd->dialog);
+
+      g_free (pd);
+      pd = NULL;
+      return 0;
+    }
+
+  if (pd == NULL)
+    {
+      pd = make_progress_dialog ();
+      gtk_window_present (GTK_WINDOW (pd->dialog));
+    }
+
+  gtk_label_set_text (GTK_LABEL (pd->message), message);
+  gtk_progress_bar_set_fraction (GTK_PROGRESS_BAR (pd->progress),
+                                 (double)so_far / (double)total);
+
+  gdk_window_process_updates (pd->dialog->window, true);
+
   return 0;
 }
