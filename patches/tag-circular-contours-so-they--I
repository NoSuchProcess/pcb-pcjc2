Bottom: a5d2dda35c7413e49f8d33c4b0a2c9c7bee89924
Top:    81f60dc6008fb250cd253390c91c3b155299b164
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2009-11-12 00:55:54 +0000

Tag circular contours so they can be drawn quicker


---

diff --git a/src/hid/common/draw_helpers.c b/src/hid/common/draw_helpers.c
index ded1bc8..fa2df9b 100644
--- a/src/hid/common/draw_helpers.c
+++ b/src/hid/common/draw_helpers.c
@@ -98,6 +98,14 @@ void common_fill_pcb_polygon (hidGC gc, PolygonType *poly,
 static int thindraw_hole_cb (PLINE *pl, void *user_data)
 {
   hidGC gc = user_data;
+
+  /* If the contour is round, use an arc drawing routine. */
+  if (pl->is_round) {
+    gui->set_line_width (gc, 0);
+    gui->draw_arc (gc, pl->cx, pl->cy, pl->radius, pl->radius, 0, 360);
+    return 0;
+  }
+
   thindraw_contour (gc, pl);
   return 0;
 }
diff --git a/src/hid/common/hidgl.c b/src/hid/common/hidgl.c
index db206cd..cb53763 100644
--- a/src/hid/common/hidgl.c
+++ b/src/hid/common/hidgl.c
@@ -606,6 +606,7 @@ void tesselate_contour (GLUtesselator *tobj, VNODE *vnode, GLdouble *vertices)
 struct do_hole_info {
   GLUtesselator *tobj;
   GLdouble *vertices;
+  double scale;
 };
 
 static int
@@ -613,10 +614,24 @@ do_hole (const BoxType *b, void *cl)
 {
   struct do_hole_info *info = cl;
   PLINE *curc = (PLINE *) b;
+
   /* Ignore the outer contour - we draw it first explicitly*/
   if (curc->Flags.orient == PLF_DIR) {
     return 0;
   }
+
+  /* If the contour is round, and hidgl_fill_circle would use
+   * less slices than we have vertices to draw it, then call
+   * hidgl_fill_circle to draw this contour.
+   */
+  if (curc->is_round) {
+    double slices = calc_slices (curc->radius / info->scale, 2 * M_PI);
+    if (slices < curc->Count) {
+      hidgl_fill_circle (curc->cx, curc->cy, curc->radius, info->scale);
+      return 1;
+    }
+  }
+
   tesselate_contour (info->tobj, &curc->head, info->vertices);
   return 1;
 }
@@ -634,6 +649,7 @@ hidgl_fill_pcb_polygon (PolygonType *poly, const BoxType *clip_box, double scale
   struct do_hole_info info;
   int stencil_bit;
 
+  info.scale = scale;
   global_scale = scale;
 
   if (poly->Clipped == NULL)
diff --git a/src/polyarea.h b/src/polyarea.h
index 50dda4a..ce427ad 100644
--- a/src/polyarea.h
+++ b/src/polyarea.h
@@ -99,6 +99,10 @@ struct PLINE
     unsigned int Count;
     double area;
     rtree_t *tree;
+    int is_round;
+    int cx;
+    int cy;
+    int radius;
     struct {
       unsigned int status:3;
       unsigned int orient:1;
diff --git a/src/polygon.c b/src/polygon.c
index dfb6bb6..2b5a678 100644
--- a/src/polygon.c
+++ b/src/polygon.c
@@ -342,6 +342,10 @@ CirclePoly (LocationType x, LocationType y, BDimension radius)
   if ((contour = poly_NewContour (v)) == NULL)
     return NULL;
   frac_circle (contour, x, y, v, 1);
+  contour->is_round = TRUE;
+  contour->cx = x;
+  contour->cy = y;
+  contour->radius = radius;
   return ContourToPoly (contour);
 }
 
diff --git a/src/polygon1.c b/src/polygon1.c
index 9dd09e2..a369b2d 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -2535,6 +2535,10 @@ poly_IniContour (PLINE * c)
   c->head.next = c->head.prev = &c->head;
   c->xmin = c->ymin = 0x7fffffff;
   c->xmax = c->ymax = 0x80000000;
+  c->is_round = FALSE;
+  c->cx = 0;
+  c->cy = 0;
+  c->radius = 0;
 }
 
 PLINE *
