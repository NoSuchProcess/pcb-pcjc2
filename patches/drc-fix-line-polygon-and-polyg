Bottom: 39e49d2ae5e4bc058ecd2eed6bf6edec566cf5d5
Top:    f36717476569caab9a9d61e717642a2e751428f2
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-03-31 02:14:08 +0100

drc: Fix line <-> polygon and polygon <-> polygon tests tests

In src/find.c, the one polygon is tested against a series of bloated
lines following the outline of the second polygon.

In IsPolygonInPolygon() we have:

  line.Thickness = 2 * Bloat;

But the test which is called, IsLineInPolygon()

Also adds bloat to the line:

  lp = LinePoly (Line, Line->Thickness + Bloat)

This bloat is actually half the size we should be adding for this
test, as the LinePoly argument is a line thickness, not cap radius.

Fix this all by doubling the bloat added in IsLineInPolygon(), and
set line.Thickness = 0; in IsPolygonInPolygon().


---

diff --git a/src/find.c b/src/find.c
index e2517a1..a162e96 100644
--- a/src/find.c
+++ b/src/find.c
@@ -772,10 +772,10 @@ LOCtoPVpoly_callback (const BoxType * b, void *cl)
       wide = MAX (wide, 0);
       if (TEST_FLAG (SQUAREFLAG, &i->pv))
         {
-          LocationType x1 = i->pv.X - (i->pv.Thickness + 1 + Bloat) / 2;
-          LocationType x2 = i->pv.X + (i->pv.Thickness + 1 + Bloat) / 2;
-          LocationType y1 = i->pv.Y - (i->pv.Thickness + 1 + Bloat) / 2;
-          LocationType y2 = i->pv.Y + (i->pv.Thickness + 1 + Bloat) / 2;
+          LocationType x1 = i->pv.X - (i->pv.Thickness + 1) / 2 - Bloat;
+          LocationType x2 = i->pv.X + (i->pv.Thickness + 1) / 2 + Bloat;
+          LocationType y1 = i->pv.Y - (i->pv.Thickness + 1) / 2 - Bloat;
+          LocationType y2 = i->pv.Y + (i->pv.Thickness + 1) / 2 + Bloat;
           if (IsRectangleInPolygon (x1, y1, x2, y2, polygon)
               && ADD_POLYGON_TO_LIST (i->layer, polygon))
             longjmp (i->env, 1);
@@ -1119,10 +1119,10 @@ pv_poly_callback (const BoxType * b, void *cl)
       if (TEST_FLAG (SQUAREFLAG, pv))
         {
           LocationType x1, x2, y1, y2;
-          x1 = pv->X - (pv->Thickness + 1 + Bloat) / 2;
-          x2 = pv->X + (pv->Thickness + 1 + Bloat) / 2;
-          y1 = pv->Y - (pv->Thickness + 1 + Bloat) / 2;
-          y2 = pv->Y + (pv->Thickness + 1 + Bloat) / 2;
+          x1 = pv->X - (pv->Thickness + 1) / 2 - Bloat;
+          x2 = pv->X + (pv->Thickness + 1) / 2 + Bloat;
+          y1 = pv->Y - (pv->Thickness + 1) / 2 - Bloat;
+          y2 = pv->Y + (pv->Thickness + 1) / 2 + Bloat;
           if (IsRectangleInPolygon (x1, y1, x2, y2, &i->polygon)
               && ADD_PV_TO_LIST (pv))
             longjmp (i->env, 1);
@@ -2670,7 +2670,7 @@ IsLineInPolygon (LineTypePtr Line, PolygonTypePtr Polygon)
     return false;
   if (TEST_FLAG(SQUAREFLAG,Line)&&(Line->Point1.X==Line->Point2.X||Line->Point1.Y==Line->Point2.Y))
      {
-       BDimension wid = (Line->Thickness + Bloat + 1) / 2;
+       BDimension wid = (Line->Thickness + 1) / 2 + Bloat;
        LocationType x1, x2, y1, y2;
 
        x1 = MIN (Line->Point1.X, Line->Point2.X) - wid;
@@ -2684,7 +2684,7 @@ IsLineInPolygon (LineTypePtr Line, PolygonTypePtr Polygon)
       && Box->Y1 <= Polygon->Clipped->contours->ymax + Bloat
       && Box->Y2 >= Polygon->Clipped->contours->ymin - Bloat)
     {
-      if (!(lp = LinePoly (Line, Line->Thickness + Bloat)))
+      if (!(lp = LinePoly (Line, Line->Thickness + 2 * Bloat)))
         return FALSE;           /* error */
       return isects (lp, Polygon, true);
     }
@@ -2743,12 +2743,7 @@ IsPolygonInPolygon (PolygonTypePtr P1, PolygonTypePtr P2)
 
               line.Point1.X = v->point[0];
               line.Point1.Y = v->point[1];
-              line.Thickness = Bloat;
-              /* Another Bloat is added by IsLineInPolygon, making the correct
-               * 2x Bloat. Ideally we would change it there, but doing so
-               * breaks some other DRC checks which rely on the broken behaviour
-               * in IsLineInPolygon.
-               */
+              line.Thickness = 0; /* Bloat is added by IsLineInPolygon */
               line.Clearance = 0;
               line.Flags = NoFlags ();
               for (v = v->next; v != &c->head; v = v->next)
