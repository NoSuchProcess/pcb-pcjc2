Bottom: 16eecb3dbfb6858f5cebae9b61e836a42fbaaa62
Top:    5ee3ea58ac85a19244cef9c27a6b98419cab3abe
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2009-11-15 00:23:18 +0000

By popular(*) request, Make the cross-hair snap to the center of pads

* Popular.. or vocal?, I'm not sure.

If more people don't like the new behaviour, there is always git revert.

There was of course, a third possibility - adding support to snap to pad
end-points _and_ their centers. I rejected this because of "nearly" square
pads - it becomes difficult to know if you've picked up the center of the
pad, and many of those asking for snap-to-center wanted it in order to
pick up and align components by their pads.

NB: Optimised rat-lines still go to the edge of pads, as this can often
    look less cluttered. Rat-lines drawn to the center of a pad will
    work correctly, and remain on the pad center until the next time
    "optimise" is run on the rats-nest.


---

diff --git a/src/crosshair.c b/src/crosshair.c
index 8321929..367922e 100644
--- a/src/crosshair.c
+++ b/src/crosshair.c
@@ -880,19 +880,9 @@ FitCrosshairIntoGrid (LocationType X, LocationType Y)
     {
       PadTypePtr pad = (PadTypePtr) ptr2;
       LocationType px, py;
-      if (SQUARE (pad->Point1.X - Crosshair.X) +
-	  SQUARE (pad->Point1.Y - Crosshair.Y) <
-	  SQUARE (pad->Point2.X - Crosshair.X) + SQUARE (pad->Point2.Y -
-							 Crosshair.Y))
-	{
-	  px = pad->Point1.X;
-	  py = pad->Point1.Y;
-	}
-      else
-	{
-	  px = pad->Point2.X;
-	  py = pad->Point2.Y;
-	}
+
+      px = (pad->Point1.X + pad->Point2.X) / 2;
+      py = (pad->Point1.Y + pad->Point2.Y) / 2;
 
       if (!gui->shift_is_pressed()
 	  || (SQUARE (x0 - Crosshair.X) + SQUARE (y0 - Crosshair.Y) >
