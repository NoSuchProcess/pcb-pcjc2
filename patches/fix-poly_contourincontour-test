Bottom: 5d75ca02f120fa4a21fe9e2a3ba880d1546ce025
Top:    d283e3ee1bb9101a2cdd074a4db4c02efb852cc2
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2010-03-18 20:33:49 +0000

Fix poly_ContourInContour() test not to return TRUE for touching contours

This test could previously return true for touching contours, such as:
 __________....
|_________ |  :
:........ ||  :
::  /\  : ||  :   Note that the bounding box of A is inside that of B,
:: /  \ :/  \ :   such that initial bounding box checks won't reject the
::/ A  \/  B \:   possibility of A being inside B.
::\    /\    /:
:: \  / :\  / :
::..\/..:.\/..:

When testing for insideness, the first point on A's contour is picked.
In this case, unfortunately being the touching X point between the two
contours. This point (correctly) returns as being inside B - and the
false presumption is that the whole A contour is inside B.

This commit introduces an unfortunately slow, but more robust test,
where we check each note in A for whether it is inside B. We return
as soon as we find an A node outside B, however this means the test
is VERY much slower for the case where A _is_ inside B.


---

diff --git a/src/polygon1.c b/src/polygon1.c
index 226b8ca..1866a4f 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -2966,10 +2966,24 @@ poly_M_CheckInside (POLYAREA * p, Vector v0)
 int
 poly_ContourInContour (PLINE * poly, PLINE * inner)
 {
+  VNODE *pt;
   assert (poly != NULL);
   assert (inner != NULL);
   if (cntrbox_inside (inner, poly))
-    return poly_InsideContour (poly, inner->head.point);
+    { /* FIXME: This is SLOW!!
+       * Check all points on the contour being tested, because we don't
+       * want to falsely return that two contours are inside each other
+       * if they just touch at a few points.
+       */
+      pt = &inner->head;
+      do
+        {
+          if (!poly_InsideContour (poly, pt->point))
+            return 0;
+        } while ((pt = pt->next) != &inner->head);
+      return 1;
+    }
+  }
   return 0;
 }
