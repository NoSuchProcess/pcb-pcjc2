Bottom: 1a1a06cf7a3888ff2ad8409753312623a0b4de9b
Top:    40bcfc842a59ca6438136be2fcf8c323bd211ac3
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2014-06-26 23:47:22 +0100

Use new function GetLayerGroupNumberBySide() to make code clearer

Replaces code calling GetLayerGroupNumberByNumber() against one of the
silk-screen layers in order to find the layer group containing the top
or bottom side of the board.

Patch includes various renaming of component -> top, and solder -> bottom


---

diff --git a/src/action.c b/src/action.c
index e496820..8142467 100644
--- a/src/action.c
+++ b/src/action.c
@@ -1386,7 +1386,7 @@ NotifyMode (void)
 		int flag = CLEARLINEFLAG;
 
 		if (GetLayerGroupNumberByNumber (INDEXOFCURRENT) ==
-		    GetLayerGroupNumberByNumber (solder_silk_layer))
+		    GetLayerGroupNumberBySide (BOTTOM_SIDE))
 		  flag |= ONSOLDERFLAG;
 		if ((text = CreateNewText (CURRENT, &PCB->Font, Note.X,
 					   Note.Y, 0, Settings.TextScale,
diff --git a/src/autoplace.c b/src/autoplace.c
index 21ab5f2..7262601 100644
--- a/src/autoplace.c
+++ b/src/autoplace.c
@@ -152,11 +152,11 @@ PerturbationType;
 static void
 UpdateXY (NetListType *Nets)
 {
-  Cardinal SLayer, CLayer;
+  Cardinal top_group, bottom_group;
   Cardinal i, j;
-  /* find layer groups of the component side and solder side */
-  SLayer = GetLayerGroupNumberByNumber (solder_silk_layer);
-  CLayer = GetLayerGroupNumberByNumber (component_silk_layer);
+  /* find layer groups of the top and bottom sides */
+  top_group = GetLayerGroupNumberBySide (TOP_SIDE);
+  bottom_group = GetLayerGroupNumberBySide (BOTTOM_SIDE);
   /* update all nets */
   for (i = 0; i < Nets->NetN; i++)
     {
@@ -166,14 +166,13 @@ UpdateXY (NetListType *Nets)
 	  switch (c->type)
 	    {
 	    case PAD_TYPE:
-	      c->group = TEST_FLAG (ONSOLDERFLAG,
-				    (ElementType *) c->ptr1)
-		? SLayer : CLayer;
+	      c->group = TEST_FLAG (ONSOLDERFLAG, (ElementType *) c->ptr1)
+	                  ? bottom_group : top_group;
 	      c->X = ((PadType *) c->ptr2)->Point1.X;
 	      c->Y = ((PadType *) c->ptr2)->Point1.Y;
 	      break;
 	    case PIN_TYPE:
-	      c->group = SLayer;	/* any layer will do */
+	      c->group = bottom_group;  /* any layer will do */
 	      c->X = ((PinType *) c->ptr2)->X;
 	      c->Y = ((PinType *) c->ptr2)->Y;
 	      break;
diff --git a/src/autoroute.c b/src/autoroute.c
index ce75794..53d7989 100644
--- a/src/autoroute.c
+++ b/src/autoroute.c
@@ -959,8 +959,8 @@ CreateRouteData ()
     }
   /* if via visibility is turned off, don't use them */
   AutoRouteParameters.use_vias = routing_layers > 1 && PCB->ViaOn;
-  front = GetLayerGroupNumberByNumber (component_silk_layer);
-  back = GetLayerGroupNumberByNumber (solder_silk_layer);
+  front = GetLayerGroupNumberBySide (TOP_SIDE);
+  back = GetLayerGroupNumberBySide (BOTTOM_SIDE);
   /* determine preferred routing direction on each group */
   for (i = 0; i < max_group; i++)
     {
diff --git a/src/buffer.c b/src/buffer.c
index f675add..c7bd186 100644
--- a/src/buffer.c
+++ b/src/buffer.c
@@ -840,7 +840,7 @@ SmashBufferElement (BufferType *Buffer)
 {
   ElementType *element;
   Cardinal group;
-  LayerType *clayer, *slayer;
+  LayerType *top_layer, *bottom_layer;
 
   if (Buffer->Data->ElementN != 1)
     {
@@ -889,18 +889,14 @@ SmashBufferElement (BufferType *Buffer)
 		  pin->DrillingHole, pin->Number, f);
   }
   END_LOOP;
-  group =
-    GetLayerGroupNumberByNumber (SWAP_IDENT ? solder_silk_layer :
-					      component_silk_layer);
-  clayer = &Buffer->Data->Layer[PCB->LayerGroups.Entries[group][0]];
-  group =
-    GetLayerGroupNumberByNumber (SWAP_IDENT ? component_silk_layer :
-					      solder_silk_layer);
-  slayer = &Buffer->Data->Layer[PCB->LayerGroups.Entries[group][0]];
+  group = GetLayerGroupNumberBySide (SWAP_IDENT ? BOTTOM_SIDE : TOP_SIDE);
+  top_layer = &Buffer->Data->Layer[PCB->LayerGroups.Entries[group][0]];
+  group = GetLayerGroupNumberBySide (SWAP_IDENT ? TOP_SIDE : BOTTOM_SIDE);
+  bottom_layer = &Buffer->Data->Layer[PCB->LayerGroups.Entries[group][0]];
   PAD_LOOP (element);
   {
     LineType *line;
-    line = CreateNewLineOnLayer (TEST_FLAG (ONSOLDERFLAG, pad) ? slayer : clayer,
+    line = CreateNewLineOnLayer (TEST_FLAG (ONSOLDERFLAG, pad) ? bottom_layer : top_layer,
 				 pad->Point1.X, pad->Point1.Y,
 				 pad->Point2.X, pad->Point2.Y,
 				 pad->Thickness, pad->Clearance, NoFlags ());
@@ -1000,17 +996,17 @@ ConvertBufferToElement (BufferType *Buffer)
 
   for (onsolder = 0; onsolder < 2; onsolder ++)
     {
-      int silk_layer;
+      int side;
       int onsolderflag;
 
       if ((!onsolder) == (!SWAP_IDENT))
 	{
-	  silk_layer = component_silk_layer;
+	  side = TOP_SIDE;
 	  onsolderflag = NOFLAG;
 	}
       else
 	{
-	  silk_layer = solder_silk_layer;
+	  side = BOTTOM_SIDE;
 	  onsolderflag = ONSOLDERFLAG;
 	}
 
@@ -1025,7 +1021,7 @@ ConvertBufferToElement (BufferType *Buffer)
 	    } \
 
       /* get the component-side SM pads */
-      group = GetLayerGroupNumberByNumber (silk_layer);
+      group = GetLayerGroupNumberBySide (side);
       GROUP_LOOP (Buffer->Data, group);
       {
 	char num[8];
@@ -1467,7 +1463,7 @@ static void
 SwapBuffer (BufferType *Buffer)
 {
   int j, k;
-  Cardinal sgroup, cgroup;
+  Cardinal top_group, bottom_group;
   LayerType swap;
 
   ELEMENT_LOOP (Buffer->Data);
@@ -1541,15 +1537,15 @@ SwapBuffer (BufferType *Buffer)
   Buffer->Data->Layer[component_silk_layer] = swap;
 
   /* swap layer groups when balanced */
-  sgroup = GetLayerGroupNumberByNumber (solder_silk_layer);
-  cgroup = GetLayerGroupNumberByNumber (component_silk_layer);
-  if (PCB->LayerGroups.Number[cgroup] == PCB->LayerGroups.Number[sgroup])
+  top_group = GetLayerGroupNumberBySide (TOP_SIDE);
+  bottom_group = GetLayerGroupNumberBySide (BOTTOM_SIDE);
+  if (PCB->LayerGroups.Number[top_group] == PCB->LayerGroups.Number[bottom_group])
     {
-      for (j = k = 0; j < PCB->LayerGroups.Number[sgroup]; j++)
+      for (j = k = 0; j < PCB->LayerGroups.Number[bottom_group]; j++)
 	{
 	  int t1, t2;
-	  Cardinal cnumber = PCB->LayerGroups.Entries[cgroup][k];
-	  Cardinal snumber = PCB->LayerGroups.Entries[sgroup][j];
+	  Cardinal cnumber = PCB->LayerGroups.Entries[top_group][k];
+	  Cardinal snumber = PCB->LayerGroups.Entries[bottom_group][j];
 
 	  if (snumber >= max_copper_layer)
 	    continue;
@@ -1558,7 +1554,7 @@ SwapBuffer (BufferType *Buffer)
 	  while (cnumber >= max_copper_layer)
 	    {
 	      k++;
-	      cnumber = PCB->LayerGroups.Entries[cgroup][k];
+	      cnumber = PCB->LayerGroups.Entries[top_group][k];
 	    }
 	  Buffer->Data->Layer[snumber] = Buffer->Data->Layer[cnumber];
 	  Buffer->Data->Layer[cnumber] = swap;
diff --git a/src/crosshair.c b/src/crosshair.c
index 8729237..f0a2d3b 100644
--- a/src/crosshair.c
+++ b/src/crosshair.c
@@ -990,7 +990,7 @@ FitCrosshairIntoGrid (Coord X, Coord Y)
       PadType *pad = (PadType *) ptr2;
       LayerType *desired_layer;
       Cardinal desired_group;
-      Cardinal SLayer, CLayer;
+      Cardinal bottom_group, top_group;
       int found_our_layer = false;
 
       desired_layer = CURRENT;
@@ -1000,10 +1000,10 @@ FitCrosshairIntoGrid (Coord X, Coord Y)
           desired_layer = (LayerType *)Crosshair.AttachedObject.Ptr1;
         }
 
-      /* find layer groups of the component side and solder side */
-      SLayer = GetLayerGroupNumberByNumber (solder_silk_layer);
-      CLayer = GetLayerGroupNumberByNumber (component_silk_layer);
-      desired_group = TEST_FLAG (ONSOLDERFLAG, pad) ? SLayer : CLayer;
+      /* find layer groups of the top and bottom sides */
+      top_group = GetLayerGroupNumberBySide (TOP_SIDE);
+      bottom_group = GetLayerGroupNumberBySide (BOTTOM_SIDE);
+      desired_group = TEST_FLAG (ONSOLDERFLAG, pad) ? bottom_group : top_group;
 
       GROUP_LOOP (PCB->Data, desired_group);
       {
diff --git a/src/draw.c b/src/draw.c
index 20d4492..dee6bea 100644
--- a/src/draw.c
+++ b/src/draw.c
@@ -520,7 +520,7 @@ element_callback (const BoxType * b, void *cl)
 void
 PrintAssembly (int side, const BoxType * drawn_area)
 {
-  int side_group = GetLayerGroupNumberByNumber (max_copper_layer + side);
+  int side_group = GetLayerGroupNumberBySide (side);
 
   doing_assy = true;
   gui->graphics->set_draw_faded (Output.fgGC, 1);
@@ -539,7 +539,7 @@ static void
 DrawEverything (const BoxType *drawn_area)
 {
   int i, ngroups, side;
-  int component, solder;
+  int top_group, bottom_group;
   /* This is the list of layer groups we will draw.  */
   int do_group[MAX_LAYER];
   /* This is the reverse of the order in which we draw them.  */
@@ -562,8 +562,8 @@ DrawEverything (const BoxType *drawn_area)
 	}
     }
 
-  component = GetLayerGroupNumberByNumber (component_silk_layer);
-  solder = GetLayerGroupNumberByNumber (solder_silk_layer);
+  top_group = GetLayerGroupNumberBySide (TOP_SIDE);
+  bottom_group = GetLayerGroupNumberBySide (BOTTOM_SIDE);
 
   /*
    * first draw all 'invisible' stuff
@@ -599,7 +599,7 @@ DrawEverything (const BoxType *drawn_area)
 
   /* Draw pins, pads, vias below silk */
   if (gui->gui)
-    DrawPPV (SWAP_IDENT ? solder : component, drawn_area);
+    DrawPPV (SWAP_IDENT ? bottom_group : top_group, drawn_area);
   else
     {
       CountHoles (&plated, &unplated, drawn_area);
@@ -739,8 +739,8 @@ DrawEMark (ElementType *e, Coord X, Coord Y, bool invisible)
 static void
 DrawPPV (int group, const BoxType *drawn_area)
 {
-  int component_group = GetLayerGroupNumberByNumber (component_silk_layer);
-  int solder_group = GetLayerGroupNumberByNumber (solder_silk_layer);
+  int top_group = GetLayerGroupNumberBySide (TOP_SIDE);
+  int bottom_group = GetLayerGroupNumberBySide (BOTTOM_SIDE);
   int side;
 
   if (PCB->PinOn || !gui->gui)
@@ -749,13 +749,13 @@ DrawPPV (int group, const BoxType *drawn_area)
       r_search (PCB->Data->pin_tree, drawn_area, NULL, pin_callback, NULL);
 
       /* draw element pads */
-      if (group == component_group)
+      if (group == top_group)
         {
           side = TOP_SIDE;
           r_search (PCB->Data->pad_tree, drawn_area, NULL, pad_callback, &side);
         }
 
-      if (group == solder_group)
+      if (group == bottom_group)
         {
           side = BOTTOM_SIDE;
           r_search (PCB->Data->pad_tree, drawn_area, NULL, pad_callback, &side);
diff --git a/src/hid/batch/batch.c b/src/hid/batch/batch.c
index e62e313..b04f16e 100644
--- a/src/hid/batch/batch.c
+++ b/src/hid/batch/batch.c
@@ -77,7 +77,7 @@ static int
 info (int argc, char **argv, Coord x, Coord y)
 {
   int i, j;
-  int cg, sg;
+  int top_group, bottom_group;
   if (!PCB || !PCB->Data || !PCB->Filename)
     {
       printf("No PCB loaded.\n");
@@ -87,15 +87,15 @@ info (int argc, char **argv, Coord x, Coord y)
   pcb_printf("Size: %ml x %ml mils, %mm x %mm mm\n",
 	 PCB->MaxWidth, PCB->MaxHeight,
 	 PCB->MaxWidth, PCB->MaxHeight);
-  cg = GetLayerGroupNumberByNumber (component_silk_layer);
-  sg = GetLayerGroupNumberByNumber (solder_silk_layer);
+  top_group = GetLayerGroupNumberBySide (TOP_SIDE);
+  bottom_group = GetLayerGroupNumberBySide (BOTTOM_SIDE);
   for (i=0; i<MAX_LAYER; i++)
     {
       
       int lg = GetLayerGroupNumberByNumber (i);
       for (j=0; j<MAX_LAYER; j++)
 	putchar(j==lg ? '#' : '-');
-      printf(" %c %s\n", lg==cg ? 'c' : lg==sg ? 's' : '-',
+      printf(" %c %s\n", lg == top_group ? 'c' : lg == bottom_group ? 's' : '-',
 	     PCB->Data->Layer[i].Name);
     }
   return 0;
diff --git a/src/hid/common/flags.c b/src/hid/common/flags.c
index 9c87a54..1229d67 100644
--- a/src/hid/common/flags.c
+++ b/src/hid/common/flags.c
@@ -181,7 +181,7 @@ layer_type_to_file_name (int idx, int style)
       group = GetLayerGroupNumberByNumber(idx);
       nlayers = PCB->LayerGroups.Number[group];
       single_name = PCB->Data->Layer[idx].Name;
-      if (group == GetLayerGroupNumberByNumber(component_silk_layer))
+      if (group == GetLayerGroupNumberBySide(TOP_SIDE))
 	{
 	  if (style == FNS_first
 	      || (style == FNS_single
@@ -189,7 +189,7 @@ layer_type_to_file_name (int idx, int style)
 	    return single_name;
 	  return "top";
 	}
-      else if (group == GetLayerGroupNumberByNumber(solder_silk_layer))
+      else if (group == GetLayerGroupNumberBySide(BOTTOM_SIDE))
 	{
 	  if (style == FNS_first
 	      || (style == FNS_single
diff --git a/src/hid/gcode/gcode.c b/src/hid/gcode/gcode.c
index 208d02d..2fdb78c 100644
--- a/src/hid/gcode/gcode.c
+++ b/src/hid/gcode/gcode.c
@@ -110,7 +110,7 @@ static FILE *gcode_f = NULL;
 
 static int is_mask;
 static int is_drill;
-static int is_solder;
+static int is_bottom;
 
 /*
  * Which groups of layers to export into PNG layer masks. 1 means export, 0
@@ -611,10 +611,10 @@ gcode_do_export (HID_Attr_Val * options)
           /* magic */
           idx = (i >= 0 && i < max_group) ?
             PCB->LayerGroups.Entries[i][0] : i;
-          is_solder =
+          is_bottom =
             (GetLayerGroupNumberByNumber (idx) ==
-             GetLayerGroupNumberByNumber (solder_silk_layer)) ? 1 : 0;
-          save_drill = is_solder; /* save drills for one layer only */
+             GetLayerGroupNumberBySide (BOTTOM_SIDE)) ? 1 : 0;
+          save_drill = is_bottom; /* save drills for one layer only */
           gcode_start_png ();
           hid_save_and_show_layer_ons (save_ons);
           gcode_start_png_export ();
@@ -628,7 +628,7 @@ gcode_do_export (HID_Attr_Val * options)
             {
               for (c = 0; c < gdImageSY (gcode_im); c++)
                 {
-                  if (is_solder)
+                  if (is_bottom)
                     v =  /* flip vertically and horizontally */
                       gdImageGetPixel (gcode_im, gdImageSX (gcode_im) - 1 - r,
                                        gdImageSY (gcode_im) - 1 - c);
@@ -641,7 +641,7 @@ gcode_do_export (HID_Attr_Val * options)
                   BM_PUT (bm, r, c, p);
                 }
             }
-          if (is_solder)
+          if (is_bottom)
             { /* flip back layer, used only for PNG output */
               gdImagePtr temp_im =
                 gdImageCreate (gdImageSX (gcode_im), gdImageSY (gcode_im));
@@ -1048,7 +1048,7 @@ gcode_do_export (HID_Attr_Val * options)
             LINE_LOOP (layer);
               {
                 ... calculate the offset for all lines and polygons of this layer,
-                mirror it if is_solder, then mill it ...
+                mirror it if is_bottom, then mill it ...
               }
             END_LOOP;
           }
diff --git a/src/hid/gerber/gerber.c b/src/hid/gerber/gerber.c
index 657f9f1..60d159d 100644
--- a/src/hid/gerber/gerber.c
+++ b/src/hid/gerber/gerber.c
@@ -472,11 +472,11 @@ assign_eagle_file_suffix (char *dest, int idx)
     default:
       group = GetLayerGroupNumberByNumber(idx);
       nlayers = PCB->LayerGroups.Number[group];
-      if (group == GetLayerGroupNumberByNumber(component_silk_layer))
+      if (group == GetLayerGroupNumberBySide(TOP_SIDE)) /* Component */
 	{
 	  suff = "cmp";
 	}
-      else if (group == GetLayerGroupNumberByNumber(solder_silk_layer))
+      else if (group == GetLayerGroupNumberBySide(BOTTOM_SIDE)) /* Solder */
 	{
 	  suff = "sol";
 	}
@@ -527,11 +527,11 @@ assign_hackvana_file_suffix (char *dest, int idx)
     default:
       group = GetLayerGroupNumberByNumber(idx);
       nlayers = PCB->LayerGroups.Number[group];
-      if (group == GetLayerGroupNumberByNumber(component_silk_layer))
+      if (group == GetLayerGroupNumberBySide(TOP_SIDE))
       {
         suff = "gtl";
       }
-      else if (group == GetLayerGroupNumberByNumber(solder_silk_layer))
+      else if (group == GetLayerGroupNumberBySide(BOTTOM_SIDE))
       {
         suff = "gbl";
       }
@@ -663,8 +663,8 @@ gerber_do_export (HID_Attr_Val * options)
       if (layer->LineN || layer->TextN || layer->ArcN || layer->PolygonN)
 	print_group[GetLayerGroupNumberByNumber (i)] = 1;
     }
-  print_group[GetLayerGroupNumberByNumber (solder_silk_layer)] = 1;
-  print_group[GetLayerGroupNumberByNumber (component_silk_layer)] = 1;
+  print_group[GetLayerGroupNumberBySide (BOTTOM_SIDE)] = 1;
+  print_group[GetLayerGroupNumberBySide (TOP_SIDE)] = 1;
   for (i = 0; i < max_copper_layer; i++)
     if (print_group[GetLayerGroupNumberByNumber (i)])
       print_layer[i] = 1;
diff --git a/src/hid/gtk/gtkhid-main.c b/src/hid/gtk/gtkhid-main.c
index b24b9f7..63c2265 100644
--- a/src/hid/gtk/gtkhid-main.c
+++ b/src/hid/gtk/gtkhid-main.c
@@ -1389,10 +1389,10 @@ static int
 SwapSides (int argc, char **argv, Coord x, Coord y)
 {
   int active_group = GetLayerGroupNumberByNumber (LayerStack[0]);
-  int comp_group = GetLayerGroupNumberByNumber (component_silk_layer);
-  int solder_group = GetLayerGroupNumberByNumber (solder_silk_layer);
-  bool comp_on = LAYER_PTR (PCB->LayerGroups.Entries[comp_group][0])->On;
-  bool solder_on = LAYER_PTR (PCB->LayerGroups.Entries[solder_group][0])->On;
+  int top_group = GetLayerGroupNumberBySide (TOP_SIDE);
+  int bottom_group = GetLayerGroupNumberBySide (BOTTOM_SIDE);
+  bool top_on = LAYER_PTR (PCB->LayerGroups.Entries[top_group][0])->On;
+  bool bottom_on = LAYER_PTR (PCB->LayerGroups.Entries[bottom_group][0])->On;
 
   if (argc > 0)
     {
@@ -1417,14 +1417,14 @@ SwapSides (int argc, char **argv, Coord x, Coord y)
 
   Settings.ShowSolderSide = !Settings.ShowSolderSide;
 
-  if ((active_group == comp_group   && comp_on   && !solder_on) ||
-      (active_group == solder_group && solder_on && !comp_on))
+  if ((active_group == top_group   && top_on   && !bottom_on) ||
+      (active_group == bottom_group && bottom_on && !top_on))
     {
       bool new_solder_vis = Settings.ShowSolderSide;
 
-      ChangeGroupVisibility (PCB->LayerGroups.Entries[comp_group][0],
+      ChangeGroupVisibility (PCB->LayerGroups.Entries[top_group][0],
                              !new_solder_vis, !new_solder_vis);
-      ChangeGroupVisibility (PCB->LayerGroups.Entries[solder_group][0],
+      ChangeGroupVisibility (PCB->LayerGroups.Entries[bottom_group][0],
                              new_solder_vis, new_solder_vis);
     }
 
diff --git a/src/hid/lesstif/main.c b/src/hid/lesstif/main.c
index 4cd8d4a..760c6ef 100644
--- a/src/hid/lesstif/main.c
+++ b/src/hid/lesstif/main.c
@@ -614,13 +614,13 @@ static int
 SwapSides (int argc, char **argv, Coord x, Coord y)
 {
   int old_shown_side = Settings.ShowSolderSide;
-  int comp_group = GetLayerGroupNumberByNumber (component_silk_layer);
-  int solder_group = GetLayerGroupNumberByNumber (solder_silk_layer);
+  int top_group = GetLayerGroupNumberBySide (TOP_SIDE);
+  int bottom_group = GetLayerGroupNumberBySide (BOTTOM_GROUP);
   int active_group = GetLayerGroupNumberByNumber (LayerStack[0]);
-  int comp_layer;
-  int solder_layer;
-  int comp_showing = group_showing (comp_group, &comp_layer);
-  int solder_showing = group_showing (solder_group, &solder_layer);
+  int top_layer;
+  int bottom_layer;
+  int top_showing = group_showing (top_group, &top_layer);
+  int bottom_showing = group_showing (bottom_group, &bottom_layer);
 
   if (argc > 0)
     {
@@ -670,20 +670,20 @@ SwapSides (int argc, char **argv, Coord x, Coord y)
     {
       if (Settings.ShowSolderSide)
 	{
-	  if (active_group == comp_group)
+	  if (active_group == top_group)
 	    {
-	      if (comp_showing && !solder_showing)
-		ChangeGroupVisibility (comp_layer, 0, 0);
-	      ChangeGroupVisibility (solder_layer, 1, 1);
+	      if (top_showing && !bottom_showing)
+		ChangeGroupVisibility (top_layer, 0, 0);
+	      ChangeGroupVisibility (bottom_layer, 1, 1);
 	    }
 	}
       else
 	{
-	  if (active_group == solder_group)
+	  if (active_group == bottom_group)
 	    {
-	      if (solder_showing && !comp_showing)
-		ChangeGroupVisibility (solder_layer, 0, 0);
-	      ChangeGroupVisibility (comp_layer, 1, 1);
+	      if (bottom_showing && !top_showing)
+		ChangeGroupVisibility (bottom_layer, 0, 0);
+	      ChangeGroupVisibility (top_layer, 1, 1);
 	    }
 	}
     }
diff --git a/src/hid/png/png.c b/src/hid/png/png.c
index 442b901..38ea0f0 100644
--- a/src/hid/png/png.c
+++ b/src/hid/png/png.c
@@ -502,7 +502,7 @@ png_get_export_options (int *n)
   return png_attribute_list;
 }
 
-static int comp_layer, solder_layer;
+static int top_group, bottom_group;
 
 static int
 group_for_layer (int l)
@@ -524,8 +524,8 @@ layer_sort (const void *va, const void *vb)
 
   if (a >= 0 && a <= max_copper_layer + 1)
     {
-      int aside = (al == solder_layer ? 0 : al == comp_layer ? 2 : 1);
-      int bside = (bl == solder_layer ? 0 : bl == comp_layer ? 2 : 1);
+      int aside = (al == bottom_group ? 0 : al == top_group ? 2 : 1);
+      int bside = (bl == bottom_group ? 0 : bl == top_group ? 2 : 1);
       if (bside != aside)
 	return bside - aside;
     }
@@ -581,8 +581,8 @@ png_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
       if (layer->LineN || layer->TextN || layer->ArcN || layer->PolygonN)
 	print_group[GetLayerGroupNumberByNumber (i)] = 1;
     }
-  print_group[GetLayerGroupNumberByNumber (solder_silk_layer)] = 1;
-  print_group[GetLayerGroupNumberByNumber (component_silk_layer)] = 1;
+  print_group[GetLayerGroupNumberBySide (BOTTOM_SIDE)] = 1;
+  print_group[GetLayerGroupNumberBySide (TOP_SIDE)] = 1;
   for (i = 0; i < max_copper_layer; i++)
     if (print_group[GetLayerGroupNumberByNumber (i)])
       print_layer[i] = 1;
@@ -599,8 +599,8 @@ png_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
       CLEAR_FLAG (SHOWMASKFLAG, PCB);
       Settings.ShowSolderSide = 0;
 
-      comp_layer = GetLayerGroupNumberByNumber (component_silk_layer);
-      solder_layer = GetLayerGroupNumberByNumber (solder_silk_layer);
+      top_group = GetLayerGroupNumberBySide (TOP_SIDE);
+      bottom_group = GetLayerGroupNumberBySide (BOTTOM_SIDE);
       qsort (LayerStack, max_copper_layer, sizeof (LayerStack[0]), layer_sort);
 
       CLEAR_FLAG(THINDRAWFLAG, PCB);
@@ -611,19 +611,19 @@ png_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
 	  int i, n=0;
 	  SET_FLAG (SHOWMASKFLAG, PCB);
 	  photo_has_inners = 0;
-	  if (comp_layer < solder_layer)
-	    for (i = comp_layer; i <= solder_layer; i++)
+	  if (top_group < bottom_group)
+	    for (i = top_group; i <= bottom_group; i++)
 	      {
 		photo_groups[n++] = i;
-		if (i != comp_layer && i != solder_layer
+		if (i != top_group && i != bottom_group
 		    && ! IsLayerGroupEmpty (i))
 		  photo_has_inners = 1;
 	      }
 	  else
-	    for (i = comp_layer; i >= solder_layer; i--)
+	    for (i = top_group; i >= bottom_group; i--)
 	      {
 		photo_groups[n++] = i;
-		if (i != comp_layer && i != solder_layer
+		if (i != top_group && i != bottom_group
 		    && ! IsLayerGroupEmpty (i))
 		  photo_has_inners = 1;
 	      }
diff --git a/src/hid/ps/eps.c b/src/hid/ps/eps.c
index 1445491..55328c5 100644
--- a/src/hid/ps/eps.c
+++ b/src/hid/ps/eps.c
@@ -149,7 +149,7 @@ eps_get_export_options (int *n)
   return eps_attribute_list;
 }
 
-static int comp_layer, solder_layer;
+static int top_group, bottom_group;
 
 static int
 group_for_layer (int l)
@@ -171,8 +171,8 @@ layer_sort (const void *va, const void *vb)
 
   if (a >= 0 && a <= max_copper_layer + 1)
     {
-      int aside = (al == solder_layer ? 0 : al == comp_layer ? 2 : 1);
-      int bside = (bl == solder_layer ? 0 : bl == comp_layer ? 2 : 1);
+      int aside = (al == bottom_group ? 0 : al == top_group ? 2 : 1);
+      int bside = (bl == bottom_group ? 0 : bl == top_group ? 2 : 1);
       if (bside != aside)
 	return bside - aside;
     }
@@ -234,7 +234,7 @@ eps_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
      layer to get the pins.  */
   if (fast_erase == 0)
     {
-      print_group[GetLayerGroupNumberByNumber (component_silk_layer)] = 1;
+      print_group[GetLayerGroupNumberBySide (TOP_SIDE)] = 1;
       fast_erase = 1;
     }
 
@@ -259,8 +259,8 @@ eps_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
   as_shown = options[HA_as_shown].int_value;
   if (!options[HA_as_shown].int_value)
     {
-      comp_layer = GetLayerGroupNumberByNumber (component_silk_layer);
-      solder_layer = GetLayerGroupNumberByNumber (solder_silk_layer);
+      top_group = GetLayerGroupNumberBySide (TOP_SIDE);
+      bottom_group = GetLayerGroupNumberBySide (BOTTOM_SIDE);
       qsort (LayerStack, max_copper_layer, sizeof (LayerStack[0]), layer_sort);
     }
   fprintf (f, "%%!PS-Adobe-3.0 EPSF-3.0\n");
diff --git a/src/hid/ps/ps.c b/src/hid/ps/ps.c
index c7a1901..28dbcd5 100644
--- a/src/hid/ps/ps.c
+++ b/src/hid/ps/ps.c
@@ -664,8 +664,8 @@ ps_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
 	  global.outline_layer = layer;
 	}
     }
-  global.print_group[GetLayerGroupNumberByNumber (solder_silk_layer)] = 1;
-  global.print_group[GetLayerGroupNumberByNumber (component_silk_layer)] = 1;
+  global.print_group[GetLayerGroupNumberBySide (BOTTOM_SIDE)] = 1;
+  global.print_group[GetLayerGroupNumberBySide (TOP_SIDE)] = 1;
   for (i = 0; i < max_copper_layer; i++)
     if (global.print_group[GetLayerGroupNumberByNumber (i)])
       global.print_layer[i] = 1;
@@ -883,7 +883,7 @@ ps_set_layer (const char *name, int group, int empty)
 	mirror_this = !mirror_this;
       if (global.automirror
 	  &&
-	  ((idx >= 0 && group == GetLayerGroupNumberByNumber (solder_silk_layer))
+	  ((idx >= 0 && group == GetLayerGroupNumberBySide (BOTTOM_SIDE))
 	   || (idx < 0 && SL_SIDE (idx) == SL_BOTTOM_SIDE)))
 	mirror_this = !mirror_this;
 
diff --git a/src/move.c b/src/move.c
index cf2ab88..16eb73f 100644
--- a/src/move.c
+++ b/src/move.c
@@ -639,7 +639,7 @@ MoveTextToLayerLowLevel (LayerType *Source, TextType *text,
   Destination->Text = g_list_append (Destination->Text, text);
   Destination->TextN ++;
 
-  if (GetLayerGroupNumberByNumber (solder_silk_layer) ==
+  if (GetLayerGroupNumberBySide (BOTTOM_SIDE) ==
       GetLayerGroupNumberByPointer (Destination))
     SET_FLAG (ONSOLDERFLAG, text);
   else
@@ -908,22 +908,11 @@ move_all_thermals (int old_index, int new_index)
 }
 
 static int
-LastLayerInComponentGroup (int layer)
+LastNormalLayerInSideGroup (int side, int layer)
 {
-  int cgroup = GetLayerGroupNumberByNumber(component_silk_layer);
+  int side_group = GetLayerGroupNumberBySide(side);
   int lgroup = GetLayerGroupNumberByNumber(layer);
-  if (cgroup == lgroup
-      && PCB->LayerGroups.Number[lgroup] == 2)
-    return 1;
-  return 0;
-}
-
-static int
-LastLayerInSolderGroup (int layer)
-{
-  int sgroup = GetLayerGroupNumberByNumber(solder_silk_layer);
-  int lgroup = GetLayerGroupNumberByNumber(layer);
-  if (sgroup == lgroup
+  if (side_group == lgroup
       && PCB->LayerGroups.Number[lgroup] == 2)
     return 1;
   return 0;
@@ -955,14 +944,14 @@ MoveLayer (int old_index, int new_index)
     return 0;
 
   if (new_index == -1
-      && LastLayerInComponentGroup (old_index))
+      && LastNormalLayerInSideGroup (TOP_SIDE, old_index))
     {
       gui->confirm_dialog ("You can't delete the last top-side layer\n", "Ok", NULL);
       return 1;
     }
 
   if (new_index == -1
-      && LastLayerInSolderGroup (old_index))
+      && LastNormalLayerInSideGroup (BOTTOM_SIDE, old_index))
     {
       gui->confirm_dialog ("You can't delete the last bottom-side layer\n", "Ok", NULL);
       return 1;
diff --git a/src/puller.c b/src/puller.c
index 64cb52a..61db343 100644
--- a/src/puller.c
+++ b/src/puller.c
@@ -626,7 +626,7 @@ static Extra multi_next;
 static GHashTable *lines;
 static GHashTable *arcs;
 static int did_something;
-static int current_is_component, current_is_solder;
+static int current_is_top, current_is_bottom;
 
 /* If set, these are the pins/pads/vias that this path ends on.  */
 /* static void *start_pin_pad, *end_pin_pad; */
@@ -942,12 +942,12 @@ find_pair_padline_callback (const BoxType * b, void *cl)
 
   if (TEST_FLAG (ONSOLDERFLAG, pad))
     {
-      if (!current_is_solder)
+      if (!current_is_bottom)
 	return 0;
     }
   else
     {
-      if (!current_is_component)
+      if (!current_is_top)
 	return 0;
     }
 
@@ -1010,12 +1010,12 @@ find_pair_padarc_callback (const BoxType * b, void *cl)
 
   if (TEST_FLAG (ONSOLDERFLAG, pad))
     {
-      if (!current_is_solder)
+      if (!current_is_bottom)
 	return 0;
     }
   else
     {
-      if (!current_is_component)
+      if (!current_is_top)
 	return 0;
     }
 
@@ -1782,12 +1782,12 @@ gp_pad_cb (const BoxType *b, void *cb)
 
   if (TEST_FLAG (ONSOLDERFLAG, p))
     {
-      if (!current_is_solder)
+      if (!current_is_bottom)
 	return 0;
     }
   else
     {
-      if (!current_is_component)
+      if (!current_is_top)
 	return 0;
     }
 
@@ -2576,10 +2576,10 @@ GlobalPuller(int argc, char **argv, Coord x, Coord y)
   /* This canonicalizes all the lines, and cleans up near-misses.  */
   /* hid_actionl ("djopt", "puller", 0); */
 
-  current_is_solder = (GetLayerGroupNumberByPointer(CURRENT)
-		       == GetLayerGroupNumberByNumber (solder_silk_layer));
-  current_is_component = (GetLayerGroupNumberByPointer(CURRENT)
-			  == GetLayerGroupNumberByNumber (component_silk_layer));
+  current_is_bottom = (GetLayerGroupNumberByPointer(CURRENT)
+                       == GetLayerGroupNumberBySide (BOTTOM_SIDE));
+  current_is_top = (GetLayerGroupNumberByPointer(CURRENT)
+                    == GetLayerGroupNumberBySide (TOP_SIDE));
 
   lines = g_hash_table_new_full (NULL, NULL, NULL, (GDestroyNotify)FreeExtra);
   arcs  = g_hash_table_new_full (NULL, NULL, NULL, (GDestroyNotify)FreeExtra);
diff --git a/src/rats.c b/src/rats.c
index fb1d41f..5c48055 100644
--- a/src/rats.c
+++ b/src/rats.c
@@ -76,7 +76,7 @@ static void TransferNet (NetListType *, NetType *, NetType *);
  * some local identifiers
  */
 static bool badnet = false;
-static Cardinal SLayer, CLayer;	/* layer group holding solder/component side */
+static Cardinal top_group, bottom_group;	/* layer group holding top/bottom side */
 
 /* ---------------------------------------------------------------------------
  * parse a connection description from a string
@@ -133,7 +133,7 @@ FindPad (char *ElementName, char *PinNum, ConnectionType * conn, bool Same)
           conn->type = PAD_TYPE;
           conn->ptr1 = element;
           conn->ptr2 = pad;
-          conn->group = TEST_FLAG (ONSOLDERFLAG, pad) ? SLayer : CLayer;
+          conn->group = TEST_FLAG (ONSOLDERFLAG, pad) ? bottom_group : top_group;
 
           if (TEST_FLAG (EDGE2FLAG, pad))
             {
@@ -160,7 +160,7 @@ FindPad (char *ElementName, char *PinNum, ConnectionType * conn, bool Same)
           conn->type = PIN_TYPE;
           conn->ptr1 = element;
           conn->ptr2 = pin;
-          conn->group = SLayer;        /* any layer will do */
+          conn->group = bottom_group;        /* any layer will do */
           conn->X = pin->X;
           conn->Y = pin->Y;
           return true;
@@ -227,8 +227,8 @@ ProcNetlist (LibraryType *net_menu)
   badnet = false;
 
   /* find layer groups of the component side and solder side */
-  SLayer = GetLayerGroupNumberByNumber (solder_silk_layer);
-  CLayer = GetLayerGroupNumberByNumber (component_silk_layer);
+  bottom_group = GetLayerGroupNumberBySide (BOTTOM_SIDE);
+  top_group = GetLayerGroupNumberBySide (TOP_SIDE);
 
   Wantlist = (NetListType *)calloc (1, sizeof (NetListType));
   if (Wantlist)
@@ -530,7 +530,7 @@ GatherSubnets (NetListType *Netl, bool NoWarn, bool AndRats)
 	    conn->type = VIA_TYPE;
 	    conn->ptr1 = via;
 	    conn->ptr2 = via;
-	    conn->group = SLayer;
+	    conn->group = bottom_group;
 	  }
       }
       END_LOOP;
@@ -923,9 +923,8 @@ AddNet (void)
     }
 
   /* will work for pins to since the FLAG is common */
-  group1 = (TEST_FLAG (ONSOLDERFLAG, (PadType *) ptr2) ?
-	    GetLayerGroupNumberByNumber (solder_silk_layer) :
-	    GetLayerGroupNumberByNumber (component_silk_layer));
+  group1 = GetLayerGroupNumberBySide (
+            TEST_FLAG (ONSOLDERFLAG, (PadType *) ptr2) ? BOTTOM_SIDE : TOP_SIDE);
   strcpy (name1, ConnectionName (found, ptr1, ptr2));
   found = SearchObjectByLocation (PAD_TYPE | PIN_TYPE, &ptr1, &ptr2, &ptr3,
 				  Crosshair.AttachedLine.Point2.X,
@@ -941,9 +940,8 @@ AddNet (void)
       Message (_("You must name the ending element first\n"));
       return (NULL);
     }
-  group2 = (TEST_FLAG (ONSOLDERFLAG, (PadType *) ptr2) ?
-	    GetLayerGroupNumberByNumber (solder_silk_layer) :
-	    GetLayerGroupNumberByNumber (component_silk_layer));
+  group2 = GetLayerGroupNumberBySide (
+            TEST_FLAG (ONSOLDERFLAG, (PadType *) ptr2) ? BOTTOM_SIDE : TOP_SIDE);
   name2 = ConnectionName (found, ptr1, ptr2);
 
   menu = netnode_to_netname (name1);
diff --git a/src/rubberband.c b/src/rubberband.c
index cd2c4f6..053d5bf 100644
--- a/src/rubberband.c
+++ b/src/rubberband.c
@@ -222,7 +222,7 @@ static void
 CheckPadForRubberbandConnection (PadType *Pad)
 {
   Coord half = Pad->Thickness / 2;
-  Cardinal i, group;
+  Cardinal group;
   struct rubber_info info;
 
   info.box.X1 = MIN (Pad->Point1.X, Pad->Point2.X) - half;
@@ -231,8 +231,8 @@ CheckPadForRubberbandConnection (PadType *Pad)
   info.box.Y2 = MAX (Pad->Point1.Y, Pad->Point2.Y) + half;
   info.radius = 0;
   info.line = NULL;
-  i = TEST_FLAG (ONSOLDERFLAG, Pad) ? solder_silk_layer : component_silk_layer;
-  group = GetLayerGroupNumberByNumber (i);
+  group = GetLayerGroupNumberBySide (
+      TEST_FLAG (ONSOLDERFLAG, Pad) ? BOTTOM_SIDE : TOP_SIDE);
 
   /* check all visible layers in the same group */
   GROUP_LOOP (PCB->Data, group);
@@ -317,10 +317,9 @@ static void
 CheckPadForRat (PadType *Pad)
 {
   struct rinfo info;
-  Cardinal i;
 
-  i = TEST_FLAG (ONSOLDERFLAG, Pad) ? solder_silk_layer : component_silk_layer;
-  info.group = GetLayerGroupNumberByNumber (i);
+  info.group = GetLayerGroupNumberBySide (
+                  TEST_FLAG (ONSOLDERFLAG, Pad) ? BOTTOM_SIDE : TOP_SIDE);
   info.pad = Pad;
   info.type = PAD_TYPE;
 
diff --git a/src/toporouter.c b/src/toporouter.c
index 33c8e84..8227e4b 100644
--- a/src/toporouter.c
+++ b/src/toporouter.c
@@ -1702,8 +1702,8 @@ read_pads(toporouter_t *r, toporouter_layer_t *l, guint layer)
   GList *vlist = NULL;
   toporouter_bbox_t *bbox = NULL;
 
-  guint front = GetLayerGroupNumberByNumber (component_silk_layer);
-  guint back = GetLayerGroupNumberByNumber (solder_silk_layer);
+  guint front = GetLayerGroupNumberBySide (TOP_SIDE);
+  guint back = GetLayerGroupNumberBySide (BOTTOM_SIDE);
 
 //  printf("read_pads: front = %d back = %d layer = %d\n", 
 //     front, back, layer);
