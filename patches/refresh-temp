Bottom: 6fde05f36fa612f8a43f1f4617fb8edc085e79b5
Top:    ccd437c470a77723448066db8597f6bb18eaabb3
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2014-06-07 14:26:42 +0100

Refresh of attempt-to-refactor-the-step

---

diff --git a/src/hid/gtk/object3d.c b/src/hid/gtk/object3d.c
index f990d05..66eace1 100644
--- a/src/hid/gtk/object3d.c
+++ b/src/hid/gtk/object3d.c
@@ -483,22 +483,16 @@ object3d_export_to_step (object3d *object, char *filename)
         }
       else
         {
-          float  x,  y,  z;
-          float dx, dy, dz;
-
-          x = ((vertex3d *)ODATA (edge))->x;
-          y = ((vertex3d *)ODATA (edge))->y;
-          z = ((vertex3d *)ODATA (edge))->z;
-
-          dx = ((vertex3d *)DDATA (edge))->x - x;
-          dy = ((vertex3d *)DDATA (edge))->y - y;
-          dz = ((vertex3d *)DDATA (edge))->z - z;
+          vertex3d *ov = ODATA (edge);
+          vertex3d *dv = DDATA (edge);
 
           info->infinite_line_identifier =
             step_line (step, "NONE",
-                       step_cartesian_point (step, "NONE", x, y, z),            // <--- A point on the line
+                       step_cartesian_point (step, "NONE", ov->x, ov->y, ov->z),  // <--- A point on the line (the origin vertex)
                        step_vector (step, "NONE",
-                                    step_direction (step, "NONE", dx, dy, dz),  // <--- Direction along the line
+                                    step_direction (step, "NONE", dv->x - ov->x,
+                                                                  dv->y - ov->y,
+                                                                  dv->z - ov->z),  // <--- Direction along the line
                                     1000.0));     // <--- Arbitrary length in this direction for the parameterised coordinate "1".
         }
     }
@@ -508,10 +502,9 @@ object3d_export_to_step (object3d *object, char *filename)
     {
       vertex3d *vertex = vertex_iter->data;
 
-      fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; ", step->next_id, vertex->x, vertex->y, vertex->z); /* Vertex coordinate  */ 
-      fprintf (f, "#%i = VERTEX_POINT ( 'NONE', #%i ) ;\n",             step->next_id + 1, step->next_id);
-      vertex->vertex_identifier = step->next_id + 1;
-      step->next_id = step->next_id + 2;
+      vertex->vertex_identifier = step_vertex_point (step, "NONE",
+                                                     step_cartesian_point (step, "NONE",
+                                                                           vertex->x, vertex->y, vertex->z));
     }
 
   /* Define the Edges */
@@ -519,15 +512,13 @@ object3d_export_to_step (object3d *object, char *filename)
     {
       edge_ref edge = (edge_ref)edge_iter->data;
       edge_info *info = UNDIR_DATA (edge);
+      step_id sv = ((vertex3d *)ODATA (edge))->vertex_identifier;
+      step_id ev = ((vertex3d *)DDATA (edge))->vertex_identifier;
 
-      int sv = ((vertex3d *)ODATA (edge))->vertex_identifier;
-      int ev = ((vertex3d *)DDATA (edge))->vertex_identifier;
-
-      fprintf (f, "#%i = EDGE_CURVE ( 'NONE', #%i, #%i, #%i, .T. ) ; ", step->next_id, sv, ev, info->infinite_line_identifier);
-      fprintf (f, "#%i = ORIENTED_EDGE ( 'NONE', *, *, #%i, .T. ) ; ",  step->next_id + 1, step->next_id);
-      fprintf (f, "#%i = ORIENTED_EDGE ( 'NONE', *, *, #%i, .F. ) ;\n", step->next_id + 2, step->next_id);
-      info->edge_identifier = step->next_id; /* Add 1 for same oriented, add 2 for back oriented */
-      step->next_id = step->next_id + 3;
+      /* XXX: The lookup of these edges by adding to info->edge_identifier requires the step_* functions to assign sequential identifiers */
+      info->edge_identifier = step_edge_curve (step, "NONE", sv, ev, info->infinite_line_identifier, true);
+      step_oriented_edge (step, "NONE", info->edge_identifier, true);  /* Add 1 to info->edge_identifier to find this (same) oriented edge */
+      step_oriented_edge (step, "NONE", info->edge_identifier, false); /* Add 2 to info->edge_identifier to find this (back) oriented edge */
     }
 
   /* Define the faces */
diff --git a/src/hid/gtk/step.c b/src/hid/gtk/step.c
index b599c47..3e4dfaa 100644
--- a/src/hid/gtk/step.c
+++ b/src/hid/gtk/step.c
@@ -1,8 +1,14 @@
 #include <glib.h>
+#include <stdbool.h>
 #include <stdio.h>
 
 #include "step.h"
 
+static char *
+step_bool (bool expr)
+{
+  return expr ? ".T." : ".F.";
+}
 
 step_file
 *step_output_file (FILE *f)
@@ -85,3 +91,27 @@ step_line (step_file *file, char *name, step_id pnt, step_id dir)
                     file->next_id, name, pnt, dir);
   return file->next_id++;
 }
+
+step_id
+step_vertex_point (step_file *file, char *name, step_id pnt)
+{
+  fprintf (file->f, "#%i = VERTEX_POINT ( '%s', #%i ) ;\n",
+                    file->next_id, name, pnt);
+  return file->next_id++;
+}
+
+step_id
+step_edge_curve (step_file *file, char *name, step_id edge_start, step_id edge_end, step_id edge_geometry, bool same_sense)
+{
+  fprintf (file->f, "#%i = EDGE_CURVE ( '%s', #%i, #%i, #%i, %s ) ;\n",
+                    file->next_id, name, edge_start, edge_end, edge_geometry, step_bool (same_sense));
+  return file->next_id++;
+}
+
+step_id
+step_oriented_edge (step_file *file, char *name, step_id edge_element, bool orientation)
+{
+  fprintf (file->f, "#%i = ORIENTED_EDGE ( '%s', *, *, #%i, %s ) ;\n",
+                    file->next_id, name, edge_element, step_bool (orientation));
+  return file->next_id++;
+}
diff --git a/src/hid/gtk/step.h b/src/hid/gtk/step.h
index 68f1b81..ce4c096 100644
--- a/src/hid/gtk/step.h
+++ b/src/hid/gtk/step.h
@@ -17,3 +17,6 @@ step_id step_cylindrical_surface (step_file *file, char *name, step_id position,
 step_id step_circle (step_file *file, char *name, step_id position, double radius);
 step_id step_vector (step_file *file, char *name, step_id orientation, double magnitude);
 step_id step_line (step_file *file, char *name, step_id pnt, step_id dir);
+step_id step_vertex_point (step_file *file, char *name, step_id pnt);
+step_id step_edge_curve (step_file *file, char *name, step_id edge_start, step_id edge_end, step_id edge_geometry, bool same_sense);
+step_id step_oriented_edge (step_file *file, char *name, step_id edge_element, bool orientation);
diff --git a/src/hid/gtk/vertex3d.c b/src/hid/gtk/vertex3d.c
index e8b8147..8abe19f 100644
--- a/src/hid/gtk/vertex3d.c
+++ b/src/hid/gtk/vertex3d.c
@@ -1,4 +1,5 @@
 #include <stdlib.h>
+#include <stdbool.h>
 #include <stdio.h>
 
 #include "step.h"
