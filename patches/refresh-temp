Bottom: f01cea67683988082f14ec991fc47ca1b5f76950
Top:    c70eb1ccdcb2bdf5fe663f5b122cb84910e523c8
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-05-05 01:03:57 +0100

Refresh of hid-lesstif-use-progress-calls

---

diff --git a/src/hid/lesstif/dialogs.c b/src/hid/lesstif/dialogs.c
index ffe99eb..1de1f09 100644
--- a/src/hid/lesstif/dialogs.c
+++ b/src/hid/lesstif/dialogs.c
@@ -409,6 +409,59 @@ lesstif_log (const char *fmt, ...)
 
 /* ------------------------------------------------------------ */
 
+bool progress_cancelled = false;
+
+static void
+progress_callback (Widget w, void *v, void *cbs)
+{
+  progress_cancelled = true;
+}
+
+Widget progress_dialog = 0;
+static Widget progress_cancel, progress_progress, progress_label;
+
+void
+lesstif_progress_dialog (int sp_far, int total, const char *msg)
+{
+  char *cancelmsg = "Cancel";
+  XmString xs;
+
+  if (mainwind == 0)
+    return;
+
+  if (progress_dialog == 0)
+    {
+      n = 0;
+      stdarg (XmNdefaultButtonType, XmDIALOG_CANCEL_BUTTON);
+      stdarg (XmNtitle, "Progress");
+      progress_dialog = XmCreateQuestionDialog (mainwind, "progress", args, n);
+      XtAddCallback (progress_dialog, XmNcancelCallback, (XtCallbackProc) progress_callback, NULL);
+
+      progress_cancel = XmMessageBoxGetChild (progress_dialog, XmDIALOG_CANCEL_BUTTON);
+      progress_label =  XmMessageBoxGetChild (progress_dialog, XmDIALOG_MESSAGE_LABEL);
+
+      XtUnmanageChild (XmMessageBoxGetChild (progress_dialog, XmDIALOG_OK_BUTTON));
+      XtUnmanageChild (XmMessageBoxGetChild (progress_dialog, XmDIALOG_HELP_BUTTON));
+
+      n = 0;
+      xs = XmStringCreateLocalized (cancelmsg);
+      stdarg (XmNcancelLabelString, xs);
+      XtManageChild (progress_cancel);
+
+      stdarg (XmNdefaultPosition, False);
+      XtSetValues (progress_dialog, args, n);
+    }
+
+  n = 0;
+  xs = XmStringCreateLocalized ((char *)msg);
+  stdarg (XmNmessageString, xs);
+  XtSetValues (progress_dialog, args, n);
+
+  return;
+}
+
+/* ------------------------------------------------------------ */
+
 static Widget confirm_dialog = 0;
 static Widget confirm_cancel, confirm_ok, confirm_label;
 
diff --git a/src/hid/lesstif/main.c b/src/hid/lesstif/main.c
index b2c1098..67820b8 100644
--- a/src/hid/lesstif/main.c
+++ b/src/hid/lesstif/main.c
@@ -3840,10 +3840,54 @@ lesstif_beep (void)
   fflush (stdout);
 }
 
+extern int lesstif_progress_dialog (int sp_far, int total, const char *message);
+extern bool progress_cancelled;
+extern Widget progress_dialog;
+
+#define MIN_TIME_SEPARATION (500./1000.) /* 50ms */
 static int
 lesstif_progress (int so_far, int total, const char *message)
 {
-  return 0;
+  static bool visible = false;
+  static bool started = false;
+  XEvent e;
+  struct timeval time;
+  static struct timeval last_time;
+  double time_delta;
+  int retval = 0;
+
+  if (so_far == 0 && total == 0 && message == NULL)
+    {
+      XtUnmanageChild (progress_dialog);
+      visible = false;
+      progress_cancelled = false;
+      return retval;
+    }
+
+  gettimeofday (&time, NULL);
+
+  time_delta = (time.tv_sec - last_time.tv_sec) +
+               (double)(time.tv_usec - last_time.tv_usec) / 1000000.;
+
+  if (started && time_delta < MIN_TIME_SEPARATION)
+    return retval;
+
+  /* Create or update the progress dialog */
+  lesstif_progress_dialog (so_far, total, message);
+
+  if (!started)
+    XtManageChild (progress_dialog);
+
+  /* Dispatch one event - ideally we would keep dispatching until we
+   * were about to block, but I can't see how to do this with Xt
+   */
+  XtAppNextEvent (app_context, &e);
+  XtDispatchEvent (&e);
+
+  /* Note the time we did this */
+  gettimeofday (&last_time, NULL);
+
+  return progress_cancelled;
 }
 
 static HID *
