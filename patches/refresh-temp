Bottom: c1e9e7812796aaaeb597dd1c0b6c1f44bf759458
Top:    30c27a3a5de904946d2bfd883e91863a348646fd
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-04-23 13:36:36 +0100

Refresh of hid-png-fix-segfault-when-no-i

---

diff --git a/src/hid/png/png.c b/src/hid/png/png.c
index 274741d..d2dcec4 100644
--- a/src/hid/png/png.c
+++ b/src/hid/png/png.c
@@ -136,6 +136,7 @@ static int doing_outline, have_outline;
 #define FMT_png "PNG"
 
 static const char *filetypes[] = {
+  /*
 #ifdef HAVE_GDIMAGEPNG
   FMT_png,
 #endif
@@ -147,6 +148,7 @@ static const char *filetypes[] = {
 #ifdef HAVE_GDIMAGEJPEG
   FMT_jpg,
 #endif
+*/
 
   NULL
 };
@@ -230,17 +232,26 @@ static HID_Attr_Val png_values[NUM_OPTIONS];
 
 static const char *get_file_suffix(void)
 {
-	const char *fmt;
-	const char *result;
-	fmt = filetypes[png_attribute_list[HA_filetype].default_val.int_value];
-	     if (strcmp (fmt, FMT_gif) == 0)  result=".gif";
-	else if (strcmp (fmt, FMT_jpg) == 0)  result=".jpg";
-	else if (strcmp (fmt, FMT_png) == 0)  result=".png";
-	else {
-		fprintf (stderr, "Error:  Invalid graphic file format\n");
-		result=".???";
-	}
-	return result;
+  const char *result = NULL;
+  const char *fmt;
+
+  fmt = filetypes[png_attribute_list[HA_filetype].default_val.int_value];
+
+  if (fmt == NULL)
+    ; /* Do nothing */
+  else if (strcmp (fmt, FMT_gif) == 0)
+    result=".gif";
+  else if (strcmp (fmt, FMT_jpg) == 0)
+    result=".jpg";
+  else if (strcmp (fmt, FMT_png) == 0)
+    result=".png";
+
+  if (result == NULL)
+    {
+      fprintf (stderr, "Error:  Invalid graphic file format\n");
+      result=".???";
+    }
+  return result;
 }
 
 static HID_Attribute *
@@ -249,7 +260,11 @@ png_get_export_options (int *n)
   static char *last_made_filename = 0;
   const char *suffix = get_file_suffix();
 
-  if (PCB) derive_default_filename(PCB->Filename, &png_attribute_list[HA_pngfile], suffix, &last_made_filename);
+  if (PCB)
+    derive_default_filename (PCB->Filename,
+                             &png_attribute_list[HA_pngfile],
+                             suffix,
+                             &last_made_filename);
 
   if (n)
     *n = NUM_OPTIONS;
@@ -506,6 +521,7 @@ png_do_export (HID_Attr_Val * options)
   int w, h;
   int xmax, ymax, dpi;
   const char *fmt;
+  bool format_error = false;
 
   if (color_cache)
     {
@@ -843,37 +859,33 @@ png_do_export (HID_Attr_Val * options)
 
   /* actually write out the image */
   fmt = filetypes[options[HA_filetype].int_value];
-  
-  if (strcmp (fmt, FMT_gif) == 0)
+
+  if (fmt == NULL)
+    format_error = true;
+  else if (strcmp (fmt, FMT_gif) == 0)
 #ifdef HAVE_GDIMAGEGIF
     gdImageGif (im, f);
 #else
-    {
-      gdImageDestroy (im);
-      return;
-    }
+    format_error = true;
 #endif
   else if (strcmp (fmt, FMT_jpg) == 0)
 #ifdef HAVE_GDIMAGEJPEG
     gdImageJpeg (im, f, -1);
 #else
-    {
-      gdImageDestroy (im);
-      return;
-    }
+    format_error = true;
 #endif
   else if (strcmp (fmt, FMT_png) == 0)
 #ifdef HAVE_GDIMAGEPNG
     gdImagePng (im, f);
 #else
-    {
-      gdImageDestroy (im);
-      return;
-    }
+    format_error = true;
 #endif
   else
+    format_error = true;
+
+  if (format_error)
     fprintf (stderr, "Error:  Invalid graphic file format."
-	     "  This is a bug.  Please report it.\n");
+                     "  This is a bug.  Please report it.\n");
 
   fclose (f);
