Bottom: 9f1f9e10ea1c6eca123a5f9edc45dc3153488904
Top:    63838a9b1030885f67f5d7f590098baad599433b
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-04-30 06:27:34 +0100

Refresh of convert-board-objects-to-glist

---

diff --git a/src/puller.c b/src/puller.c
index 8e56f0b..21e5b61 100644
--- a/src/puller.c
+++ b/src/puller.c
@@ -712,6 +712,7 @@ typedef struct {
 static int
 find_pair_line_callback (const BoxType * b, void *cl)
 {
+#if 0
   LineTypePtr line = (LineTypePtr) b;
 #if TRACE1
   Extra *e = & LINE2EXTRA (line);
@@ -746,12 +747,14 @@ find_pair_line_callback (const BoxType * b, void *cl)
 #endif
 	}
     }
+#endif
   return 0;
 }
 
 static int
 find_pair_arc_callback (const BoxType * b, void *cl)
 {
+#if 0
   ArcTypePtr arc = (ArcTypePtr) b;
   Extra *e = & ARC2EXTRA (arc);
   FindPairCallbackStruct *fpcs = (FindPairCallbackStruct *) cl;
@@ -774,6 +777,7 @@ find_pair_arc_callback (const BoxType * b, void *cl)
       else
 	*fpcs->extra_ptr = e;
     }
+#endif
   return 0;
 }
 
@@ -826,6 +830,7 @@ check_point_in_pin (PinTypePtr pin, int x, int y, End *e)
 static int
 find_pair_pinline_callback (const BoxType * b, void *cl)
 {
+#if 0
   LineTypePtr line = (LineTypePtr) b;
   PinTypePtr pin = (PinTypePtr) cl;
   Extra *e = & LINE2EXTRA (line);
@@ -858,12 +863,14 @@ find_pair_pinline_callback (const BoxType * b, void *cl)
       unlink_end (e, &e->start.next);
       unlink_end (e, &e->end.next);
     }
+#endif
   return 0;
 }
 
 static int
 find_pair_pinarc_callback (const BoxType * b, void *cl)
 {
+#if 0
   ArcTypePtr arc = (ArcTypePtr) b;
   PinTypePtr pin = (PinTypePtr) cl;
   Extra *e = & ARC2EXTRA (arc);
@@ -871,6 +878,7 @@ find_pair_pinarc_callback (const BoxType * b, void *cl)
 
   hits = check_point_in_pin (pin, e->start.x, e->start.y, &(e->start));
   hits += check_point_in_pin (pin, e->end.x, e->end.y, &(e->end));
+#endif
   return 0;
 }
 
@@ -932,6 +940,7 @@ check_point_in_pad (PadTypePtr pad, int x, int y, End *e)
 static int
 find_pair_padline_callback (const BoxType * b, void *cl)
 {
+#if 0
   LineTypePtr line = (LineTypePtr) b;
   PadTypePtr pad = (PadTypePtr) cl;
   Extra *e = & LINE2EXTRA (line);
@@ -997,12 +1006,14 @@ find_pair_padline_callback (const BoxType * b, void *cl)
       unlink_end (e, &e->end.next);
     }
 
+#endif
   return 0;
 }
 
 static int
 find_pair_padarc_callback (const BoxType * b, void *cl)
 {
+#if 0
   ArcTypePtr arc = (ArcTypePtr) b;
   PadTypePtr pad = (PadTypePtr) cl;
   Extra *e = & ARC2EXTRA (arc);
@@ -1021,12 +1032,14 @@ find_pair_padarc_callback (const BoxType * b, void *cl)
 
   hits = check_point_in_pad (pad, e->start.x, e->start.y, &(e->start));
   hits += check_point_in_pad (pad, e->end.x, e->end.y, &(e->end));
+#endif
   return 0;
 }
  
 static void
 find_pairs ()
 {
+#if 0
   int i;
   ARC_LOOP (CURRENT); {
     Extra *e = & ARC2EXTRA (arc);
@@ -1096,6 +1109,7 @@ find_pairs ()
       if (arcs[i].end.next == &multi_next)
 	arcs[i].end.next = 0;
     }
+#endif
 }
 
 #define PROP_NEXT(e,n,f) 		\
@@ -1139,6 +1153,7 @@ propogate_end_pin (Extra *e, End *near, End *far)
 static void
 propogate_ends ()
 {
+#if 0
   int i;
 
   /* First, shut of "in pin" when we have an "at pin".  We also clean
@@ -1183,6 +1198,7 @@ propogate_ends ()
       if (lines[i].end.next)
 	propogate_end_pin (&lines[i], &lines[i].start, &lines[i].end);
     }
+#endif
 }
 
 static Extra *last_pextra = 0;
@@ -1190,6 +1206,7 @@ static Extra *last_pextra = 0;
 static void
 print_extra (Extra *e, Extra *prev)
 {
+#if 0
   int which = 0;
   if (e->start.next == last_pextra)
     which = 1;
@@ -1243,6 +1260,7 @@ print_extra (Extra *e, Extra *prev)
     {
       printf("-- Unknown extra: %p\n", e);
     }
+#endif
 }
 
 #if TRACE1
@@ -1294,6 +1312,7 @@ trace_paths ()
 static void
 reverse_line (LineTypePtr line)
 {
+#if 0
   Extra *e = & LINE2EXTRA (line);
   int x, y;
   End etmp;
@@ -1317,11 +1336,13 @@ reverse_line (LineTypePtr line)
   memcpy (&etmp, &e->start, sizeof (End));
   memcpy (&e->start, &e->end, sizeof (End));
   memcpy (&e->end, &etmp, sizeof (End));
+#endif
 }
 
 static void
 reverse_arc (ArcTypePtr arc)
 {
+#if 0
   Extra *e = & ARC2EXTRA (arc);
   End etmp;
 
@@ -1336,6 +1357,7 @@ reverse_arc (ArcTypePtr arc)
   memcpy (&etmp, &e->start, sizeof (End));
   memcpy (&e->start, &e->end, sizeof (End));
   memcpy (&e->end, &etmp, sizeof (End));
+#endif
 }
 
 static void
@@ -1646,6 +1668,7 @@ gp_point_2 (int x, int y, int t, End *e, int esa, int eda, const char *func)
 static int
 gp_line_cb (const BoxType *b, void *cb)
 {
+#if 0
   const LineTypePtr l = (LineTypePtr) b;
   Extra *e = &LINE2EXTRA(l);
   if (l == start_line || l == end_line)
@@ -1662,12 +1685,14 @@ gp_line_cb (const BoxType *b, void *cb)
   if (! e->end.next
       || ! EXTRA_IS_ARC (e->end.next))
     gp_point (l->Point2.X, l->Point2.Y, l->Thickness/2, &e->end);
+#endif
   return 0;
 }
 
 static int
 gp_arc_cb (const BoxType *b, void *cb)
 {
+#if 0
   const ArcTypePtr a = (ArcTypePtr) b;
   Extra *e = & ARC2EXTRA(a);
   if (a == start_arc || a == end_arc)
@@ -1689,18 +1714,21 @@ gp_arc_cb (const BoxType *b, void *cb)
     
   gp_point (e->start.x, e->start.y, a->Thickness/2, 0);
   gp_point (e->end.x, e->end.y, a->Thickness/2, 0);
+#endif
   return 0;
 }
 
 static int
 gp_text_cb (const BoxType *b, void *cb)
 {
+#if 0
   const TextTypePtr t = (TextTypePtr) b;
   /* FIXME: drop in the actual text-line endpoints later. */
   gp_point (t->BoundingBox.X1, t->BoundingBox.Y1, 0, 0);
   gp_point (t->BoundingBox.X1, t->BoundingBox.Y2, 0, 0);
   gp_point (t->BoundingBox.X2, t->BoundingBox.Y2, 0, 0);
   gp_point (t->BoundingBox.X2, t->BoundingBox.Y1, 0, 0);
+#endif
   return 0;
 }
 
@@ -1717,6 +1745,7 @@ gp_poly_cb (const BoxType *b, void *cb)
 static int
 gp_pin_cb (const BoxType *b, void *cb)
 {
+#if 0
   const PinTypePtr p = (PinTypePtr) b;
   int t2 = (p->Thickness+1)/2;
 
@@ -1736,12 +1765,14 @@ gp_pin_cb (const BoxType *b, void *cb)
     {
       gp_point (p->X, p->Y, t2, 0);
     }
+#endif
   return 0;
 }
 
 static int
 gp_pad_cb (const BoxType *b, void *cb)
 {
+#if 0
   const PadTypePtr p = (PadTypePtr) b;
   int t2 = (p->Thickness+1)/2;
 
@@ -1789,6 +1820,7 @@ gp_pad_cb (const BoxType *b, void *cb)
       gp_point (p->Point1.X, p->Point1.Y, t2, 0);
       gp_point (p->Point2.X, p->Point2.Y, t2, 0);
     }
+#endif
   return 0;
 }
 
@@ -1853,6 +1885,7 @@ adjust_pointers (Extra *old, Extra *newone, int num)
 static LineTypePtr
 create_line (LineTypePtr sample, int x1, int y1, int x2, int y2)
 {
+#if 0
   Extra *e, *new_lines;
 #if TRACE1
   printf("create_line from %d,%d to %d,%d\n", x1, y1, x2, y2);
@@ -1882,11 +1915,14 @@ create_line (LineTypePtr sample, int x1, int y1, int x2, int y2)
 #endif
   memset (e, 0, sizeof(Extra));
   return line;
+#endif
+  return NULL;
 }
 
 static ArcTypePtr
 create_arc (LineTypePtr sample, int x, int y, int r, int sa, int da)
 {
+#if 0
   Extra *e, *new_arcs;
   ArcTypePtr arc;
 
@@ -1932,6 +1968,8 @@ create_arc (LineTypePtr sample, int x, int y, int r, int sa, int da)
   memset (e, 0, sizeof(Extra));
   fix_arc_extra (arc, e);
   return arc;
+#endif
+  return NULL;
 }
 
 static void
@@ -1997,6 +2035,7 @@ unlink_extras (Extra *e)
 static void
 mark_line_for_deletion (LineTypePtr l)
 {
+#if 0
   Extra *e = & LINE2EXTRA(l);
   if (e->deleted)
     {
@@ -2022,11 +2061,13 @@ mark_line_for_deletion (LineTypePtr l)
 	      -1 - l->Point2.X,
 	      -1 - l->Point2.Y);
 #endif
+#endif
 }
 
 static void
 mark_arc_for_deletion (ArcTypePtr a)
 {
+#if 0
   Extra *e = & ARC2EXTRA(a);
   e->deleted = 1;
   unlink_extras (e);
@@ -2034,6 +2075,7 @@ mark_arc_for_deletion (ArcTypePtr a)
   printf("Marked arc %p for deletion %ld < %ld\n",
 	 e, a->StartAngle, a->Delta);
 #endif
+#endif
 }
 
 /* Given a starting line, which may be attached to an arc, and which
@@ -2052,6 +2094,7 @@ mark_arc_for_deletion (ArcTypePtr a)
 static void
 maybe_pull_1 (LineTypePtr line)
 {
+#if 0
   BoxType box;
   /* Line half-thicknesses, including line space */
   int ex, ey;
@@ -2516,6 +2559,7 @@ maybe_pull_1 (LineTypePtr line)
   IncrementUndoSerialNumber();
 #endif
   maybe_pull_1 (new_line);
+#endif
 }
 
 /* Given a line with a end_next, attempt to pull both ends.  */
@@ -2580,6 +2624,8 @@ validate_pairs ()
 static int
 GlobalPuller(int argc, char **argv, int x, int y)
 {
+#if 0
+  GList *ii;
   int i;
   int select_flags = 0;
 
@@ -2611,12 +2657,15 @@ GlobalPuller(int argc, char **argv, int x, int y)
   find_pairs ();
   validate_pairs ();
 
-  for (i=0; i<nlines; i++)
-    if (TEST_FLAGS (select_flags, &CURRENT->Line[i]))
-      {
-	lines[i].start.pending = 1;
-	lines[i].end.pending = 1;
-      }
+  for (ii = CURRENT->Line, i=0; ii != NULL; ii = g_list_next (ii), i++)
+    {
+      LineType *line = ii->data;
+      if (TEST_FLAGS (select_flags, line))
+        {
+          lines[i].start.pending = 1;
+          lines[i].end.pending = 1;
+        }
+    }
 
 #if TRACE1
   printf("\nlines\n");
@@ -2730,6 +2779,7 @@ GlobalPuller(int argc, char **argv, int x, int y)
   nlines = narcs = max_lines = max_arcs = 0;
 
   IncrementUndoSerialNumber();
+#endif
   return 0;
 }
 
diff --git a/src/rats.c b/src/rats.c
index c6cdb2d..d2aa8bb 100644
--- a/src/rats.c
+++ b/src/rats.c
@@ -123,56 +123,56 @@ static bool
 FindPad (char *ElementName, char *PinNum, ConnectionType * conn, bool Same)
 {
   ElementTypePtr element;
-  Cardinal i;
+  GList *i;
 
-  if ((element = SearchElementByName (PCB->Data, ElementName)) != NULL)
+  if ((element = SearchElementByName (PCB->Data, ElementName)) == NULL)
+    return false;
+
+  for (i = element->Pad; i != NULL; i = g_list_next (i))
     {
-      for (i = 0; i < element->PadN; i++)
-	if (NSTRCMP (PinNum, element->Pad[i].Number) == 0 && (!Same
-							      ||
-							      !TEST_FLAG
-							      (DRCFLAG,
-							       &element->
-							       Pad[i])))
-	  {
-	    conn->type = PAD_TYPE;
-	    conn->ptr2 = &element->Pad[i];
-	    conn->group =
-	      TEST_FLAG (ONSOLDERFLAG, &element->Pad[i]) ? SLayer : CLayer;
-	    if (TEST_FLAG (EDGE2FLAG, &element->Pad[i]))
-	      {
-		conn->X = element->Pad[i].Point2.X;
-		conn->Y = element->Pad[i].Point2.Y;
-	      }
-	    else
-	      {
-		conn->X = element->Pad[i].Point1.X;
-		conn->Y = element->Pad[i].Point1.Y;
-	      }
-	    break;
-	  }
-      if (i == element->PadN)
-	{
-	  for (i = 0; i < element->PinN; i++)
-	    if (!TEST_FLAG (HOLEFLAG, &element->Pin[i]) &&
-		element->Pin[i].Number &&
-		NSTRCMP (PinNum, element->Pin[i].Number) == 0 &&
-		(!Same || !TEST_FLAG (DRCFLAG, &element->Pin[i])))
-	      {
-		conn->type = PIN_TYPE;
-		conn->ptr2 = &element->Pin[i];
-		conn->group = SLayer;	/* any layer will do */
-		conn->X = element->Pin[i].X;
-		conn->Y = element->Pin[i].Y;
-		break;
-	      }
-	  if (i == element->PinN)
-	    return (false);
-	}
-      conn->ptr1 = element;
-      return (true);
+      PadType *pad = i->data;
+
+      if (NSTRCMP (PinNum, pad->Number) == 0 &&
+          (!Same || !TEST_FLAG (DRCFLAG, pad)))
+        {
+          conn->type = PAD_TYPE;
+          conn->ptr1 = element;
+          conn->ptr2 = pad;
+          conn->group = TEST_FLAG (ONSOLDERFLAG, pad) ? SLayer : CLayer;
+
+          if (TEST_FLAG (EDGE2FLAG, pad))
+            {
+              conn->X = pad->Point2.X;
+              conn->Y = pad->Point2.Y;
+            }
+          else
+            {
+              conn->X = pad->Point1.X;
+              conn->Y = pad->Point1.Y;
+            }
+          return true;
+        }
     }
-  return (false);
+
+  for (i = element->Pin; i != NULL; i = g_list_next (i))
+    {
+      PinType *pin = i->data;
+
+      if (!TEST_FLAG (HOLEFLAG, pin) &&
+          pin->Number && NSTRCMP (PinNum, pin->Number) == 0 &&
+          (!Same || !TEST_FLAG (DRCFLAG, pin)))
+        {
+          conn->type = PIN_TYPE;
+          conn->ptr1 = element;
+          conn->ptr2 = pin;
+          conn->group = SLayer;        /* any layer will do */
+          conn->X = pin->X;
+          conn->Y = pin->Y;
+          return true;
+        }
+    }
+
+  return false;
 }
 
 /*--------------------------------------------------------------------------
