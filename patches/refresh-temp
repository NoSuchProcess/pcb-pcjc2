Bottom: 341e836cd8e8a6148ef9f6e06ebe9856e3c2a45c
Top:    db1ed4bf0f68f4f76124f11ea1fd1bb9b2379825
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2010-12-26 23:27:39 +0000

Refresh of testing

---

diff --git a/src/hid/gtk/gtkhid-gdk.c b/src/hid/gtk/gtkhid-gdk.c
index b1dc11d..b668f4c 100644
--- a/src/hid/gtk/gtkhid-gdk.c
+++ b/src/hid/gtk/gtkhid-gdk.c
@@ -103,11 +103,10 @@ ghid_draw_grid (void)
       gdk_gc_set_function (gport->grid_gc, GDK_XOR);
       gdk_gc_set_foreground (gport->grid_gc, &gport->grid_color);
     }
-  x1 = GRIDFIT_X (SIDE_X (gport->view_x0), PCB->Grid);
-  y1 = GRIDFIT_Y (SIDE_Y (gport->view_y0), PCB->Grid);
-  x2 = GRIDFIT_X (SIDE_X (gport->view_x0 + gport->view_width - 1), PCB->Grid);
-  y2 =
-    GRIDFIT_Y (SIDE_Y (gport->view_y0 + gport->view_height - 1), PCB->Grid);
+  x1 = GRIDFIT_X (gport->view_x0, PCB->Grid);
+  y1 = GRIDFIT_Y (gport->view_y0, PCB->Grid);
+  x2 = GRIDFIT_X (gport->view_x0 + gport->view_width - 1, PCB->Grid);
+  y2 = GRIDFIT_Y (gport->view_y0 + gport->view_height - 1, PCB->Grid);
   if (x1 > x2)
     {
       int tmp = x1;
@@ -498,11 +497,13 @@ ghid_draw_arc (hidGC gc, int cx, int cy,
   w = gport->width * gport->zoom;
   h = gport->height * gport->zoom;
   radius = (xradius > yradius) ? xradius : yradius;
+#if 0
   if (SIDE_X (cx) < gport->view_x0 - radius
       || SIDE_X (cx) > gport->view_x0 + w + radius
       || SIDE_Y (cy) < gport->view_y0 - radius
       || SIDE_Y (cy) > gport->view_y0 + h + radius)
     return;
+#endif
 
   USE_GC (gc);
   vrx = Vz (xradius);
@@ -535,6 +536,7 @@ ghid_draw_rect (hidGC gc, int x1, int y1, int x2, int y2)
   w = gport->width * gport->zoom;
   h = gport->height * gport->zoom;
 
+#if 0
   if ((SIDE_X (x1) < gport->view_x0 - lw
        && SIDE_X (x2) < gport->view_x0 - lw)
       || (SIDE_X (x1) > gport->view_x0 + w + lw
@@ -544,6 +546,7 @@ ghid_draw_rect (hidGC gc, int x1, int y1, int x2, int y2)
       || (SIDE_Y (y1) > gport->view_y0 + h + lw
 	  && SIDE_Y (y2) > gport->view_y0 + h + lw))
     return;
+#endif
 
   x1 = Vx (x1);
   y1 = Vy (y1);
@@ -576,11 +579,13 @@ ghid_fill_circle (hidGC gc, int cx, int cy, int radius)
 
   w = gport->width * gport->zoom;
   h = gport->height * gport->zoom;
+#if 0
   if (SIDE_X (cx) < gport->view_x0 - radius
       || SIDE_X (cx) > gport->view_x0 + w + radius
       || SIDE_Y (cy) < gport->view_y0 - radius
       || SIDE_Y (cy) > gport->view_y0 + h + radius)
     return;
+#endif
 
   USE_GC (gc);
   vr = Vz (radius);
@@ -618,6 +623,7 @@ ghid_fill_rect (hidGC gc, int x1, int y1, int x2, int y2)
   w = gport->width * gport->zoom;
   h = gport->height * gport->zoom;
 
+#if 0
   if ((SIDE_X (x1) < gport->view_x0 - lw
        && SIDE_X (x2) < gport->view_x0 - lw)
       || (SIDE_X (x1) > gport->view_x0 + w + lw
@@ -627,6 +633,7 @@ ghid_fill_rect (hidGC gc, int x1, int y1, int x2, int y2)
       || (SIDE_Y (y1) > gport->view_y0 + h + lw
 	  && SIDE_Y (y2) > gport->view_y0 + h + lw))
     return;
+#endif
 
   x1 = Vx (x1);
   y1 = Vy (y1);
diff --git a/src/hid/gtk/gtkhid-main.c b/src/hid/gtk/gtkhid-main.c
index e91b68c..50ea741 100644
--- a/src/hid/gtk/gtkhid-main.c
+++ b/src/hid/gtk/gtkhid-main.c
@@ -1683,8 +1683,8 @@ Center(int argc, char **argv, int x, int y)
   if (argc != 0)
     AFAIL (center);
 
-  x = GRIDFIT_X (SIDE_X (x), PCB->Grid);
-  y = GRIDFIT_Y (SIDE_Y (y), PCB->Grid);
+  x = GRIDFIT_X (x, PCB->Grid);
+  y = GRIDFIT_Y (y, PCB->Grid);
 
   w2 = gport->view_width / 2;
   h2 = gport->view_height / 2;
@@ -1703,7 +1703,7 @@ Center(int argc, char **argv, int x, int y)
       y = y0 + w2;
     }
 
-  dx = (x0 - gport->view_x0) / gport->zoom ;
+  dx = (x0 - gport->view_x0) / gport->zoom;
   dy = (y0 - gport->view_y0) / gport->zoom;
   gport->view_x0 = x0;
   gport->view_y0 = y0;
diff --git a/src/hid/gtk/gui-output-events.c b/src/hid/gtk/gui-output-events.c
index 569a09b..e40f7d2 100644
--- a/src/hid/gtk/gui-output-events.c
+++ b/src/hid/gtk/gui-output-events.c
@@ -214,8 +214,6 @@ ghid_port_ranges_zoom (gdouble zoom)
  * handles all events from PCB drawing area
  */
 
-static gint event_x, event_y;
-
 void
 ghid_get_coords (const char *msg, int *x, int *y)
 {
@@ -223,33 +221,31 @@ ghid_get_coords (const char *msg, int *x, int *y)
     ghid_get_user_xy (msg);
   if (ghid_port.has_entered)
     {
-      *x = SIDE_X (gport->view_x);
-      *y = SIDE_Y (gport->view_y);
+      *x = gport->view_x;
+      *y = gport->view_y;
     }
 }
 
 gboolean
 ghid_note_event_location (GdkEventButton * ev)
 {
-  gint x, y;
+  gint event_x, event_y;
   gboolean moved;
 
   if (!ev)
     {
-      gdk_window_get_pointer (ghid_port.drawing_area->window, &x, &y, NULL);
-      event_x = x;
-      event_y = y;
+      gdk_window_get_pointer (ghid_port.drawing_area->window,
+                              &event_x, &event_y, NULL);
     }
   else
     {
       event_x = ev->x;
       event_y = ev->y;
     }
-  gport->view_x = event_x * gport->zoom + gport->view_x0;
-  gport->view_y = event_y * gport->zoom + gport->view_y0;
+  gport->view_x = VIEW_X (event_x);
+  gport->view_y = VIEW_Y (event_y);
 
-  moved = MoveCrosshairAbsolute (SIDE_X (gport->view_x), 
-				 SIDE_Y (gport->view_y));
+  moved = MoveCrosshairAbsolute (gport->view_x, gport->view_y);
   if (moved)
     {
       AdjustAttachedObjects ();
diff --git a/src/hid/gtk/gui.h b/src/hid/gtk/gui.h
index ba8b601..2915776 100644
--- a/src/hid/gtk/gui.h
+++ b/src/hid/gtk/gui.h
@@ -65,14 +65,15 @@
 								((v) / 0.000254 + 0.5) : ((v) * 100.0 + 0.5))
 
 extern int ghid_flip_x, ghid_flip_y;
-#define SIDE_X(x)   ((ghid_flip_x ? PCB->MaxWidth - (x) : (x)))
-#define SIDE_Y(y)   ((ghid_flip_y ? PCB->MaxHeight - (y) : (y)))
+#define FLIP_X(x)   ((ghid_flip_x ? -(x) : (x)))
+#define FLIP_Y(y)   ((ghid_flip_y ? -(y) : (y)))
 
-#define	DRAW_X(x)	(gint)((SIDE_X(x) - gport->view_x0) / gport->zoom)
-#define	DRAW_Y(y)	(gint)((SIDE_Y(y) - gport->view_y0) / gport->zoom)
+#define	DRAW_X(x)	(gint)(FLIP_X(x - gport->view_x0) / gport->zoom)
+#define	DRAW_Y(y)	(gint)(FLIP_Y(y - gport->view_y0) / gport->zoom)
+
+#define	VIEW_X(x)	(FLIP_X(x) * gport->zoom + gport->view_x0)
+#define	VIEW_Y(y)	(FLIP_Y(y) * gport->zoom + gport->view_y0)
 
-#define	VIEW_X(x)	SIDE_X((gint)((x) * gport->zoom + gport->view_x0))
-#define	VIEW_Y(y)	SIDE_Y((gint)((y) * gport->zoom + gport->view_y0))
 
 /*
  * Used to intercept "special" hotkeys that gtk doesn't usually pass
@@ -525,9 +526,9 @@ Vx (int x)
 {
   int rv;
   if (ghid_flip_x)
-    rv = (PCB->MaxWidth - x - gport->view_x0) / gport->zoom + 0.5;
+    rv = -(x - gport->view_x0) / gport->zoom + 0.5;
   else
-    rv = (x - gport->view_x0) / gport->zoom + 0.5;
+    rv =  (x - gport->view_x0) / gport->zoom + 0.5;
   return rv;
 }
 
@@ -536,9 +537,9 @@ Vy (int y)
 {
   int rv;
   if (ghid_flip_y)
-    rv = (PCB->MaxHeight - y - gport->view_y0) / gport->zoom + 0.5;
+    rv = -(y - gport->view_y0) / gport->zoom + 0.5;
   else
-    rv = (y - gport->view_y0) / gport->zoom + 0.5;
+    rv =  (y - gport->view_y0) / gport->zoom + 0.5;
   return rv;
 }
 
@@ -553,7 +554,7 @@ Px (int x)
 {
   int rv = x * gport->zoom + gport->view_x0;
   if (ghid_flip_x)
-    rv = PCB->MaxWidth - (x * gport->zoom + gport->view_x0);
+    rv = -x * gport->zoom + gport->view_x0;
   return  rv;
 }
 
@@ -562,7 +563,7 @@ Py (int y)
 {
   int rv = y * gport->zoom + gport->view_y0;
   if (ghid_flip_y)
-    rv = PCB->MaxHeight - (y * gport->zoom + gport->view_y0);
+    rv = -y * gport->zoom + gport->view_y0;
   return  rv;
 }
