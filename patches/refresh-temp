Bottom: 9638597fde8ef091cc89dbef65125209ca23227f
Top:    37f668c4d16094d2c05ee4b25f991fbd5cc40bd7
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2014-06-07 18:37:14 +0100

Refresh of attempt-to-refactor-the-step

---

diff --git a/src/hid/gtk/object3d.c b/src/hid/gtk/object3d.c
index 89b519b..7ef93eb 100644
--- a/src/hid/gtk/object3d.c
+++ b/src/hid/gtk/object3d.c
@@ -62,7 +62,6 @@ debug_print_edge (edge_ref e, void *data)
 void
 object3d_test_init (void)
 {
-  //object3d_test_objects = g_list_append (NULL, object3d_create_test_cube ());
   object3d_test_objects = object3d_from_board_outline ();
   object3d_test_board_outline ();
 }
@@ -114,78 +113,6 @@ object3d_add_face (object3d *object, face3d *face)
   object->faces = g_list_append (object->faces, face);
 }
 
-#define XOFFSET 50
-#define YOFFSET 50
-#define ZOFFSET 0
-#define SCALE  10
-object3d *
-object3d_create_test_cube (void)
-{
-  object3d *object;
-  vertex3d *cube_vertices[8];
-  edge_ref cube_edges[12];
-  face3d *faces[6];
-  int i;
-
-  object = make_object3d ("TEST CUBE");
-
-  cube_vertices[0] = make_vertex3d (XOFFSET + SCALE * 0., YOFFSET + SCALE * 0., ZOFFSET + SCALE *  0.);
-  cube_vertices[1] = make_vertex3d (XOFFSET + SCALE * 1., YOFFSET + SCALE * 0., ZOFFSET + SCALE *  0.);
-  cube_vertices[2] = make_vertex3d (XOFFSET + SCALE * 1., YOFFSET + SCALE * 0., ZOFFSET + SCALE * -1.);
-  cube_vertices[3] = make_vertex3d (XOFFSET + SCALE * 0., YOFFSET + SCALE * 0., ZOFFSET + SCALE * -1.);
-  cube_vertices[4] = make_vertex3d (XOFFSET + SCALE * 0., YOFFSET + SCALE * 1., ZOFFSET + SCALE *  0.);
-  cube_vertices[5] = make_vertex3d (XOFFSET + SCALE * 1., YOFFSET + SCALE * 1., ZOFFSET + SCALE *  0.);
-  cube_vertices[6] = make_vertex3d (XOFFSET + SCALE * 1., YOFFSET + SCALE * 1., ZOFFSET + SCALE * -1.);
-  cube_vertices[7] = make_vertex3d (XOFFSET + SCALE * 0., YOFFSET + SCALE * 1., ZOFFSET + SCALE * -1.);
-
-  for (i = 0; i < 8; i++)
-    object3d_add_vertex (object, cube_vertices[i]);
-
-  for (i = 0; i < 12; i++) {
-    cube_edges[i] = make_edge ();
-    UNDIR_DATA (cube_edges[i]) = make_edge_info ();
-    object3d_add_edge (object, cube_edges[i]);
-  }
-
-  for (i = 0; i < 6; i++) {
-    faces[i] = make_face3d ();
-    /* XXX: Face normal */
-    /* XXX: Face contours */
-    object3d_add_face (object, faces[i]);
-  }
-
-  for (i = 0; i < 4; i++) {
-    int next_vertex = (i + 1) % 4;
-    int prev_vertex = (i + 3) % 4;
-
-    /* Assign bottom edge endpoints */
-    ODATA (cube_edges[i]) = cube_vertices[i];
-    DDATA (cube_edges[i]) = cube_vertices[next_vertex];
-
-    /* Assign top edge endpoints */
-    ODATA (cube_edges[4 + i]) = cube_vertices[4 + i];
-    DDATA (cube_edges[4 + i]) = cube_vertices[4 + next_vertex];
-
-    /* Assign side edge endpoints */
-    ODATA (cube_edges[8 + i]) = cube_vertices[i];
-    DDATA (cube_edges[8 + i]) = cube_vertices[4 + i];
-
-    /* Link up edges orbiting around each bottom vertex */
-    splice (cube_edges[i], cube_edges[8 + i]);
-    splice (cube_edges[8 + i], SYM(cube_edges[prev_vertex]));
-
-    /* Link up edges orbiting around each bottom top */
-    splice (cube_edges[4 + i], SYM(cube_edges[4 + prev_vertex]));
-    splice (SYM(cube_edges[4 + prev_vertex]), SYM(cube_edges[8 + i]));
-
-  }
-
-  quad_enum (cube_edges[0], debug_print_edge, NULL);
-
-
-  return object;
-}
-
 
 float colors[12][3] = {{1., 0., 0.},
                        {1., 1., 0.},
@@ -489,6 +416,9 @@ object3d_export_to_step (object3d *object, char *filename)
          contour_iter = g_list_next (contour_iter), outer_contour = false) {
       contour3d *contour = contour_iter->data;
       edge_ref edge;
+      step_id edge_loop;
+
+      edge_loop = step_edge_loop (step, "NONE", 
 
       fprintf (f, "#%i = EDGE_LOOP ( 'NONE', ", step->next_id);
 
@@ -595,18 +525,6 @@ object3d_from_board_outline (void)
       ct = ct->next;
     }
 
-    /* We know how many edges and vertices we need now...
-     *
-     * let n = npoints
-     * bodies = 1             (FOR NOW - just the first board outline)
-     * vertices = 2n          (n-top, n-bottom)
-     * edges = 3n             (n-top, n-bottom, n-sides)
-     * faces = 2 + n          (1-top, 1-bottom, n-sides)
-     *
-     * holes = 0              (FOR NOW - just the outline, no holes)
-     * holes = ncontours - 1  (LATER)
-     */
-
     board_object = make_object3d (PCB->Name);
     board_appearance = make_appearance ();
     top_bot_appearance = make_appearance ();
@@ -615,13 +533,12 @@ object3d_from_board_outline (void)
 
     object3d_set_appearance (board_object, board_appearance);
 
-    vertices = malloc (sizeof (vertex3d *) * 2 * npoints);
-    edges    = malloc (sizeof (edge_ref  ) * 3 * npoints);
-    faces    = malloc (sizeof (face3d *) * (2 + npoints));
+    vertices = malloc (sizeof (vertex3d *) * 2 * npoints); /* (n-bottom, n-top) */
+    edges    = malloc (sizeof (edge_ref  ) * 3 * npoints); /* (n-bottom, n-top, n-sides) */
+    faces    = malloc (sizeof (face3d *) * (npoints + 2)); /* (n-sides, 1-bottom, 1-top */
 
     /* Define the vertices */
     ct = contour;
-    start_of_ct = 0;
     offset_in_ct = 0;
     ct_npoints = get_contour_npoints (ct);
