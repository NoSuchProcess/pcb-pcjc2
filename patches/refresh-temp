Bottom: 0ea0dad5c2a8ff898bd9dc44144f1a1d343f0b6a
Top:    21648b7150ed4259d6f022bf97b02012536568f4
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2008-10-11 18:08:30 +0100

Refresh of add_pours

---

diff --git a/src/action.h b/src/action.h
index 8ce4a15..bd09d18 100644
--- a/src/action.h
+++ b/src/action.h
@@ -33,7 +33,7 @@
 
 #include "global.h"
 
-#define CLONE_TYPES LINE_TYPE | ARC_TYPE | VIA_TYPE | POLYGON_TYPE
+#define CLONE_TYPES LINE_TYPE | ARC_TYPE | VIA_TYPE | POUR_TYPE
 
 void ActionMovePointer (char *, char *);
 void ActionAdjustStyle (char *);
diff --git a/src/buffer.c b/src/buffer.c
index 909bac3..0954ebb 100644
--- a/src/buffer.c
+++ b/src/buffer.c
@@ -104,7 +104,6 @@ static ObjectFunctionType AddBufferFunctions = {
   NULL,
   NULL,
   NULL,
-  NULL,
   AddArcToBuffer,
   AddRatToBuffer
 }, MoveBufferFunctions =
@@ -121,7 +120,6 @@ MoveLineToBuffer,
     NULL,
     NULL,
     NULL,
-    NULL,
     MoveArcToBuffer,
     MoveRatToBuffer};
 
diff --git a/src/change.c b/src/change.c
index 17f8693..2b855dc 100644
--- a/src/change.c
+++ b/src/change.c
@@ -150,7 +150,6 @@ static ObjectFunctionType ChangeSizeFunctions = {
   ChangePadSize,
   NULL,
   NULL,
-  NULL,
   ChangeArcSize,
   NULL
 };
@@ -167,7 +166,6 @@ static ObjectFunctionType Change2ndSizeFunctions = {
   NULL,
   NULL,
   NULL,
-  NULL,
   NULL
 };
 static ObjectFunctionType ChangeThermalFunctions = {
@@ -183,7 +181,6 @@ static ObjectFunctionType ChangeThermalFunctions = {
   NULL,
   NULL,
   NULL,
-  NULL,
   NULL
 };
 static ObjectFunctionType ChangeClearSizeFunctions = {
@@ -198,7 +195,6 @@ static ObjectFunctionType ChangeClearSizeFunctions = {
   ChangePadClearSize,
   NULL,
   NULL,
-  NULL,
   ChangeArcClearSize,
   NULL
 };
@@ -215,7 +211,6 @@ static ObjectFunctionType ChangeNameFunctions = {
   NULL,
   NULL,
   NULL,
-  NULL,
   NULL
 };
 static ObjectFunctionType ChangeSquareFunctions = {
@@ -231,7 +226,6 @@ static ObjectFunctionType ChangeSquareFunctions = {
   NULL,
   NULL,
   NULL,
-  NULL,
   NULL
 };
 static ObjectFunctionType ChangeJoinFunctions = {
@@ -246,7 +240,6 @@ static ObjectFunctionType ChangeJoinFunctions = {
   NULL,
   NULL,
   NULL,
-  NULL,
   ChangeArcJoin,
   NULL
 };
@@ -263,7 +256,6 @@ static ObjectFunctionType ChangeOctagonFunctions = {
   NULL,
   NULL,
   NULL,
-  NULL,
   NULL
 };
 static ObjectFunctionType ChangeMaskSizeFunctions = {
@@ -283,7 +275,6 @@ static ObjectFunctionType ChangeMaskSizeFunctions = {
   NULL,
   NULL,
   NULL,
-  NULL,
   NULL
 };
 static ObjectFunctionType SetSquareFunctions = {
@@ -299,7 +290,6 @@ static ObjectFunctionType SetSquareFunctions = {
   NULL,
   NULL,
   NULL,
-  NULL,
   NULL
 };
 static ObjectFunctionType SetJoinFunctions = {
@@ -314,7 +304,6 @@ static ObjectFunctionType SetJoinFunctions = {
   NULL,
   NULL,
   NULL,
-  NULL,
   SetArcJoin,
   NULL
 };
@@ -331,7 +320,6 @@ static ObjectFunctionType SetOctagonFunctions = {
   NULL,
   NULL,
   NULL,
-  NULL,
   NULL
 };
 static ObjectFunctionType ClrSquareFunctions = {
@@ -347,7 +335,6 @@ static ObjectFunctionType ClrSquareFunctions = {
   NULL,
   NULL,
   NULL,
-  NULL,
   NULL
 };
 static ObjectFunctionType ClrJoinFunctions = {
@@ -362,7 +349,6 @@ static ObjectFunctionType ClrJoinFunctions = {
   NULL,
   NULL,
   NULL,
-  NULL,
   ClrArcJoin,
   NULL
 };
@@ -379,7 +365,6 @@ static ObjectFunctionType ClrOctagonFunctions = {
   NULL,
   NULL,
   NULL,
-  NULL,
   NULL
 };
 
diff --git a/src/change.h b/src/change.h
index 1be41aa..65a500f 100644
--- a/src/change.h
+++ b/src/change.h
@@ -40,7 +40,7 @@
 	(VIA_TYPE | PIN_TYPE | PAD_TYPE | TEXT_TYPE | ELEMENT_TYPE | ELEMENTNAME_TYPE | LINE_TYPE)
 
 #define	CHANGESIZE_TYPES        \
-	(POLYGON_TYPE | VIA_TYPE | PIN_TYPE | PAD_TYPE | LINE_TYPE | \
+	(POUR_TYPE | VIA_TYPE | PIN_TYPE | PAD_TYPE | LINE_TYPE | \
 	 ARC_TYPE | TEXT_TYPE | ELEMENTNAME_TYPE | ELEMENT_TYPE)
 
 #define	CHANGE2NDSIZE_TYPES     \
@@ -56,7 +56,7 @@
 	(ELEMENT_TYPE | PIN_TYPE | VIA_TYPE)
 
 #define CHANGEJOIN_TYPES	\
-	(ARC_TYPE | LINE_TYPE | TEXT_TYPE | POLYGON_TYPE)
+	(ARC_TYPE | LINE_TYPE | TEXT_TYPE | POUR_TYPE)
 
 #define CHANGETHERMAL_TYPES	\
 	(PIN_TYPE | VIA_TYPE)
diff --git a/src/const.h b/src/const.h
index 3e8202b..1223ab2 100644
--- a/src/const.h
+++ b/src/const.h
@@ -308,9 +308,9 @@ New polygons are full ones.
 #define POUR_TYPE 		0x20000
 
 #define PIN_TYPES     (VIA_TYPE | PIN_TYPE)
-#define LOCK_TYPES    (VIA_TYPE | LINE_TYPE | ARC_TYPE | POLYGON_TYPE | \
-                       POUR_TYPE | ELEMENT_TYPE | \
-                       TEXT_TYPE | ELEMENTNAME_TYPE | LOCKED_TYPE)
+#define LOCK_TYPES    (VIA_TYPE | LINE_TYPE | ARC_TYPE | POUR_TYPE | \
+                       ELEMENT_TYPE | TEXT_TYPE | ELEMENTNAME_TYPE | \
+                       LOCKED_TYPE)
 
 #define	ALL_TYPES		(~0)	/* all bits set */
 
diff --git a/src/copy.c b/src/copy.c
index f9c2dfa..9d42d13 100644
--- a/src/copy.c
+++ b/src/copy.c
@@ -87,7 +87,6 @@ static ObjectFunctionType CopyFunctions = {
   NULL,
   NULL,
   NULL,
-  NULL,
   CopyArc,
   NULL
 };
diff --git a/src/copy.h b/src/copy.h
index 9c9fb74..add5061 100644
--- a/src/copy.h
+++ b/src/copy.h
@@ -38,7 +38,7 @@
  */
 #define	COPY_TYPES              \
 	(VIA_TYPE | LINE_TYPE | TEXT_TYPE | \
-	ELEMENT_TYPE | ELEMENTNAME_TYPE | POLYGON_TYPE | ARC_TYPE)
+	ELEMENT_TYPE | ELEMENTNAME_TYPE | POUR_TYPE | ARC_TYPE)
 
 
 PolygonTypePtr CopyPolygonLowLevel (PolygonTypePtr, PolygonTypePtr);
diff --git a/src/crosshair.c b/src/crosshair.c
index 2cf6824..a0d94dd 100644
--- a/src/crosshair.c
+++ b/src/crosshair.c
@@ -504,44 +504,6 @@ XORDrawMoveOrCopyObject (void)
 	break;
       }
 
-#warning FIXME Later
-#if 0
-    case POLYGONPOINT_TYPE:
-      {
-	PolygonTypePtr polygon;
-	PointTypePtr point, previous, following;
-
-	polygon = (PolygonTypePtr) Crosshair.AttachedObject.Ptr2;
-	point = (PointTypePtr) Crosshair.AttachedObject.Ptr3;
-
-	/* get previous and following point */
-	if (point == polygon->Points)
-	  {
-	    previous = &polygon->Points[polygon->PointN - 1];
-	    following = point + 1;
-	  }
-	else if (point == &polygon->Points[polygon->PointN - 1])
-	  {
-	    previous = point - 1;
-	    following = &polygon->Points[0];
-	  }
-	else
-	  {
-	    previous = point - 1;
-	    following = point + 1;
-	  }
-
-	/* draw the two segments */
-	gui->draw_line (Crosshair.GC,
-			previous->X,
-			previous->Y, point->X + dx, point->Y + dy);
-	gui->draw_line (Crosshair.GC,
-			point->X + dx,
-			point->Y + dy, following->X, following->Y);
-	break;
-      }
-#endif
-
     case POURPOINT_TYPE:
       {
 	PourTypePtr pour;
@@ -1013,7 +975,7 @@ FitCrosshairIntoGrid (LocationType X, LocationType Y)
 
   if (TEST_FLAG (SNAPPINFLAG, PCB))
     ans = SearchScreenGridSlop (Crosshair.X, Crosshair.Y,
-                                POLYGONPOINT_TYPE, &ptr1, &ptr2, &ptr3);
+                                POURPOINT_TYPE, &ptr1, &ptr2, &ptr3);
   else
     ans = NO_TYPE;
 
diff --git a/src/draw.c b/src/draw.c
index e58015c..f460930 100644
--- a/src/draw.c
+++ b/src/draw.c
@@ -703,16 +703,12 @@ pour_callback (const BoxType * b, void *cl)
   struct pin_info *i = (struct pin_info *) cl;
   PourType *pour = (PourType *)b;
 
-//  DrawPlainPour (i->Layer, pour);
   DrawPour (i->Layer, pour, 0);
 
-//  printf ("Pour has %i polygons :\n", pour->PolygonN);
-  /* draw all polygons in this pour */
   if (pour->PolygonN)
     {
       r_search (pour->polygon_tree, i->clip, NULL, poly_callback, i);
     }
-//  printf ("-----------\n");
 
   return 1;
 }
@@ -1828,10 +1824,9 @@ DrawPourLowLevel (PourTypePtr Pour, void *data)
       gui->set_line_width (Output.fgGC, 2);
 //      gui->set_line_width (Output.fgGC, 1);
       for (i = 0; i < n - 1; i++)
-	{
-	  gui->draw_line (Output.fgGC, x[i], y[i], x[i + 1], y[i + 1]);
-	  gui->fill_circle (Output.fgGC, x[i], y[i], 30);
-	}
+        {
+          gui->draw_line (Output.fgGC, x[i], y[i], x[i + 1], y[i + 1]);
+        }
       gui->draw_line (Output.fgGC, x[n - 1], y[n - 1], x[0], y[0]);
     }
   else
diff --git a/src/find.h b/src/find.h
index c6e6eef..aae9d89 100644
--- a/src/find.h
+++ b/src/find.h
@@ -42,7 +42,7 @@
 #define LOOKUP_MORE	\
 	(VIA_TYPE | LINE_TYPE | RATLINE_TYPE | POLYGON_TYPE | ARC_TYPE)
 #define SILK_TYPE	\
-	(LINE_TYPE | ARC_TYPE | POLYGON_TYPE)
+	(LINE_TYPE | ARC_TYPE | POUR_TYPE)
 
 Boolean LineLineIntersect (LineTypePtr, LineTypePtr);
 Boolean LineArcIntersect (LineTypePtr, ArcTypePtr);
diff --git a/src/global.h b/src/global.h
index 8090cef..91851b8 100644
--- a/src/global.h
+++ b/src/global.h
@@ -665,7 +665,7 @@ typedef struct
   void *(*Pin) (ElementTypePtr, PinTypePtr);
   void *(*Pad) (ElementTypePtr, PadTypePtr);
   void *(*LinePoint) (LayerTypePtr, LineTypePtr, PointTypePtr);
-  void *(*PolygonPoint) (LayerTypePtr, PolygonTypePtr, PointTypePtr);
+//  void *(*PolygonPoint) (LayerTypePtr, PolygonTypePtr, PointTypePtr);
   void *(*PourPoint) (LayerTypePtr, PourTypePtr, PointTypePtr);
   void *(*Arc) (LayerTypePtr, ArcTypePtr);
   void *(*Rat) (RatTypePtr);
diff --git a/src/insert.h b/src/insert.h
index bbe99d5..451d37e 100644
--- a/src/insert.h
+++ b/src/insert.h
@@ -33,7 +33,7 @@
 
 #include "global.h"
 
-#define	INSERT_TYPES	(POLYGON_TYPE | LINE_TYPE | RATLINE_TYPE)
+#define	INSERT_TYPES	(POUR_TYPE | LINE_TYPE | RATLINE_TYPE)
 
 /* ---------------------------------------------------------------------------
  * prototypes
diff --git a/src/macro.h b/src/macro.h
index 8b9696b..c9322ec 100644
--- a/src/macro.h
+++ b/src/macro.h
@@ -400,12 +400,14 @@ extern int mem_any_set (unsigned char *, int);
 		polygon = &(layer)->Polygon[n]
 #endif
 
+#if 0
 #define	POLYGONPOINT_LOOP(polygon) do	{	\
 	Cardinal			n;		\
 	PointTypePtr	point;				\
 	for (n = (polygon)->PointN-1; n != -1; n--)	\
 	{						\
 		point = &(polygon)->Points[n]
+#endif
 
 #define	POUR_LOOP(layer) do {			\
 	Cardinal		n;			\
diff --git a/src/misc.c b/src/misc.c
index ce44f58..dd83d6f 100644
--- a/src/misc.c
+++ b/src/misc.c
@@ -1271,6 +1271,10 @@ GetObjectBoundingBox (int Type, void *Ptr1, void *Ptr2, void *Ptr3)
       box = ((PolygonTypePtr) Ptr2)->BoundingBox;
       break;
 
+    case POUR_TYPE:
+      box = ((PolygonTypePtr) Ptr2)->BoundingBox;
+      break;
+
     case ELEMENT_TYPE:
       box = ((ElementTypePtr) Ptr1)->BoundingBox;
       {
@@ -1321,7 +1325,7 @@ GetObjectBoundingBox (int Type, void *Ptr1, void *Ptr2, void *Ptr3)
         break;
       }
 
-    case POLYGONPOINT_TYPE:
+    case POURPOINT_TYPE:
       {
         PointTypePtr point = (PointTypePtr) Ptr3;
 
@@ -1701,7 +1705,7 @@ GetGridLockCoordinates (int type, void *ptr1,
       break;
 
     case LINEPOINT_TYPE:
-    case POLYGONPOINT_TYPE:
+    case POURPOINT_TYPE:
       *x = ((PointTypePtr) ptr3)->X;
       *y = ((PointTypePtr) ptr3)->Y;
       break;
diff --git a/src/move.c b/src/move.c
index b2704ad..f9638b4 100644
--- a/src/move.c
+++ b/src/move.c
@@ -102,7 +102,6 @@ static ObjectFunctionType MoveFunctions = {
   NULL,
   NULL,
   MoveLinePoint,
-  NULL,
   MovePourPoint,
   MoveArc,
   NULL
@@ -120,7 +119,6 @@ MoveLineToLayer,
     NULL,
     NULL,
     NULL,
-    NULL,
     MoveArcToLayer,
     MoveRatToLayer};
 
diff --git a/src/move.h b/src/move.h
index 5bc9f21..6750c10 100644
--- a/src/move.h
+++ b/src/move.h
@@ -85,9 +85,9 @@
 
 #define	MOVE_TYPES	\
 	(VIA_TYPE | LINE_TYPE | TEXT_TYPE | ELEMENT_TYPE | ELEMENTNAME_TYPE |	\
-	POLYGON_TYPE | POLYGONPOINT_TYPE | LINEPOINT_TYPE | ARC_TYPE)
+	POUR_TYPE | POURPOINT_TYPE | LINEPOINT_TYPE | ARC_TYPE)
 #define	MOVETOLAYER_TYPES	\
-	(LINE_TYPE | TEXT_TYPE | POLYGON_TYPE | RATLINE_TYPE | ARC_TYPE)
+	(LINE_TYPE | TEXT_TYPE | POUR_TYPE | RATLINE_TYPE | ARC_TYPE)
 
 
 /* ---------------------------------------------------------------------------
diff --git a/src/pour.c b/src/pour.c
index e66455f..1859661 100644
--- a/src/pour.c
+++ b/src/pour.c
@@ -654,7 +654,6 @@ ClearPour (DataTypePtr Data, LayerTypePtr Layer, PourType * pour,
     }
 
   /* TODO: Check r to work of it we need to do this? */
-  printf ("ClearPour found r=%i\n", r);
 
   count_all = count_added = 0;
   /* For each piece of the clipped up polygon, create a new child */
@@ -673,6 +672,7 @@ ClearPour (DataTypePtr Data, LayerTypePtr Layer, PourType * pour,
           count_added++;
           poly = CreateNewPolygonInPour (pour, pour->Flags);
           poly->Clipped = pg;
+          CLEAR_FLAG (SELECTEDFLAG, poly);
 
           SetPolygonBoundingBox (poly);
 
@@ -688,7 +688,7 @@ ClearPour (DataTypePtr Data, LayerTypePtr Layer, PourType * pour,
     }
   while ((pg = tmp) != info.pg);
 
-  printf ("ClearPour counted %i polygon pieces, and added the biggest %i\n", count_all, count_added);
+//  printf ("ClearPour counted %i polygon pieces, and added the biggest %i\n", count_all, count_added);
   return r;
 }
 
@@ -768,7 +768,7 @@ subtract_plow (DataTypePtr Data, LayerTypePtr Layer, PourTypePtr pour,
       }
   }
   END_LOOP;
-  printf ("Subtract counted %i touching children, now removed\n", count);
+//  printf ("Subtract counted %i touching children, now removed\n", count);
 
   if (pg == NULL)
     {
@@ -790,6 +790,7 @@ subtract_plow (DataTypePtr Data, LayerTypePtr Layer, PourTypePtr pour,
       return -1;
     }
 
+#if 0
   count = 0;
   { POLYAREA *pg_start;
   pg_start = pg;
@@ -798,6 +799,7 @@ subtract_plow (DataTypePtr Data, LayerTypePtr Layer, PourTypePtr pour,
   } while ((pg = pg->f) != pg_start);
   }
   printf ("After subtract, counted %i polygon pieces\n", count);
+#endif
 
   count_all = count_added = 0;
   /* For each piece of the clipped up polygon, create a new child */
@@ -817,6 +819,7 @@ subtract_plow (DataTypePtr Data, LayerTypePtr Layer, PourTypePtr pour,
           count_added++;
           poly = CreateNewPolygonInPour (pour, pour->Flags);
           poly->Clipped = pg;
+          CLEAR_FLAG (SELECTEDFLAG, poly);
 
           SetPolygonBoundingBox (poly);
 
@@ -836,7 +839,7 @@ subtract_plow (DataTypePtr Data, LayerTypePtr Layer, PourTypePtr pour,
     }
   while ((pg = tmp) != start_pg);
 
-  printf ("ClearPoly counted %i polygon pieces, and added the biggest %i\n", count_all, count_added);
+//  printf ("ClearPoly counted %i polygon pieces, and added the biggest %i\n", count_all, count_added);
 
   return 0;
 }
@@ -904,7 +907,7 @@ original_pour_poly (PourType * p)
   Vector v;
 
   /* first make initial polygon contour */
-  POLYGONPOINT_LOOP (p);
+  POURPOINT_LOOP (p);
   {
     v[0] = point->X;
     v[1] = point->Y;
@@ -920,7 +923,7 @@ original_pour_poly (PourType * p)
   if (contour == NULL)
     {
       printf ("How did that escape - did the loop iterate zero times??\n");
-      POLYGONPOINT_LOOP (p);
+      POURPOINT_LOOP (p);
         {
           printf ("Hello\n");
         }
@@ -1015,7 +1018,7 @@ add_plow (DataTypePtr Data, LayerTypePtr Layer, PourTypePtr pour,
       }
   }
   END_LOOP;
-  printf ("Unsubtract counted %i touching children, now removed\n", count);
+//  printf ("Unsubtract counted %i touching children, now removed\n", count);
 
   if (pg == NULL)
     {
@@ -1035,6 +1038,7 @@ add_plow (DataTypePtr Data, LayerTypePtr Layer, PourTypePtr pour,
   /* NB: np and old *pg are freed inside intersect_poly() */
   intersect_poly (np, &pg);
 
+#if 0
   count = 0;
   { POLYAREA *pg_start;
   pg_start = pg;
@@ -1043,6 +1047,7 @@ add_plow (DataTypePtr Data, LayerTypePtr Layer, PourTypePtr pour,
   } while ((pg = pg->f) != pg_start);
   }
   printf ("After unsubtract, counted %i polygon pieces\n", count);
+#endif
 
 #warning FIXME Later: ClearPour does the adding of Polygon objects for us
   ClearPour (PCB->Data, Layer, pour, pg, (const BoxType *) ptr2, 2 * UNSUBTRACT_BLOAT);
@@ -1067,6 +1072,7 @@ add_plow (DataTypePtr Data, LayerTypePtr Layer, PourTypePtr pour,
 
       poly = CreateNewPolygonInPour (pour, pour->Flags);
       poly->Clipped = pg;
+      CLEAR_FLAG (SELECTEDFLAG, poly);
 
       SetPolygonBoundingBox (poly);
 
@@ -1088,12 +1094,12 @@ InitPourClip (DataTypePtr Data, LayerTypePtr layer, PourType * pour)
 {
   POLYAREA *clipped;
 
-  printf ("InitPourClip\n");
+//  printf ("InitPourClip\n");
 
   /* Free any children we might have */
   if (pour->PolygonN)
     {
-      printf ("We already had children. Killing them now.\n");
+//      printf ("We already had children. Killing them now.\n");
 //      delete_children = calloc (pour->PolygonN, sizeof (PolygonType *));
       POURPOLYGON_LOOP (pour);
       {
@@ -1253,7 +1259,8 @@ RestoreToPours (DataType * Data, int type, void *ptr1, void *ptr2)
 {
   if (type == POUR_TYPE)
     {
-      printf ("Calling InitPourClip from RestoreToPour\n");
+#warning FIXME Later: Why do we need to do this?
+//      printf ("Calling InitPourClip from RestoreToPour\n");
       InitPourClip (PCB->Data, (LayerTypePtr) ptr1, (PourTypePtr) ptr2);
     }
   PlowPours (Data, type, ptr1, ptr2, add_plow);
@@ -1264,7 +1271,8 @@ ClearFromPours (DataType * Data, int type, void *ptr1, void *ptr2)
 {
   if (type == POUR_TYPE)
     {
-      printf ("Calling InitPourClip from ClearFromPour\n");
+#warning FIXME Later: Why do we need to do this?
+//      printf ("Calling InitPourClip from ClearFromPour\n");
       InitPourClip (PCB->Data, (LayerTypePtr) ptr1, (PourTypePtr) ptr2);
     }
   PlowPours (Data, type, ptr1, ptr2, subtract_plow);
diff --git a/src/remove.c b/src/remove.c
index 24b23a8..2fde1dd 100644
--- a/src/remove.c
+++ b/src/remove.c
@@ -94,7 +94,6 @@ static ObjectFunctionType RemoveFunctions = {
   NULL,
   NULL,
   RemoveLinePoint,
-  NULL,
   RemovePourPoint,
   RemoveArc,
   RemoveRat
@@ -110,7 +109,6 @@ static ObjectFunctionType DestroyFunctions = {
   NULL,
   NULL,
   NULL,
-  NULL, //DestroyPolygonPoint,
   DestroyPourPoint,
   DestroyArc,
   DestroyRat
@@ -526,7 +524,7 @@ RemovePourPoint (LayerTypePtr Layer,
   if (Layer->On)
     ErasePour (Pour);
   /* insert the pour-point into the undo list */
-  POLYGONPOINT_LOOP (Pour);
+  POURPOINT_LOOP (Pour);
   {
     if (point == Point)
       {
@@ -536,7 +534,7 @@ RemovePourPoint (LayerTypePtr Layer,
   }
   END_LOOP;
 
-  AddObjectToRemovePointUndoList (POLYGONPOINT_TYPE, Layer, Pour, index);
+  AddObjectToRemovePointUndoList (POURPOINT_TYPE, Layer, Pour, index);
   r_delete_entry (Layer->pour_tree, (BoxType *) Pour);
 
   /* remove point from list, keep point order */
diff --git a/src/remove.h b/src/remove.h
index eb8c5da..598ef78 100644
--- a/src/remove.h
+++ b/src/remove.h
@@ -38,7 +38,7 @@
  */
 #define REMOVE_TYPES            \
 	(VIA_TYPE | LINEPOINT_TYPE | LINE_TYPE | TEXT_TYPE | ELEMENT_TYPE |	\
-	POLYGONPOINT_TYPE | POLYGON_TYPE | RATLINE_TYPE | ARC_TYPE)
+	POURPOINT_TYPE | POUR_TYPE | RATLINE_TYPE | ARC_TYPE)
 
 void *RemoveLine (LayerTypePtr, LineTypePtr);
 void *RemoveArc (LayerTypePtr, ArcTypePtr);
diff --git a/src/report.c b/src/report.c
index 5a19390..af1b67d 100644
--- a/src/report.c
+++ b/src/report.c
@@ -496,14 +496,14 @@ ReportDialog (int argc, char **argv, int x, int y)
 	break;
       }
     case LINEPOINT_TYPE:
-    case POLYGONPOINT_TYPE:
+    case POURPOINT_TYPE:
       {
 	PointTypePtr point = (PointTypePtr) ptr2;
 	sprintf (&report[0], "POINT ID# %ld. Points don't have flags.\n"
 		 "Located at (X,Y) = (%d,%d)\n"
 		 "It belongs to a %s on layer %d\n", point->ID,
 		 point->X, point->Y,
-		 (type == LINEPOINT_TYPE) ? "line" : "polygon",
+		 (type == LINEPOINT_TYPE) ? "line" : "pour",
 		 GetLayerNumber (PCB->Data, (LayerTypePtr) ptr1));
 	break;
       }
diff --git a/src/report.h b/src/report.h
index 7abbb79..39ce0ca 100644
--- a/src/report.h
+++ b/src/report.h
@@ -31,8 +31,8 @@
 #include "global.h"
 
 #define REPORT_TYPES \
-	(VIA_TYPE | LINE_TYPE | TEXT_TYPE | POLYGON_TYPE | ELEMENT_TYPE | \
+	(VIA_TYPE | LINE_TYPE | TEXT_TYPE | POUR_TYPE | ELEMENT_TYPE | \
 	 RATLINE_TYPE | PIN_TYPE | PAD_TYPE | ELEMENTNAME_TYPE | ARC_TYPE \
-	 | POLYGONPOINT_TYPE | LINEPOINT_TYPE)
+	 | POURPOINT_TYPE | LINEPOINT_TYPE)
 
 #endif
diff --git a/src/rotate.c b/src/rotate.c
index 5049afa..66cd431 100644
--- a/src/rotate.c
+++ b/src/rotate.c
@@ -89,7 +89,6 @@ static ObjectFunctionType RotateFunctions = {
   NULL,
   RotateLinePoint,
   NULL,
-  NULL,
   RotateArc,
   NULL
 };
diff --git a/src/search.c b/src/search.c
index 84afeb6..cfe648a 100644
--- a/src/search.c
+++ b/src/search.c
@@ -79,6 +79,8 @@ static Boolean SearchTextByLocation (int, LayerTypePtr *, TextTypePtr *,
 				     TextTypePtr *);
 static Boolean SearchPolygonByLocation (int, LayerTypePtr *, PolygonTypePtr *,
 					PolygonTypePtr *);
+static Boolean SearchPourByLocation (int, LayerTypePtr *, PourTypePtr *,
+					PourTypePtr *);
 static Boolean SearchPinByLocation (int, ElementTypePtr *, PinTypePtr *,
 				    PinTypePtr *);
 static Boolean SearchPadByLocation (int, ElementTypePtr *, PadTypePtr *,
@@ -441,7 +443,6 @@ pour_polygon_callback (const BoxType * box, void *cl)
   return r_search (pour->polygon_tree, &SearchBox, NULL, polygon_callback, i);
 }
 
-
 /* ---------------------------------------------------------------------------
  * searches a polygon on the SearchLayer 
  */
@@ -465,6 +466,52 @@ SearchPolygonByLocation (int locked, LayerTypePtr * Layer,
   return (True);
 }
 
+#warning FIXME Later: For now, can only select a pour if you're hitting its child polygons
+#if 0
+static int
+pour_callback (const BoxType * box, void *cl)
+{
+  PourTypePtr pour = (PourTypePtr) box;
+  struct ans_info *i = (struct ans_info *) cl;
+
+  if (TEST_FLAG (i->locked, pour))
+    return 0;
+
+  if (IsPointInPour (PosX, PosY, SearchRadius, pour))
+    {
+      *i->ptr2 = *i->ptr3 = pour;
+      longjmp (i->env, 1);
+    }
+  return 0;
+}
+#endif
+
+/* ---------------------------------------------------------------------------
+ * searches a pour on the SearchLayer 
+ */
+static Boolean
+SearchPourByLocation (int locked, LayerTypePtr * Layer,
+                      PourTypePtr * Pour, PourTypePtr * Dummy)
+{
+  struct ans_info info;
+
+  *Layer = SearchLayer;
+  info.ptr2 = (void **) Pour;
+  info.ptr3 = (void **) Dummy;
+  info.locked = (locked & LOCKED_TYPE) ? 0 : LOCKFLAG;
+
+#warning FIXME Later: For now, can only select a pour if you're hitting its child polygons
+  if (setjmp (info.env) == 0)
+    {
+      r_search (SearchLayer->pour_tree, &SearchBox, NULL, pour_polygon_callback, &info);
+      return False;
+    }
+
+  /* Make sure we return the pour, not the polygon */
+  *info.ptr2 = *info.ptr3 = ((PolygonTypePtr)*info.ptr2)->ParentPour;
+  return (True);
+}
+
 static int
 linepoint_callback (const BoxType * b, void *cl)
 {
@@ -1188,7 +1235,7 @@ SearchObjectByLocation (int Type,
     }
   if (TEST_FLAG (THINDRAWFLAG, PCB) || TEST_FLAG (THINDRAWPOLYFLAG, PCB))
     {
-      Type &= ~POLYGON_TYPE;
+      Type &= ~(POLYGON_TYPE | POUR_TYPE);
     }
 
   if (Type & RATLINE_TYPE && PCB->RatOn &&
@@ -1258,7 +1305,7 @@ SearchObjectByLocation (int Type,
 					 (LayerTypePtr *) Result1,
 					 (PourTypePtr *) Result2,
 					 (PointTypePtr *) Result3))
-	    return (POLYGONPOINT_TYPE);
+	    return (POURPOINT_TYPE);
 
 	  if ((HigherAvail & (PIN_TYPE | PAD_TYPE)) == 0 &&
 	      Type & LINEPOINT_TYPE &&
@@ -1309,6 +1356,27 @@ SearchObjectByLocation (int Type,
 	      else
 		return (POLYGON_TYPE);
 	    }
+
+	  if (Type & POUR_TYPE &&
+	      SearchPourByLocation (locked,
+				    (LayerTypePtr *) Result1,
+				    (PourTypePtr *) Result2,
+				    (PourTypePtr *) Result3))
+	    {
+	      if (HigherAvail)
+		{
+		  BoxTypePtr box =
+		    &(*(PourTypePtr *) Result2)->BoundingBox;
+		  float area =
+		    (float) (box->X2 - box->X1) * (float) (box->X2 - box->X1);
+		  if (HigherBound < area)
+		    break;
+		  else
+		    return (POUR_TYPE);
+		}
+	      else
+		return (POUR_TYPE);
+	    }
 	}
     }
   /* return any previously found objects */
@@ -1439,35 +1507,8 @@ SearchObjectByID (DataTypePtr Base,
       }
       ENDALL_LOOP;
     }
-#warning FIXME Later
-#if 0
-  if (type == POLYGON_TYPE || type == POLYGONPOINT_TYPE)
-    {
-      ALLPOLYGON_LOOP (Base);
-      {
-	if (polygon->ID == ID)
-	  {
-	    *Result1 = (void *) layer;
-	    *Result2 = *Result3 = (void *) polygon;
-	    return (POLYGON_TYPE);
-	  }
-	if (type == POLYGONPOINT_TYPE)
-	  POLYGONPOINT_LOOP (polygon);
-	{
-	  if (point->ID == ID)
-	    {
-	      *Result1 = (void *) layer;
-	      *Result2 = (void *) polygon;
-	      *Result3 = (void *) point;
-	      return (POLYGONPOINT_TYPE);
-	    }
-	}
-	END_LOOP;
-      }
-      ENDALL_LOOP;
-    }
-#endif
-  if (type == POUR_TYPE || type == POURPOINT_TYPE)
+
+  if (type == POUR_TYPE || type == POURPOINT_TYPE || type == POLYGON_TYPE)
     {
       ALLPOUR_LOOP (Base);
       {
@@ -1478,17 +1519,32 @@ SearchObjectByID (DataTypePtr Base,
 	    return (POUR_TYPE);
 	  }
 	if (type == POURPOINT_TYPE)
-	  POURPOINT_LOOP (pour);
-	{
-	  if (point->ID == ID)
-	    {
-	      *Result1 = (void *) layer;
-	      *Result2 = (void *) pour;
-	      *Result3 = (void *) point;
-	      return (POURPOINT_TYPE);
-	    }
-	}
-	END_LOOP;
+          {
+            POURPOINT_LOOP (pour);
+            {
+              if (point->ID == ID)
+                {
+                  *Result1 = (void *) layer;
+                  *Result2 = (void *) pour;
+                  *Result3 = (void *) point;
+                  return (POURPOINT_TYPE);
+                }
+            }
+            END_LOOP;
+          }
+        else if (type == POLYGON_TYPE)
+          {
+            POURPOLYGON_LOOP (pour);
+            {
+              if (polygon->ID == ID)
+                {
+                  *Result1 = (void *) layer;
+                  *Result2 = *Result3 = (void *) polygon;
+                  return (POLYGON_TYPE);
+                }
+            }
+            END_LOOP;
+          }
       }
       ENDALL_LOOP;
     }
diff --git a/src/select.c b/src/select.c
index 49d7535..9d17e27 100644
--- a/src/select.c
+++ b/src/select.c
@@ -182,6 +182,7 @@ SelectObject (void)
 	break;
       }
 
+#if 0
     case POLYGON_TYPE:
       {
 	PolygonType *poly = (PolygonTypePtr) ptr2;
@@ -193,6 +194,19 @@ SelectObject (void)
 	/* changing memory order no longer effects draw order */
 	break;
       }
+#endif
+
+    case POUR_TYPE:
+      {
+	PourType *pour = (PolygonTypePtr) ptr2;
+
+	layer = (LayerTypePtr) ptr1;
+	AddObjectToFlagUndoList (POUR_TYPE, ptr1, ptr2, ptr2);
+	TOGGLE_FLAG (SELECTEDFLAG, pour);
+	DrawPour (layer, pour, 0);
+	/* changing memory order no longer effects draw order */
+	break;
+      }
 
     case PIN_TYPE:
       AddObjectToFlagUndoList (PIN_TYPE, ptr1, ptr2, ptr2);
@@ -525,12 +539,6 @@ ObjectOperation (ObjectFunctionTypePtr F,
 	return (F->Polygon ((LayerTypePtr) Ptr1, (PolygonTypePtr) Ptr2));
       break;
 
-    case POLYGONPOINT_TYPE:
-      if (F->PolygonPoint)
-	return (F->PolygonPoint ((LayerTypePtr) Ptr1, (PolygonTypePtr) Ptr2,
-			  (PointTypePtr) Ptr3));
-      break;
-
     case POUR_TYPE:
       if (F->Pour)
 	return (F->Pour ((LayerTypePtr) Ptr1, (PourTypePtr) Ptr2));
@@ -637,6 +645,7 @@ SelectedOperation (ObjectFunctionTypePtr F, Boolean Reset, int type)
   }
   ENDALL_LOOP;
 
+#if 0
   /* check polygons */
   if (type & POLYGON_TYPE && F->Polygon)
     VISIBLEPOUR_LOOP (PCB->Data);
@@ -657,6 +666,7 @@ SelectedOperation (ObjectFunctionTypePtr F, Boolean Reset, int type)
       END_LOOP;
     }
   ENDALL_LOOP;
+#endif
 
   /* check pours */
   if (type & POUR_TYPE && F->Pour)
@@ -834,6 +844,7 @@ SelectConnection (Boolean Flag)
       }
   }
   ENDALL_LOOP;
+#if 0
   VISIBLEPOUR_LOOP (PCB->Data);
   {
     POURPOLYGON_LOOP (pour);
@@ -849,6 +860,7 @@ SelectConnection (Boolean Flag)
     END_LOOP;
   }
   ENDALL_LOOP;
+#endif
 
   if (PCB->PinOn && PCB->ElementOn)
     {
diff --git a/src/select.h b/src/select.h
index b5c9542..8974d04 100644
--- a/src/select.h
+++ b/src/select.h
@@ -37,7 +37,6 @@
 #define SELECT_TYPES	\
 	(VIA_TYPE | LINE_TYPE | TEXT_TYPE | POUR_TYPE | ELEMENT_TYPE |	\
 	 PIN_TYPE | PAD_TYPE | ELEMENTNAME_TYPE | RATLINE_TYPE | ARC_TYPE)
-//	(VIA_TYPE | LINE_TYPE | TEXT_TYPE | POLYGON_TYPE | POUR_TYPE | ELEMENT_TYPE |	
 
 void SelectPin (LibraryEntryTypePtr entry, Boolean toggle);
 Boolean SelectObject (void);
