Bottom: bfa3388c39f2dab5912c3d972d492e023d283201
Top:    1fa05af15acd64e2446dea95069df24bdd7cbd0f
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2009-11-11 16:29:44 +0000

Refresh of undo-polygon1-c-indenting

---

diff --git a/src/polygon1.c b/src/polygon1.c
index 827c997..e69fc86 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -1407,46 +1407,40 @@ InsertHoles (jmp_buf * e, POLYAREA * dest, PLINE ** src)
 	}
       else
 	{
-	  /* Need to check if this new hole means we need to kick out any old ones for reprocessing */
-	  while (1)
-	    {
-	      struct find_inside_info info;
-	      PLINE *prev;
-
-	      info.want_inside = curh;
-
-	      /* Set jump return */
-	      if (setjmp (info.jb))
-		{
-		  /* Returned here! */
-		}
-	      else
-		{
-		  info.result = NULL;
-		  /* Rtree search, calling back a routine to longjmp back with data about any hole inside the added one */
-		  /*   Be sure not to bother jumping back to report the main contour! */
-		  r_search (pa_info->pa->contour_tree, (BoxType *) curh, NULL,
-			    find_inside, &info);
-
-		  /* Nothing found? */
-		  break;
-		}
+          /* Need to check if this new hole means we need to kick out any old ones for reprocessing */
+          while (1) {
+            struct find_inside_info info;
+            PLINE *prev;
+
+            info.want_inside = curh;
+
+            /* Set jump return */
+            if (setjmp (info.jb)) {
+              /* Returned here! */
+            } else {
+              info.result = NULL;
+              /* Rtree search, calling back a routine to longjmp back with data about any hole inside the added one */
+              /*   Be sure not to bother jumping back to report the main contour! */
+              r_search (pa_info->pa->contour_tree, (BoxType *)curh, NULL, find_inside, &info);
+
+              /* Nothing found? */
+              break;
+            }
 
-	      /* We need to find the contour before it, so we can update its next pointer */
-	      prev = container;
-	      while (prev->next != info.result)
-		{
-		  prev = prev->next;
-		}
+            /* We need to find the contour before it, so we can update its next pointer */
+            prev = container;
+            while (prev->next != info.result) {
+              prev = prev->next;
+            }
 
-	      /* Remove hole from the contour */
-	      remove_contour (pa_info->pa, prev, info.result, TRUE);
+            /* Remove hole from the contour */
+            remove_contour (pa_info->pa, prev, info.result, TRUE);
 
-	      /* Add hole as the next on the list to be processed in this very function */
-	      info.result->next = *src;
-	      *src = info.result;
-	    }
-	  /* End check for kicked out holes */
+            /* Add hole as the next on the list to be processed in this very function */
+            info.result->next = *src;
+            *src = info.result;
+          }
+          /* End check for kicked out holes */
 
 	  /* link at front of hole list */
 	  curh->next = container->next;
