Bottom: 66e27229dc34ee55046e2b53c6250b8ad823f77a
Top:    ae704a486e214967dc20a2581af9869b99c78120
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2009-02-21 18:50:36 +0000

Refresh of add-cache-for-noholes-diced-ve

---

diff --git a/src/global.h b/src/global.h
index 74898ee..9733a1e 100644
--- a/src/global.h
+++ b/src/global.h
@@ -208,7 +208,7 @@ struct polygon_st			/* holds information about a polygon */
   Cardinal PointN,		/* number of points in polygon */
     PointMax;			/* max number from malloc() */
   POLYAREA *Clipped;		/* the clipped region of this polygon */
-  POLYAREA *NoHoles;		/* the polygon broken into hole-less regions */
+  PLINE *NoHoles;		/* the polygon broken into hole-less regions */
   int NoHolesValid;		/* Is the NoHoles polygon up to date? */
   PointTypePtr Points;		/* data */
 };
diff --git a/src/hid/common/draw_helpers.c b/src/hid/common/draw_helpers.c
index f7f12a5..ded1bc8 100644
--- a/src/hid/common/draw_helpers.c
+++ b/src/hid/common/draw_helpers.c
@@ -57,7 +57,10 @@ static void thindraw_contour (hidGC gc, PLINE *pl)
 static void fill_contour_cb (PLINE *pl, void *user_data)
 {
   hidGC gc = user_data;
+  PLINE *local_pl = pl;
+
   fill_contour (gc, pl);
+  poly_FreeContours (&local_pl);
 }
 
 void common_fill_pcb_polygon (hidGC gc, PolygonType *poly,
@@ -73,11 +76,10 @@ void common_fill_pcb_polygon (hidGC gc, PolygonType *poly,
     }
   if (poly->NoHoles)
     {
-      PLINE *pl = poly->NoHoles;
+      PLINE *pl;
 
-      do {
+      for (pl = poly->NoHoles; pl != NULL; pl = pl->next)
         fill_contour (gc, pl);
-      } while ((pl = pl->f) != poly->NoHoles);
     }
 
   /* Draw other parts of the polygon if fullpoly flag is set */
diff --git a/src/mymem.c b/src/mymem.c
index 4b0e234..c3663d6 100644
--- a/src/mymem.c
+++ b/src/mymem.c
@@ -736,8 +736,7 @@ FreePolygonMemory (PolygonTypePtr Polygon)
       MYFREE (Polygon->Points);
       if (Polygon->Clipped)
 	poly_Free (&Polygon->Clipped);
-      if (Polygon->NoHoles)
-	poly_Free (&Polygon->NoHoles);
+      poly_FreeContours (&Polygon->NoHoles);
       memset (Polygon, 0, sizeof (PolygonType));
     }
 }
diff --git a/src/polyarea.h b/src/polyarea.h
index 42acc1a..a883750 100644
--- a/src/polyarea.h
+++ b/src/polyarea.h
@@ -158,7 +158,7 @@ POLYAREA *poly_Create(void);
 
 void poly_Free(POLYAREA **p);
 void poly_Init(POLYAREA  *p);
-void poly_Clear(POLYAREA *p);
+void poly_FreeContours(PLINE **pl);
 BOOLp poly_Valid(POLYAREA *p);
 
 enum PolygonBooleanOperation {
diff --git a/src/polygon.c b/src/polygon.c
index c679a7d..ca10f83 100644
--- a/src/polygon.c
+++ b/src/polygon.c
@@ -121,43 +121,21 @@ static double circleVerticies[] = {
 };
 
 static void
-add_noholes_polyarea (PolygonType *noholes_poly, void *user_data)
+add_noholes_polyarea (PLINE *pline, void *user_data)
 {
   PolygonType *poly = user_data;
-  PLINE *pline;
-  POLYAREA *new_area;
 
-  new_area = malloc (sizeof (POLYAREA) * 1);
-
-  /* Allocate a new PLINE, COPY the PLINE from the passed polygon */
-  poly_CopyContour (&pline, noholes_poly->Clipped->contours);
-  new_area->contours = pline;
-
-  /* Link the new POLYAREA into the NoHoles circularaly linked list */
-  if (poly->NoHoles)
-    {
-      new_area->f = poly->NoHoles;
-      new_area->b = poly->NoHoles->b;
-      poly->NoHoles->b->f = new_area;
-      poly->NoHoles->b = new_area;
-    }
-  else
-    {
-      new_area->f = new_area;
-      new_area->b = new_area;
-    }
-
-  poly->NoHoles = new_area;
+  /* Prepend the pline into the NoHoles linked list */
+  pline->next = poly->NoHoles;
+  poly->NoHoles = pline;
 }
 
 void
 ComputeNoHoles (PolygonType *poly)
 {
-  if (poly->NoHoles)
-    poly_Free (&poly->NoHoles);
-  poly->NoHoles = NULL;
+  poly_FreeContours (&poly->NoHoles);
   if (poly->Clipped)
-    NoHolesPolygonDicer (poly, add_noholes_polyarea, poly, NULL);
+    NoHolesPolygonDicer (poly, NULL, add_noholes_polyarea, poly);
   else
     printf ("Compute_noholes caught poly->Clipped = NULL\n");
   poly->NoHolesValid = 1;
@@ -1080,9 +1058,7 @@ InitClip (DataTypePtr Data, LayerTypePtr layer, PolygonType * p)
   if (p->Clipped)
     poly_Free (&p->Clipped);
   p->Clipped = original_poly (p);
-  if (p->NoHoles)
-    poly_Free (&p->NoHoles);
-  p->NoHoles = NULL;
+  poly_FreeContours (&p->NoHoles);
   if (!p->Clipped)
     return 0;
   assert (poly_Valid (p->Clipped));
@@ -1575,7 +1551,9 @@ r_NoHolesPolygonDicer (PLINE * p,
   pa->contours = p;
   if (!p->next)                 /* no holes */
     {
+      /* The callback now owns the contour */
       emit (p, user_data);
+      pa->contours = NULL;
       poly_Free (&pa);
       return;
     }
diff --git a/src/polygon1.c b/src/polygon1.c
index c0dd8e7..c23e617 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -2292,15 +2292,14 @@ poly_Create (void)
 }
 
 void
-poly_Clear (POLYAREA * P)
+poly_FreeContours (PLINE **pline)
 {
-  PLINE *p;
+  PLINE **pl;
 
-  assert (P != NULL);
-  while ((p = P->contours) != NULL)
+  while (*(pl = pline) != NULL)
     {
-      P->contours = p->next;
-      poly_DelContour (&p);
+      *pline = (*pl)->next;
+      poly_DelContour (pl);
     }
 }
 
@@ -2313,12 +2312,12 @@ poly_Free (POLYAREA ** p)
     return;
   for (cur = (*p)->f; cur != *p; cur = (*p)->f)
     {
-      poly_Clear (cur);
+      poly_FreeContours (&cur->contours);
       cur->f->b = cur->b;
       cur->b->f = cur->f;
       free (cur);
     }
-  poly_Clear (cur);
+    poly_FreeContours (&cur->contours);
   free (*p), *p = NULL;
 }
