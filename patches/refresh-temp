Bottom: b731bffd26833241284c8f6e885bc2a1c080ce7d
Top:    749fa94e8ecdaf1160a399ac16666f25655eed9b
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2010-08-28 02:11:42 +0100

Refresh of drop-in-pcb-gl-code-various-mess

---

diff --git a/src/hid/gtk/gtkhid-gdk.c b/src/hid/gtk/gtkhid-gdk.c
index e4ce956..710edc1 100644
--- a/src/hid/gtk/gtkhid-gdk.c
+++ b/src/hid/gtk/gtkhid-gdk.c
@@ -1039,7 +1039,6 @@ gboolean
 ghid_pinout_preview_expose (GtkWidget *widget,
                             GdkEventExpose *ev)
 {
-  extern HID ghid_hid;
   GhidPinoutPreview *pinout = GHID_PINOUT_PREVIEW (widget);
   GdkDrawable *save_drawable;
   double save_zoom;
@@ -1135,7 +1134,6 @@ ghid_pinout_preview_expose (GtkWidget *widget,
 GdkPixmap *
 ghid_render_pixmap (int cx, int cy, double zoom, int width, int height, int depth)
 {
-  extern HID ghid_hid;
   GdkPixmap *pixmap;
   GdkDrawable *save_drawable;
   double save_zoom;
diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index acbb842..76021a5 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -44,6 +44,10 @@ static int cur_mask = -1;
 typedef struct render_priv {
   GdkGLConfig *glconfig;
   bool trans_lines;
+  GdkColormap *colormap;
+  GdkColor bg_color;
+  GdkColor offlimits_color;
+  GdkColor grid_color;
 } render_priv;
 
 
@@ -63,7 +67,7 @@ hid_gc_struct;
 int
 ghid_set_layer (const char *name, int group, int empty)
 {
-  render_priv *priv = port->render_priv;
+  render_priv *priv = gport->render_priv;
   int idx = (group >= 0 && group < max_layer) ?
 	      PCB->LayerGroups.Entries[group][0] : group;
 
@@ -121,6 +125,7 @@ ghid_make_gc (void)
 static void
 ghid_draw_grid ()
 {
+  render_priv *priv = gport->render_priv;
   static GLfloat *points = 0;
   static int npoints = 0;
   int x1, y1, x2, y2, n, i;
@@ -131,11 +136,11 @@ ghid_draw_grid ()
   if (Vz (PCB->Grid) < MIN_GRID_DISTANCE)
     return;
 
-  if (gdk_color_parse (Settings.GridColor, &gport->grid_color))
+  if (gdk_color_parse (Settings.GridColor, &priv->grid_color))
     {
-      gport->grid_color.red ^= gport->bg_color.red;
-      gport->grid_color.green ^= gport->bg_color.green;
-      gport->grid_color.blue ^= gport->bg_color.blue;
+      priv->grid_color.red ^= priv->bg_color.red;
+      priv->grid_color.green ^= priv->bg_color.green;
+      priv->grid_color.blue ^= priv->bg_color.blue;
     }
 
   hidgl_flush_triangles (&buffer);
@@ -143,9 +148,9 @@ ghid_draw_grid ()
   glEnable (GL_COLOR_LOGIC_OP);
   glLogicOp (GL_XOR);
 
-  glColor3f (gport->grid_color.red / 65535.,
-             gport->grid_color.green / 65535.,
-             gport->grid_color.blue / 65535.);
+  glColor3f (priv->grid_color.red / 65535.,
+             priv->grid_color.green / 65535.,
+             priv->grid_color.blue / 65535.);
 
   x1 = GRIDFIT_X (SIDE_X (gport->view_x0), PCB->Grid);
   y1 = GRIDFIT_Y (SIDE_Y (gport->view_y0), PCB->Grid);
@@ -323,31 +328,33 @@ ghid_use_mask (int use_it)
 static void
 set_special_grid_color (void)
 {
-  if (!gport->colormap)
+  render_priv *priv = gport->render_priv;
+  if (!priv->colormap)
     return;
-  gport->grid_color.red ^= gport->bg_color.red;
-  gport->grid_color.green ^= gport->bg_color.green;
-  gport->grid_color.blue ^= gport->bg_color.blue;
-//  gdk_color_alloc (gport->colormap, &gport->grid_color);
+  priv->grid_color.red ^= priv->bg_color.red;
+  priv->grid_color.green ^= priv->bg_color.green;
+  priv->grid_color.blue ^= priv->bg_color.blue;
+//  gdk_color_alloc (priv->colormap, &priv->grid_color);
 }
 
 void
 ghid_set_special_colors (HID_Attribute * ha)
 {
+  render_priv *priv = gport->render_priv;
   if (!ha->name || !ha->value)
     return;
   if (!strcmp (ha->name, "background-color"))
     {
-      ghid_map_color_string (*(char **) ha->value, &gport->bg_color);
+      ghid_map_color_string (*(char **) ha->value, &priv->bg_color);
       set_special_grid_color ();
     }
   else if (!strcmp (ha->name, "off-limit-color"))
   {
-      ghid_map_color_string (*(char **) ha->value, &gport->offlimits_color);
+      ghid_map_color_string (*(char **) ha->value, &priv->offlimits_color);
     }
   else if (!strcmp (ha->name, "grid-color"))
     {
-      ghid_map_color_string (*(char **) ha->value, &gport->grid_color);
+      ghid_map_color_string (*(char **) ha->value, &priv->grid_color);
       set_special_grid_color ();
     }
 }
@@ -366,7 +373,7 @@ typedef struct
 void
 ghid_set_color (hidGC gc, const char *name)
 {
-  render_priv *priv = gport->priv;
+  render_priv *priv = gport->render_priv;
   static void *cache = NULL;
   static char *old_name = NULL;
   hidval cval;
@@ -393,22 +400,22 @@ ghid_set_color (hidGC gc, const char *name)
 
   gc->colorname = (char *) name;
 
-  if (gport->colormap == 0)
-    gport->colormap = gtk_widget_get_colormap (gport->top_window);
+  if (priv->colormap == NULL)
+    priv->colormap = gtk_widget_get_colormap (gport->top_window);
   if (strcmp (name, "erase") == 0)
     {
       gc->erase = 1;
-      r = gport->bg_color.red   / 65535.;
-      g = gport->bg_color.green / 65535.;
-      b = gport->bg_color.blue  / 65535.;
+      r = priv->bg_color.red   / 65535.;
+      g = priv->bg_color.green / 65535.;
+      b = priv->bg_color.blue  / 65535.;
     }
   else if (strcmp (name, "drill") == 0)
     {
       gc->erase = 0;
       alpha_mult = 0.85;
-      r = gport->offlimits_color.red   / 65535.;
-      g = gport->offlimits_color.green / 65535.;
-      b = gport->offlimits_color.blue  / 65535.;
+      r = priv->offlimits_color.red   / 65535.;
+      g = priv->offlimits_color.green / 65535.;
+      b = priv->offlimits_color.blue  / 65535.;
     }
   else
     {
@@ -426,9 +433,9 @@ ghid_set_color (hidGC gc, const char *name)
       if (!cc->color_set)
         {
           if (gdk_color_parse (name, &cc->color))
-            gdk_color_alloc (gport->colormap, &cc->color);
+            gdk_color_alloc (priv->colormap, &cc->color);
           else
-            gdk_color_white (gport->colormap, &cc->color);
+            gdk_color_white (priv->colormap, &cc->color);
           cc->red   = cc->color.red   / 65535.;
           cc->green = cc->color.green / 65535.;
           cc->blue  = cc->color.blue  / 65535.;
@@ -438,10 +445,10 @@ ghid_set_color (hidGC gc, const char *name)
         {
           if (!cc->xor_set)
             {
-              cc->xor_color.red = cc->color.red ^ gport->bg_color.red;
-              cc->xor_color.green = cc->color.green ^ gport->bg_color.green;
-              cc->xor_color.blue = cc->color.blue ^ gport->bg_color.blue;
-              gdk_color_alloc (gport->colormap, &cc->xor_color);
+              cc->xor_color.red = cc->color.red ^ priv->bg_color.red;
+              cc->xor_color.green = cc->color.green ^ priv->bg_color.green;
+              cc->xor_color.blue = cc->color.blue ^ priv->bg_color.blue;
+              gdk_color_alloc (priv->colormap, &cc->xor_color);
               cc->red   = cc->color.red   / 65535.;
               cc->green = cc->color.green / 65535.;
               cc->blue  = cc->color.blue  / 65535.;
@@ -891,9 +898,9 @@ ghid_drawing_area_expose_cb (GtkWidget *widget,
                              GdkEventExpose *ev,
                              GHidPort *port)
 {
+  render_priv *priv = port->render_priv;
   BoxType region;
   int eleft, eright, etop, ebottom;
-  extern HID ghid_hid;
 
   ghid_start_drawing (port);
 
@@ -916,9 +923,9 @@ ghid_drawing_area_expose_cb (GtkWidget *widget,
   glLoadIdentity ();
   glTranslatef (0.0f, 0.0f, -Z_NEAR);
 
-  glClearColor (gport->offlimits_color.red / 65535.,
-                gport->offlimits_color.green / 65535.,
-                gport->offlimits_color.blue / 65535.,
+  glClearColor (priv->offlimits_color.red / 65535.,
+                priv->offlimits_color.green / 65535.,
+                priv->offlimits_color.blue / 65535.,
                 1.);
 
   glClear (GL_COLOR_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);
@@ -931,9 +938,9 @@ ghid_drawing_area_expose_cb (GtkWidget *widget,
   eleft = Vx (0);  eright  = Vx (PCB->MaxWidth);
   etop  = Vy (0);  ebottom = Vy (PCB->MaxHeight);
 
-  glColor3f (gport->bg_color.red / 65535.,
-             gport->bg_color.green / 65535.,
-             gport->bg_color.blue / 65535.);
+  glColor3f (priv->bg_color.red / 65535.,
+             priv->bg_color.green / 65535.,
+             priv->bg_color.blue / 65535.);
 
   glBegin (GL_QUADS);
   glVertex3i (eleft,  etop,    0);
@@ -988,7 +995,7 @@ gboolean
 ghid_pinout_preview_expose (GtkWidget *widget,
                             GdkEventExpose *ev)
 {
-  extern HID ghid_hid;
+  render_priv *priv = gport->render_priv;
   GdkGLContext* pGlContext = gtk_widget_get_gl_context (widget);
   GdkGLDrawable* pGlDrawable = gtk_widget_get_gl_drawable (widget);
   GhidPinoutPreview *pinout = GHID_PINOUT_PREVIEW (widget);
@@ -1046,9 +1053,9 @@ ghid_pinout_preview_expose (GtkWidget *widget,
   glLoadIdentity ();
   glTranslatef (0.0f, 0.0f, -Z_NEAR);
 
-  glClearColor (gport->bg_color.red / 65535.,
-                gport->bg_color.green / 65535.,
-                gport->bg_color.blue / 65535.,
+  glClearColor (priv->bg_color.red / 65535.,
+                priv->bg_color.green / 65535.,
+                priv->bg_color.blue / 65535.,
                 1.);
 
   glClear (GL_COLOR_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);
@@ -1090,7 +1097,7 @@ ghid_pinout_preview_expose (GtkWidget *widget,
 GdkPixmap *
 ghid_render_pixmap (int cx, int cy, double zoom, int width, int height, int depth)
 {
-  extern HID ghid_hid;
+  render_priv *priv = gport->render_priv;
   GdkGLConfig *glconfig;
   GdkPixmap *pixmap;
   GdkGLPixmap *glpixmap;
@@ -1155,9 +1162,9 @@ ghid_render_pixmap (int cx, int cy, double zoom, int width, int height, int dept
   glLoadIdentity ();
   glTranslatef (0.0f, 0.0f, -Z_NEAR);
 
-  glClearColor (gport->bg_color.red / 65535.,
-                gport->bg_color.green / 65535.,
-                gport->bg_color.blue / 65535.,
+  glClearColor (priv->bg_color.red / 65535.,
+                priv->bg_color.green / 65535.,
+                priv->bg_color.blue / 65535.,
                 1.);
   glClearStencil (0);
   glClear (GL_COLOR_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);
diff --git a/src/hid/gtk/gtkhid-main.c b/src/hid/gtk/gtkhid-main.c
index 2a78c75..3d74913 100644
--- a/src/hid/gtk/gtkhid-main.c
+++ b/src/hid/gtk/gtkhid-main.c
@@ -33,8 +33,6 @@
 RCSID ("$Id$");
 
 
-extern HID ghid_hid;
-
 int ghid_gui_is_up = 0;
 
 static void zoom_to (double factor, int x, int y);
diff --git a/src/hid/gtk/gui-top-window.c b/src/hid/gtk/gui-top-window.c
index 29959a4..7165638 100644
--- a/src/hid/gtk/gui-top-window.c
+++ b/src/hid/gtk/gui-top-window.c
@@ -218,8 +218,6 @@ static ToggleFlagType *tflags = 0;
 static int n_tflags = 0;
 static int max_tflags = 0;
 
-extern HID ghid_hid;
-
 GhidGui _ghidgui, *ghidgui = NULL;
 
 GHidPort ghid_port, *gport;
