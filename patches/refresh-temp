Bottom: 2e7ded39c261a98279bfd01369b130ef0dcab294
Top:    0eded7a0ab5ee56c02e07d6b675c5359984c1c4d
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2009-02-01 18:46:28 +0000

Refresh of drop-in-pcb-gl-code-various-me

---

diff --git a/src/hid/gtk/gtkhid-main.c b/src/hid/gtk/gtkhid-main.c
index 0217dd8..3b1c807 100644
--- a/src/hid/gtk/gtkhid-main.c
+++ b/src/hid/gtk/gtkhid-main.c
@@ -936,113 +936,11 @@ errorCallback(GLenum errorCode)
 void
 ghid_draw_line (hidGC gc, int x1, int y1, int x2, int y2)
 {
-#define TRIANGLES_PER_CAP 15
-#define MIN_TRIANGLES_PER_CAP 3
-#define MAX_TRIANGLES_PER_CAP 1000
-  double dx1, dy1, dx2, dy2;
-  double width, angle;
-  float deltax, deltay, length;
-  float wdx, wdy;
-  int slices;
-  int circular_caps = 0;
-
-#if 0
-  if (! ClipLine (0, 0, gport->width, gport->height,
-  if (! ClipLine (0, 0, gport->width, gport->height,
-                  &dx1, &dy1, &dx2, &dy2, gc->width / gport->zoom))
-    return;
-#endif
+  double width = Vz (gc->width);
 
   USE_GC (gc);
 
-  dx1 = Vx (x1);
-  dy1 = Vy (y1);
-  dx2 = Vx (x2);
-  dy2 = Vy (y2);
-
-  width = Vz (gc->width);
-
-  if (width == 0.0)
-    width = 1.0;
-
-  deltax = dx2 - dx1;
-  deltay = dy2 - dy1;
-
-  length = sqrt (deltax * deltax + deltay * deltay);
-
-  if (length == 0) {
-    angle = 0;
-    wdx = -width / 2.;
-    wdy = 0;
-  } else {
-    wdy = deltax * width / 2. / length;
-    wdx = -deltay * width / 2. / length;
-
-    if (deltay == 0.)
-      angle = (deltax < 0) ? 270. : 90.;
-    else
-      angle = 180. / M_PI * atanl (deltax / deltay);
-
-    if (deltay < 0)
-      angle += 180.;
-  }
-
-  slices = M_PI * width / PIXELS_PER_CIRCLINE;
-
-  if (slices < MIN_TRIANGLES_PER_CAP)
-    slices = MIN_TRIANGLES_PER_CAP;
-
-  if (slices > MAX_TRIANGLES_PER_CAP)
-    slices = MAX_TRIANGLES_PER_CAP;
-
-//  slices = TRIANGLES_PER_CAP;
-
-  switch (gc->cap) {
-    case Trace_Cap:
-    case Round_Cap:
-      circular_caps = 1;
-      break;
-
-    case Square_Cap:
-    case Beveled_Cap:
-      dx1 -= deltax * width / 2. / length;
-      dy1 -= deltay * width / 2. / length;
-      dx2 += deltax * width / 2. / length;
-      dy2 += deltay * width / 2. / length;
-      break;
-  }
-
-  ensure_triangle_space (2);
-  add_triangle (dx1 - wdx, dy1 - wdy, dx2 - wdx, dy2 - wdy, dx2 + wdx, dy2 + wdy);
-  add_triangle (dx1 - wdx, dy1 - wdy, dx2 + wdx, dy2 + wdy, dx1 + wdx, dy1 + wdy);
-
-  if (circular_caps) {
-    int i;
-    float last_capx, last_capy;
-
-    ensure_triangle_space (2 * slices);
-
-    last_capx = ((float)width) / 2. * cos (angle * M_PI / 180.) + dx1;
-    last_capy = -((float)width) / 2. * sin (angle * M_PI / 180.) + dy1;
-    for (i = 0; i < slices; i++) {
-      float capx, capy;
-      capx = ((float)width) / 2. * cos (angle * M_PI / 180. + ((float)(i + 1)) * M_PI / (float)slices) + dx1;
-      capy = -((float)width) / 2. * sin (angle * M_PI / 180. + ((float)(i + 1)) * M_PI / (float)slices) + dy1;
-      add_triangle (last_capx, last_capy, capx, capy, dx1, dy1);
-      last_capx = capx;
-      last_capy = capy;
-    }
-    last_capx = -((float)width) / 2. * cos (angle * M_PI / 180.) + dx2;
-    last_capy = ((float)width) / 2. * sin (angle * M_PI / 180.) + dy2;
-    for (i = 0; i < slices; i++) {
-      float capx, capy;
-      capx = -((float)width) / 2. * cos (angle * M_PI / 180. + ((float)(i + 1)) * M_PI / (float)slices) + dx2;
-      capy = ((float)width) / 2. * sin (angle * M_PI / 180. + ((float)(i + 1)) * M_PI / (float)slices) + dy2;
-      add_triangle (last_capx, last_capy, capx, capy, dx2, dy2);
-      last_capx = capx;
-      last_capy = capy;
-    }
-  }
+  hidgl_draw_line (gc, gc->cap, width, Vx (x1), Vy (dy1), Vx (dx2), Vy (dy2));
 }
 
 void
