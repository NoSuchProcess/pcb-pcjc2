Bottom: d5bdc4719e6fa6d97cb112adce59a1b3d2a72c79
Top:    6101ebeea836128d2a756ee49190ba981817927d
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2010-06-06 15:17:12 +0100

Refresh of support-holes-in-input-polygon

---

diff --git a/src/global.h b/src/global.h
index cf983eb..bb78abc 100644
--- a/src/global.h
+++ b/src/global.h
@@ -783,19 +783,21 @@ struct drc_violation_st
 #define	UNDO_REMOVE			0x0004	/* removing objects */
 #define	UNDO_REMOVE_POINT		0x0008	/* removing polygon/... points */
 #define	UNDO_INSERT_POINT		0x0010	/* inserting polygon/... points */
-#define	UNDO_ROTATE			0x0020	/* rotations */
-#define	UNDO_CREATE			0x0040	/* creation of objects */
-#define	UNDO_MOVETOLAYER		0x0080	/* moving objects to */
-#define UNDO_FLAG			0x0100	/* toggling SELECTED flag */
-#define UNDO_CHANGESIZE			0x0200	/* change size of object */
-#define UNDO_CHANGE2NDSIZE		0x0400	/* change 2ndSize of object */
-#define UNDO_MIRROR			0x0800	/* change side of board */
-#define UNDO_CHANGECLEARSIZE		0x1000	/* change clearance size */
-#define UNDO_CHANGEMASKSIZE		0x2000	/* change mask size */
-#define UNDO_CHANGEANGLES		0x4000	/* change arc angles */
-#define UNDO_LAYERCHANGE		0x8000	/* layer new/delete/move */
-#define UNDO_CLEAR		       0x10000  /* clear/restore to polygons */
-#define UNDO_NETLISTCHANGE     	       0x20000	/* netlist change */
+#define	UNDO_REMOVE_CONTOUR		0x0020	/* removing a contour from a polygon */
+#define	UNDO_INSERT_CONTOUR		0x0040	/* inserting a contour from a polygon */
+#define	UNDO_ROTATE			0x0080	/* rotations */
+#define	UNDO_CREATE			0x0100	/* creation of objects */
+#define	UNDO_MOVETOLAYER		0x0200	/* moving objects to */
+#define	UNDO_FLAG			0x0400	/* toggling SELECTED flag */
+#define	UNDO_CHANGESIZE			0x0800	/* change size of object */
+#define	UNDO_CHANGE2NDSIZE		0x1000	/* change 2ndSize of object */
+#define	UNDO_MIRROR			0x2000	/* change side of board */
+#define	UNDO_CHANGECLEARSIZE		0x4000	/* change clearance size */
+#define	UNDO_CHANGEMASKSIZE		0x8000	/* change mask size */
+#define	UNDO_CHANGEANGLES	       0x10000	/* change arc angles */
+#define	UNDO_LAYERCHANGE	       0x20000	/* layer new/delete/move */
+#define	UNDO_CLEAR		       0x40000	/* clear/restore to polygons */
+#define	UNDO_NETLISTCHANGE	       0x80000	/* netlist change */
 
 
 /* ---------------------------------------------------------------------------
diff --git a/src/parse_y.y b/src/parse_y.y
index 48d83dd..a5b2d23 100644
--- a/src/parse_y.y
+++ b/src/parse_y.y
@@ -1127,23 +1127,35 @@ polygon_format
 		  polygonpoints
 		  polygonholes ')'
 			{
-					/* ignore junk */
-#warning FIXME FOR HOLES AS WELL
-				if (Polygon->PointN >= 3)
+				Cardinal contour, contour_start, contour_end;
+				bool bad_contour_found = false;
+				/* ignore junk */
+				for (contour = 0; contour <= Polygon->HoleIndexN; contour++)
+				  {
+				    contour_start = (contour == 0) ?
+						      0 : Polygon->HoleIndex[contour - 1];
+				    contour_end = (contour == Polygon->HoleIndexN) ?
+						 Polygon->PointN :
+						 Polygon->HoleIndex[contour];
+				    if (contour_end - contour_start < 3)
+				      bad_contour_found = true;
+				  }
+
+				if (bad_contour_found)
+				  {
+				    Message("WARNING parsing file '%s'\n"
+					    "    line:        %i\n"
+					    "    description: 'ignored polygon (< 3 points in a contour)'\n",
+					    yyfilename, yylineno);
+				    DestroyObject(yyData, POLYGON_TYPE, Layer, Polygon, Polygon);
+				  }
+				else
 				  {
 				    SetPolygonBoundingBox (Polygon);
 				    if (!Layer->polygon_tree)
 				      Layer->polygon_tree = r_create_tree (NULL, 0, 0);
 				    r_insert_entry (Layer->polygon_tree, (BoxType *) Polygon, 0);
 				  }
-				else
-				{
-					Message("WARNING parsing file '%s'\n"
-						"    line:        %i\n"
-						"    description: 'ignored polygon (< 3 points)'\n",
-						yyfilename, yylineno);
-					DestroyObject(yyData, POLYGON_TYPE, Layer, Polygon, Polygon);
-				}
 			}
 		;
 
diff --git a/src/remove.c b/src/remove.c
index fd939fa..98b9ade 100644
--- a/src/remove.c
+++ b/src/remove.c
@@ -519,6 +519,9 @@ RemovePolygonContour (LayerTypePtr Layer,
         Draw ();
     }
 
+  /* Copy the polygon to the undo list */
+  AddObjectToRemoveContourUndoList (POLYGON_TYPE, Layer, Polygon);
+
   contour_start = (contour == 0) ? 0 : Polygon->HoleIndex[contour - 1];
   contour_end = (contour == Polygon->HoleIndexN) ? Polygon->PointN :
                                                    Polygon->HoleIndex[contour];
diff --git a/src/undo.c b/src/undo.c
index 2483975..d836fd4 100644
--- a/src/undo.c
+++ b/src/undo.c
@@ -184,6 +184,8 @@ static bool UndoMove (UndoListTypePtr);
 static bool UndoRemove (UndoListTypePtr);
 static bool UndoRemovePoint (UndoListTypePtr);
 static bool UndoInsertPoint (UndoListTypePtr);
+static bool UndoRemoveContour (UndoListTypePtr);
+static bool UndoInsertContour (UndoListTypePtr);
 static bool UndoMoveToLayer (UndoListTypePtr);
 static bool UndoFlag (UndoListTypePtr);
 static bool UndoMirror (UndoListTypePtr);
@@ -778,7 +780,6 @@ UndoInsertPoint (UndoListTypePtr Entry)
 	Entry->ID = polygon->ID;
 	Entry->Kind = POLYGON_TYPE;
 	Entry->Type = UNDO_REMOVE_POINT;
-#warning Any implication for holes? Do we need to store which contour the insert was in?
 	Entry->Data.RemovedPoint.Index = polygon_point_idx (polygon, pnt);
 	DestroyObject (PCB->Data, POLYGONPOINT_TYPE, layer, polygon, pnt);
 	if (andDraw && layer->On)
@@ -792,6 +793,80 @@ UndoInsertPoint (UndoListTypePtr Entry)
 }
 
 /* ---------------------------------------------------------------------------
+ * recovers an removed polygon point
+ * returns true on success
+ */
+static bool
+UndoRemoveContour (UndoListTypePtr Entry)
+{
+  void *ptr1, *ptr2, *ptr3;
+  void *ptr1b, *ptr2b, *ptr3b;
+  PolygonType *polygon;
+  int type;
+
+  assert (Entry->Kind == POLYGON_TYPE);
+
+  /* lookup entry by it's ID */
+  type =
+    SearchObjectByID (RemoveList, &ptr1, &ptr2, &ptr3, Entry->ID,
+		      Entry->Kind);
+  if (type == NO_TYPE)
+    return false;
+
+  type =
+    SearchObjectByID (PCB->Data, &ptr1b, &ptr2b, &ptr3b, Entry->ID,
+		      Entry->Kind);
+  if (type != NO_TYPE)
+    MoveObjectToBuffer (RemoveList, PCB->Data, type, ptr1b, ptr2b, ptr3b);
+
+  if (andDraw)
+    DrawRecoveredObject (Entry->Kind, ptr1, ptr2, ptr3);
+
+  polygon = MoveObjectToBuffer (PCB->Data, RemoveList, type, ptr1, ptr2, ptr3);
+#warning WHY IS INITCLIP NEEDED HERE?
+  InitClip (PCB->Data, ptr1, polygon);
+  Entry->Type = UNDO_INSERT_CONTOUR;
+  return (true);
+}
+
+/* ---------------------------------------------------------------------------
+ * recovers an inserted polygon point
+ * returns true on success
+ */
+static bool
+UndoInsertContour (UndoListTypePtr Entry)
+{
+  void *ptr1, *ptr2, *ptr3;
+  void *ptr1b, *ptr2b, *ptr3b;
+  PolygonType *polygon;
+  int type;
+
+  assert (Entry->Kind == POLYGON_TYPE);
+
+  /* lookup entry by it's ID */
+  type =
+    SearchObjectByID (RemoveList, &ptr1, &ptr2, &ptr3, Entry->ID,
+		      Entry->Kind);
+  if (type == NO_TYPE)
+    return false;
+
+  type =
+    SearchObjectByID (PCB->Data, &ptr1b, &ptr2b, &ptr3b, Entry->ID,
+		      Entry->Kind);
+  if (type != NO_TYPE)
+    MoveObjectToBuffer (RemoveList, PCB->Data, type, ptr1b, ptr2b, ptr3b);
+
+  if (andDraw)
+    DrawRecoveredObject (Entry->Kind, ptr1, ptr2, ptr3);
+
+  polygon = MoveObjectToBuffer (PCB->Data, RemoveList, type, ptr1, ptr2, ptr3);
+#warning WHY IS INITCLIP NEEDED HERE?
+  InitClip (PCB->Data, ptr1, polygon);
+  Entry->Type = UNDO_REMOVE_CONTOUR;
+  return (true);
+}
+
+/* ---------------------------------------------------------------------------
  * undo a layer change
  * returns true on success
  */
@@ -962,6 +1037,16 @@ PerformUndo (UndoListTypePtr ptr)
 	return (UNDO_INSERT_POINT);
       break;
 
+    case UNDO_REMOVE_CONTOUR:
+      if (UndoRemoveContour (ptr))
+	return (UNDO_REMOVE_CONTOUR);
+      break;
+
+    case UNDO_INSERT_CONTOUR:
+      if (UndoInsertContour (ptr))
+	return (UNDO_INSERT_CONTOUR);
+      break;
+
     case UNDO_ROTATE:
       if (UndoRotate (ptr))
 	return (UNDO_ROTATE);
@@ -1254,6 +1339,50 @@ AddObjectToInsertPointUndoList (int Type, void *Ptr1, void *Ptr2, void *Ptr3)
 }
 
 /* ---------------------------------------------------------------------------
+ * adds an object to the list of removed contours
+ * (Actually just takes a copy of the whole polygon to restore)
+ */
+void
+AddObjectToRemoveContourUndoList (int Type,
+				  LayerType *Layer, PolygonType *Polygon)
+{
+  UndoListTypePtr undo;
+  PolygonType *copy;
+
+  if (Locked)
+    return;
+
+  if (!RemoveList)
+    RemoveList = CreateNewBuffer ();
+
+  undo = GetUndoSlot (UNDO_REMOVE_CONTOUR, OBJECT_ID (Polygon), POLYGON_TYPE);
+  copy = CopyObjectToBuffer (RemoveList, PCB->Data, Type, Layer, Polygon, NULL);
+  copy->ID = Polygon->ID;
+  copy->Flags = Polygon->Flags;
+}
+
+/* ---------------------------------------------------------------------------
+ * adds an object to the list of insert contours
+ * (Actually just takes a copy of the whole polygon to restore)
+ */
+void
+AddObjectToInsertContourUndoList (int Type,
+				  LayerType *Layer, PolygonType *Polygon)
+{
+  UndoListTypePtr undo;
+
+  if (Locked)
+    return;
+
+  if (!RemoveList)
+    RemoveList = CreateNewBuffer ();
+
+  undo = GetUndoSlot (UNDO_REMOVE_CONTOUR, OBJECT_ID (Polygon), POLYGON_TYPE);
+  CopyObjectToBuffer (RemoveList, PCB->Data, Type, Layer, Polygon, NULL);
+  /* Copy thing to ... */
+}
+
+/* ---------------------------------------------------------------------------
  * adds an object to the list of moved objects
  */
 void
diff --git a/src/undo.h b/src/undo.h
index c7a0288..0a4601f 100644
--- a/src/undo.h
+++ b/src/undo.h
@@ -47,6 +47,8 @@ void ClearUndoList (bool);
 void MoveObjectToRemoveUndoList (int, void *, void *, void *);
 void AddObjectToRemovePointUndoList (int, void *, void *, Cardinal);
 void AddObjectToInsertPointUndoList (int, void *, void *, void *);
+void AddObjectToRemoveContourUndoList (int, LayerType *, PolygonType *);
+void AddObjectToInsertContourUndoList (int, LayerType *, PolygonType *);
 void AddObjectToMoveUndoList (int, void *, void *, void *,
 			      LocationType, LocationType);
 void AddObjectToChangeNameUndoList (int, void *, void *, void *, char *);
