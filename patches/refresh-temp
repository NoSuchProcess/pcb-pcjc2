Bottom: ad29d108175fbd684c8c9c02b0fa219f6a58cd38
Top:    1a41a6e698ef0ae2f57211bc90d00d434e158f72
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-07-25 13:29:55 +0100

Refresh of hid-gtk-refactor-viewport-hand

---

diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index 9a1027d..e10f4cf 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -38,11 +38,18 @@ static hidGC current_gc = NULL;
 */
 #define USE_GC(gc) if (!use_gc(gc)) return
 
+#define FLIP_X(x)         ((priv->view.flip_x ? -(x) : (x)))
+#define FLIP_Y(y)         ((priv->view.flip_y ? -(y) : (y)))
+
 #define SIDE_X(x)         ((priv->view.flip_x ? PCB->MaxWidth  - (x) : (x)))
 #define SIDE_Y(y)         ((priv->view.flip_y ? PCB->MaxHeight - (y) : (y)))
 
-#define EVENT_TO_PCB_X(x) SIDE_X((int)((x) * priv->view.coords_per_px + gport->view_x0))
-#define EVENT_TO_PCB_Y(y) SIDE_Y((int)((y) * priv->view.voords_per_px + gport->view_y0))
+#define DRAW_X(x)         (int)((SIDE_X(x) - priv->view.x0) / priv->view.coords_per_px)
+#define DRAW_Y(y)         (int)((SIDE_Y(y) - priv->view.y0) / priv->view.coords_per_px)
+
+#define EVENT_TO_PCB_X(x) SIDE_X((int)((x) * priv->view.coords_per_px + priv->view.x0))
+#define EVENT_TO_PCB_Y(y) SIDE_Y((int)((y) * priv->view.coords_per_px + priv->view.y0))
+
 
 static int cur_mask = -1;
 
@@ -50,6 +57,12 @@ typedef struct view_data {
   double coords_per_px;
   Coord center_x;
   Coord center_y;
+
+  Coord x0; /* XXX */
+  Coord y0; /* XXX */
+  Coord width;  /* XXX */
+  Coord height; /* XXX */
+
   bool flip_x;
   bool flip_y;
   /* TODO: Rotation matrix ? */
@@ -102,9 +115,9 @@ static inline int
 Px (int x)
 {
   render_priv *priv = gport->render_priv;
-  int rv = x * priv->view.coords_per_px + gport->view_x0;
+  int rv = x * priv->view.coords_per_px + priv->view.x0;
   if (priv->view.flip_x)
-    rv = PCB->MaxWidth - (x * priv->view.coords_per_px + gport->view_x0);
+    rv = PCB->MaxWidth - (x * priv->view.coords_per_px + priv->view.x0);
   return  rv;
 }
 
@@ -112,9 +125,9 @@ static inline int
 Py (int y)
 {
   render_priv *priv = gport->render_priv;
-  int rv = y * priv->view.coords_per_px + gport->view_y0;
+  int rv = y * priv->view.coords_per_px + priv->view.y0;
   if (priv->view.flip_y)
-    rv = PCB->MaxHeight - (y * priv->view.coords_per_px + gport->view_y0);
+    rv = PCB->MaxHeight - (y * priv->view.coords_per_px + priv->view.y0);
   return  rv;
 }
 
@@ -831,25 +844,25 @@ ghid_show_crosshair (gboolean paint_new_location)
   if (x >= 0 && paint_new_location && draw_markers)
     {
       glBegin (GL_QUADS);
-      glVertex3i (SIDE_X (gport->view_x0),                            y - vcd,       z);
-      glVertex3i (SIDE_X (gport->view_x0),                            y - vcd + vcw, z);
-      glVertex3i (SIDE_X (gport->view_x0 + vcd),                      y - vcd + vcw, z);
-      glVertex3i (SIDE_X (gport->view_x0 + vcd),                      y - vcd,       z);
-
-      glVertex3i (SIDE_X (gport->view_x0 + gport->view_width),        y - vcd,       z);
-      glVertex3i (SIDE_X (gport->view_x0 + gport->view_width),        y - vcd + vcw, z);
-      glVertex3i (SIDE_X (gport->view_x0 + gport->view_width - vcd),  y - vcd + vcw, z);
-      glVertex3i (SIDE_X (gport->view_x0 + gport->view_width - vcd),  y - vcd,       z);
-
-      glVertex3i (x - vcd,       SIDE_Y (gport->view_y0),                            z);
-      glVertex3i (x - vcd,       SIDE_Y (gport->view_y0 + vcd),                      z);
-      glVertex3i (x - vcd + vcw, SIDE_Y (gport->view_y0 + vcd),                      z);
-      glVertex3i (x - vcd + vcw, SIDE_Y (gport->view_y0),                            z);
-
-      glVertex3i (x - vcd,       SIDE_Y (gport->view_y0 + gport->view_height - vcd), z);
-      glVertex3i (x - vcd,       SIDE_Y (gport->view_y0 + gport->view_height),       z);
-      glVertex3i (x - vcd + vcw, SIDE_Y (gport->view_y0 + gport->view_height),       z);
-      glVertex3i (x - vcd + vcw, SIDE_Y (gport->view_y0 + gport->view_height - vcd), z);
+      glVertex3i (SIDE_X (priv->view.x0),                            y - vcd,       z);
+      glVertex3i (SIDE_X (priv->view.x0),                            y - vcd + vcw, z);
+      glVertex3i (SIDE_X (priv->view.x0 + vcd),                      y - vcd + vcw, z);
+      glVertex3i (SIDE_X (priv->view.x0 + vcd),                      y - vcd,       z);
+
+      glVertex3i (SIDE_X (priv->view.x0 + priv->view.width),        y - vcd,       z);
+      glVertex3i (SIDE_X (priv->view.x0 + priv->view.width),        y - vcd + vcw, z);
+      glVertex3i (SIDE_X (priv->view.x0 + priv->view.width - vcd),  y - vcd + vcw, z);
+      glVertex3i (SIDE_X (priv->view.x0 + priv->view.width - vcd),  y - vcd,       z);
+
+      glVertex3i (x - vcd,       SIDE_Y (priv->view.y0),                            z);
+      glVertex3i (x - vcd,       SIDE_Y (priv->view.y0 + vcd),                      z);
+      glVertex3i (x - vcd + vcw, SIDE_Y (priv->view.y0 + vcd),                      z);
+      glVertex3i (x - vcd + vcw, SIDE_Y (priv->view.y0),                            z);
+
+      glVertex3i (x - vcd,       SIDE_Y (priv->view.y0 + priv->view.height - vcd), z);
+      glVertex3i (x - vcd,       SIDE_Y (priv->view.y0 + priv->view.height),       z);
+      glVertex3i (x - vcd + vcw, SIDE_Y (priv->view.y0 + priv->view.height),       z);
+      glVertex3i (x - vcd + vcw, SIDE_Y (priv->view.y0 + priv->view.height - vcd), z);
 
       glEnd ();
     }
@@ -897,6 +910,11 @@ ghid_init_drawing_widget (GtkWidget *widget, GHidPort *port)
 void
 ghid_drawing_area_configure_hook (GHidPort *port)
 {
+  render_priv *priv = port->render_priv;
+  GtkWidget *widget = port->drawing_area;
+
+  priv->view.width =  widget->allocation.width  * priv->view.coords_per_px;
+  priv->view.height = widget->allocation.height * priv->view.coords_per_px;
 }
 
 gboolean
@@ -976,10 +994,10 @@ ghid_drawing_area_expose_cb (GtkWidget *widget,
   glScalef ((priv->view.flip_x ? -1. : 1.) / priv->view.coords_per_px,
             (priv->view.flip_y ? -1. : 1.) / priv->view.coords_per_px,
             ((priv->view.flip_x == priv->view.flip_y) ? 1. : -1.) / priv->view.coords_per_px);
-  glTranslatef (priv->view.flip_x ?  port->view_x0 - PCB->MaxWidth  :
-                                    -port->view_x0,
-                priv->view.flip_y ?  port->view_y0 - PCB->MaxHeight :
-                                    -port->view_y0, 0);
+  glTranslatef (priv->view.flip_x ?  priv->view.x0 - PCB->MaxWidth  :
+                                    -priv->view.x0,
+                priv->view.flip_y ?  priv->view.y0 - PCB->MaxHeight :
+                                    -priv->view.y0, 0);
 
   glEnable (GL_STENCIL_TEST);
   glClearColor (port->offlimits_color.red / 65535.,
@@ -1064,20 +1082,11 @@ ghid_pinout_preview_expose (GtkWidget *widget,
   GdkGLContext* pGlContext = gtk_widget_get_gl_context (widget);
   GdkGLDrawable* pGlDrawable = gtk_widget_get_gl_drawable (widget);
   GhidPinoutPreview *pinout = GHID_PINOUT_PREVIEW (widget);
-  double save_zoom;
+  view_data save_view;
   int da_w, da_h;
-  int save_left, save_top;
-  int save_width, save_height;
-  int save_view_width, save_view_height;
   double xz, yz;
 
-  save_zoom = priv->view.coords_per_px;
-  save_width = gport->width;
-  save_height = gport->height;
-  save_left = gport->view_x0;
-  save_top = gport->view_y0;
-  save_view_width = gport->view_width;
-  save_view_height = gport->view_height;
+  save_view = priv->view;
 
   /* Setup zoom factor for drawing routines */
 
@@ -1089,12 +1098,10 @@ ghid_pinout_preview_expose (GtkWidget *widget,
   else
     priv->view.coords_per_px = yz;
 
-  gport->width = da_w;
-  gport->height = da_h;
-  gport->view_width = da_w  * priv->view.coords_per_px;
-  gport->view_height = da_h * priv->view.coords_per_px;
-  gport->view_x0 = (pinout->x_max - gport->view_width) / 2;
-  gport->view_y0 = (pinout->y_max - gport->view_height) / 2;
+  priv->view.width = da_w  * priv->view.coords_per_px;
+  priv->view.height = da_h * priv->view.coords_per_px;
+  priv->view.x0 = (pinout->x_max - priv->view.width) / 2;
+  priv->view.y0 = (pinout->y_max - priv->view.height) / 2;
 
   /* make GL-context "current" */
   if (!gdk_gl_drawable_gl_begin (pGlDrawable, pGlContext)) {
@@ -1135,10 +1142,10 @@ ghid_pinout_preview_expose (GtkWidget *widget,
   glPushMatrix ();
   glScalef ((priv->view.flip_x ? -1. : 1.) / priv->view.coords_per_px,
             (priv->view.flip_y ? -1. : 1.) / priv->view.coords_per_px, 1);
-  glTranslatef (priv->view.flip_x ?  gport->view_x0 - PCB->MaxWidth  :
-                                    -gport->view_x0,
-                priv->view.flip_y ?  gport->view_y0 - PCB->MaxHeight :
-                                    -gport->view_y0, 0);
+  glTranslatef (priv->view.flip_x ?  priv->view.x0 - PCB->MaxWidth  :
+                                    -priv->view.x0,
+                priv->view.flip_y ?  priv->view.y0 - PCB->MaxHeight :
+                                    -priv->view.y0, 0);
   hid_expose_callback (&ghid_hid, NULL, &pinout->element);
   hidgl_flush_triangles (&buffer);
   glPopMatrix ();
@@ -1152,13 +1159,7 @@ ghid_pinout_preview_expose (GtkWidget *widget,
   gport->render_priv->in_context = false;
   gdk_gl_drawable_gl_end (pGlDrawable);
 
-  priv->view.coords_per_px = save_zoom;
-  gport->width = save_width;
-  gport->height = save_height;
-  gport->view_x0 = save_left;
-  gport->view_y0 = save_top;
-  gport->view_width = save_view_width;
-  gport->view_height = save_view_height;
+  priv->view = save_view;
 
   return FALSE;
 }
@@ -1173,19 +1174,10 @@ ghid_render_pixmap (int cx, int cy, double zoom, int width, int height, int dept
   GdkGLPixmap *glpixmap;
   GdkGLContext* glcontext;
   GdkGLDrawable* gldrawable;
-  double save_zoom;
-  int save_left, save_top;
-  int save_width, save_height;
-  int save_view_width, save_view_height;
+  view_data save_view;
   BoxType region;
 
-  save_zoom = priv->view.coords_per_px;
-  save_width = gport->width;
-  save_height = gport->height;
-  save_left = gport->view_x0;
-  save_top = gport->view_y0;
-  save_view_width = gport->view_width;
-  save_view_height = gport->view_height;
+  save_view = priv->view;
 
   /* Setup rendering context for drawing routines
    */
@@ -1202,14 +1194,12 @@ ghid_render_pixmap (int cx, int cy, double zoom, int width, int height, int dept
   /* Setup zoom factor for drawing routines */
 
   priv->view.coords_per_px = zoom;
-  gport->width = width;
-  gport->height = height;
-  gport->view_width = width   * priv->view.coords_per_px;
-  gport->view_height = height * priv->view.coords_per_px;
-  gport->view_x0 = priv->view.flip_x ? PCB->MaxWidth - cx : cx;
-  gport->view_x0 -= gport->view_height / 2;
-  gport->view_y0 = priv->view.flip_y ? PCB->MaxHeight - cy : cy;
-  gport->view_y0 -= gport->view_width  / 2;
+  priv->view.width = width   * priv->view.coords_per_px;
+  priv->view.height = height * priv->view.coords_per_px;
+  priv->view.x0 = priv->view.flip_x ? PCB->MaxWidth - cx : cx;
+  priv->view.x0 -= priv->view.height / 2;
+  priv->view.y0 = priv->view.flip_y ? PCB->MaxHeight - cy : cy;
+  priv->view.y0 -= priv->view.width  / 2;
 
   /* make GL-context "current" */
   if (!gdk_gl_drawable_gl_begin (gldrawable, glcontext)) {
@@ -1247,10 +1237,10 @@ ghid_render_pixmap (int cx, int cy, double zoom, int width, int height, int dept
   glPushMatrix ();
   glScalef ((priv->view.flip_x ? -1. : 1.) / priv->view.coords_per_px,
             (priv->view.flip_y ? -1. : 1.) / priv->view.coords_per_px, 1);
-  glTranslatef (priv->view.flip_x ?  gport->view_x0 - PCB->MaxWidth  :
-                                    -gport->view_x0,
-                priv->view.flip_y ?  gport->view_y0 - PCB->MaxHeight :
-                               -gport->view_y0, 0);
+  glTranslatef (priv->view.flip_x ?  priv->view.x0 - PCB->MaxWidth  :
+                                    -priv->view.x0,
+                priv->view.flip_y ?  priv->view.y0 - PCB->MaxHeight :
+                               -priv->view.y0, 0);
   region.X1 = MIN(Px(0), Px(gport->width + 1));
   region.Y1 = MIN(Py(0), Py(gport->height + 1));
   region.X2 = MAX(Px(0), Px(gport->width + 1));
@@ -1270,13 +1260,7 @@ ghid_render_pixmap (int cx, int cy, double zoom, int width, int height, int dept
   g_object_unref (glconfig);
   g_object_unref (glcontext);
 
-  priv->view.coords_per_px = save_zoom;
-  gport->width = save_width;
-  gport->height = save_height;
-  gport->view_x0 = save_left;
-  gport->view_y0 = save_top;
-  gport->view_width = save_view_width;
-  gport->view_height = save_view_height;
+  priv->view = save_view;
 
   return pixmap;
 }
@@ -1309,10 +1293,10 @@ ghid_request_debug_draw (void)
   glScalef ((priv->view.flip_x ? -1. : 1.) / priv->view.coords_per_px,
             (priv->view.flip_y ? -1. : 1.) / priv->view.coords_per_px,
             (priv->view.flip_x == priv->view.flip_y) ? 1. : -1.);
-  glTranslatef (priv->view.flip_x ?  port->view_x0 - PCB->MaxWidth  :
-                                    -port->view_x0,
-                priv->view.flip_y ?  port->view_y0 - PCB->MaxHeight :
-                                    -port->view_y0, 0);
+  glTranslatef (priv->view.flip_x ?  priv->view.x0 - PCB->MaxWidth  :
+                                    -priv->view.x0,
+                priv->view.flip_y ?  priv->view.y0 - PCB->MaxHeight :
+                                    -priv->view.y0, 0);
 
   return &ghid_hid;
 }
@@ -1363,29 +1347,29 @@ ghid_pcb_to_event_coords (Coord pcb_x, Coord pcb_y, int *event_x, int *event_y)
 }
 
 static void
-finish_pan (void)
+finish_pan (render_priv *priv)
 {
   /* don't pan so far to the right that we see way past the right edge of the
    * board, or so far down that we see way past the bottom edge of the board.
    */
-  gport->view_x0 = MIN (gport->view_x0, PCB->MaxWidth  - gport->view_width);
-  gport->view_y0 = MIN (gport->view_y0, PCB->MaxHeight - gport->view_height);
+  priv->view.x0 = MIN (priv->view.x0, PCB->MaxWidth  - priv->view.width);
+  priv->view.y0 = MIN (priv->view.y0, PCB->MaxHeight - priv->view.height);
 
   /* don't view above or to the left of the board... ever */
-  gport->view_x0 = MAX (0, gport->view_x0);
-  gport->view_y0 = MAX (0, gport->view_y0);
+  priv->view.x0 = MAX (0, priv->view.x0);
+  priv->view.y0 = MAX (0, priv->view.y0);
 
   /* if we can see the entire board and some, then zoom to fit */
-  if (gport->view_width  > PCB->MaxWidth  &&
-      gport->view_height > PCB->MaxHeight)
+  if (priv->view.width  > PCB->MaxWidth  &&
+      priv->view.height > PCB->MaxHeight)
     {
       ghid_zoom_view_fit ();
       return;
     }
 
   ghidgui->adjustment_changed_holdoff = TRUE;
-  gtk_range_set_value (GTK_RANGE (ghidgui->h_range), gport->view_x0);
-  gtk_range_set_value (GTK_RANGE (ghidgui->v_range), gport->view_y0);
+  gtk_range_set_value (GTK_RANGE (ghidgui->h_range), priv->view.x0);
+  gtk_range_set_value (GTK_RANGE (ghidgui->v_range), priv->view.y0);
   ghidgui->adjustment_changed_holdoff = FALSE;
 
   ghid_port_ranges_changed();
@@ -1396,10 +1380,10 @@ ghid_pan_view_abs (Coord pcb_x, Coord pcb_y, int widget_x, int widget_y)
 {
   render_priv *priv = gport->render_priv;
 
-  gport->view_x0 = MAX (0, SIDE_X (pcb_x) - widget_x * priv->view.coords_per_px);
-  gport->view_y0 = MAX (0, SIDE_Y (pcb_y) - widget_y * priv->view.coords_per_px);
+  priv->view.x0 = MAX (0, SIDE_X (pcb_x) - widget_x * priv->view.coords_per_px);
+  priv->view.y0 = MAX (0, SIDE_Y (pcb_y) - widget_y * priv->view.coords_per_px);
 
-  finish_pan ();
+  finish_pan (priv);
 }
 
 void
@@ -1407,10 +1391,10 @@ ghid_pan_view_rel_to_visible (double fraction_x, double fraction_y)
 {
   render_priv *priv = gport->render_priv;
 
-  gport->view_x0 = MAX (0, SIDE_X (pcb_x) - widget_x * priv->view.coords_per_px);
-  gport->view_y0 = MAX (0, SIDE_Y (pcb_y) - widget_y * priv->view.coords_per_px);
+  priv->view.x0 = MAX (0, priv->view.x0 + FLIP_X (priv->view.width) * fraction_x);
+  priv->view.y0 = MAX (0, priv->view.y0 + FLIP_Y (priv->view.height) * fraction_y);
 
-  finish_pan ();
+  finish_pan (priv);
 }
 
 
@@ -1418,7 +1402,7 @@ ghid_pan_view_rel_to_visible (double fraction_x, double fraction_y)
  * zoom value is PCB units per screen pixel.  Larger numbers mean zooming
  * out - the largest value means you are looking at the whole board.
  *
- * gport->view_width and gport->view_height are in PCB coordinates
+ * priv->view.width and priv->view.height are in PCB coordinates
  */
 
 void
@@ -1433,26 +1417,26 @@ ghid_zoom_view_abs (Coord center_x, Coord center_y, double new_zoom)
    * the entire board just fits inside the viewport
    */
   min_zoom = 1;
-  max_zoom = MAX (PCB->MaxWidth  / gport->width,
-                  PCB->MaxHeight / gport->height);
+  max_zoom = MAX (PCB->MaxWidth  / gport->drawing_area->allocation.width,
+                  PCB->MaxHeight / gport->drawing_area->allocation.height);
   new_zoom = MIN (MAX (min_zoom, new_zoom), max_zoom);
 
   if (priv->view.coords_per_px == new_zoom)
     return;
 
-  xtmp = (SIDE_X (center_x) - gport->view_x0) / (double)gport->view_width;
-  ytmp = (SIDE_Y (center_y) - gport->view_y0) / (double)gport->view_height;
+  xtmp = (SIDE_X (center_x) - priv->view.x0) / (double)priv->view.width;
+  ytmp = (SIDE_Y (center_y) - priv->view.y0) / (double)priv->view.height;
 
   priv->view.coords_per_px = new_zoom;
   pixel_slop = new_zoom;
-  ghid_port_ranges_scale (FALSE);
+  ghid_port_ranges_scale ();
 
-  gport->view_x0 = MAX (0, SIDE_X (center_x) - xtmp * gport->view_width);
-  gport->view_y0 = MAX (0, SIDE_Y (center_y) - ytmp * gport->view_height);
+  priv->view.x0 = MAX (0, SIDE_X (center_x) - xtmp * priv->view.width);
+  priv->view.y0 = MAX (0, SIDE_Y (center_y) - ytmp * priv->view.height);
 
   ghidgui->adjustment_changed_holdoff = TRUE;
-  gtk_range_set_value (GTK_RANGE (ghidgui->h_range), gport->view_x0);
-  gtk_range_set_value (GTK_RANGE (ghidgui->v_range), gport->view_y0);
+  gtk_range_set_value (GTK_RANGE (ghidgui->h_range), priv->view.x0);
+  gtk_range_set_value (GTK_RANGE (ghidgui->v_range), priv->view.y0);
   ghidgui->adjustment_changed_holdoff = FALSE;
 
   ghid_port_ranges_changed ();
@@ -1462,14 +1446,16 @@ ghid_zoom_view_abs (Coord center_x, Coord center_y, double new_zoom)
 void
 ghid_zoom_view_rel (Coord center_x, Coord center_y, double factor)
 {
+  render_priv *priv = gport->render_priv;
+
   ghid_zoom_view_abs (center_x, center_y, priv->view.coords_per_px * factor);
 }
 
 void
 ghid_zoom_view_fit (void)
 {
-  ghid_zoom_view_abs (0, 0, MAX (PCB->MaxWidth  / gport->width,
-                                 PCB->MaxHeight / gport->height));
+  ghid_zoom_view_abs (0, 0, MAX (PCB->MaxWidth  / gport->drawing_area->allocation.width,
+                                 PCB->MaxHeight / gport->drawing_area->allocation.height));
 }
 
 void
@@ -1522,7 +1508,7 @@ draw_lead_user (render_priv *priv)
 
       /* Draw an arc at radius */
       hidgl_draw_arc (width, priv->lead_user_x, priv->lead_user_y,
-                      radius, radius, 0, 360, gport->zoom);
+                      radius, radius, 0, 360, priv->view.coords_per_px);
     }
 
   hidgl_flush_triangles (&buffer);
diff --git a/src/hid/gtk/gtkhid-main.c b/src/hid/gtk/gtkhid-main.c
index 0040660..21dcd8d 100644
--- a/src/hid/gtk/gtkhid-main.c
+++ b/src/hid/gtk/gtkhid-main.c
@@ -1463,8 +1463,8 @@ Center(int argc, char **argv, int x, int y)
     AFAIL (center);
 
   /* Aim to put the given x, y PCB coordinates in the center of the widget */
-  widget_x = gport->width / 2;
-  widget_y = gport->height / 2;
+  widget_x = gport->drawing_area->allocation.width / 2;
+  widget_y = gport->drawing_area->allocation.height / 2;
 
   ghid_pan_view_abs (x, y, widget_x, widget_y);
 
diff --git a/src/hid/gtk/gui-output-events.c b/src/hid/gtk/gui-output-events.c
index 55bfc4b..423c37d 100644
--- a/src/hid/gtk/gui-output-events.c
+++ b/src/hid/gtk/gui-output-events.c
@@ -432,14 +432,11 @@ ghid_port_drawing_area_configure_event_cb (GtkWidget * widget,
 {
   static gboolean first_time_done;
 
-  gport->width = ev->width;
-  gport->height = ev->height;
-
   if (gport->pixmap)
     gdk_pixmap_unref (gport->pixmap);
 
   gport->pixmap = gdk_pixmap_new (widget->window,
-				  gport->width, gport->height, -1);
+				  ev->width, ev->height, -1);
   gport->drawable = gport->pixmap;
 
   if (!first_time_done)
