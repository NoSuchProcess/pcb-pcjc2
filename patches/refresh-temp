Bottom: 74e6046eb2972d5ef1c23e826fa4ab042b795a2d
Top:    a65c20292323863b962926c64bc57f6813a7ee07
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2015-02-15 22:21:47 +0000

Refresh of partial-fix-for-broken-polygon

---

diff --git a/src/polygon1.c b/src/polygon1.c
index 46ca374..866c605 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -1805,7 +1805,7 @@ M_B_AREA_Collect (jmp_buf * e, POLYAREA * bfst, POLYAREA ** contours,
 	{
 	  next = &((*cur)->next);
 	  if ((*cur)->Flags.status == ISECTED)
-            {
+	    {
 	      /* Check for missed intersect contours here. These can come from
 	       * cases where contours of A and B touch at a single-vertex, so
 	       * are labeled ISECTED for processing, yet our JUMP rules for a
@@ -1815,23 +1815,23 @@ M_B_AREA_Collect (jmp_buf * e, POLYAREA * bfst, POLYAREA ** contours,
 	       * NB: There Could be grief if the JUMP rule is inconsistent in
 	       *     its interpretation from each side of the vertex.
 	       */
-            switch (action)
-              {
-              case PBO_UNITE:
-                Collect ('B', e, *cur, contours, holes, UniteS_Rule, UniteJ_Rule);
-                break;
-              case PBO_ISECT:
-                Collect ('B', e, *cur, contours, holes, IsectS_Rule, IsectJ_Rule);
-                break;
-              case PBO_XOR:
-                Collect ('B', e, *cur, contours, holes, XorS_Rule, XorJ_Rule);
-                break;
-              case PBO_SUB:
-                Collect ('B', e, *cur, contours, holes, SubS_Rule, SubJ_Rule);
-                break;
-              }
+	    switch (action)
+	      {
+	      case PBO_UNITE:
+		Collect ('B', e, *cur, contours, holes, UniteS_Rule, UniteJ_Rule);
+		break;
+	      case PBO_ISECT:
+		Collect ('B', e, *cur, contours, holes, IsectS_Rule, IsectJ_Rule);
+		break;
+	      case PBO_XOR:
+		Collect ('B', e, *cur, contours, holes, XorS_Rule, XorJ_Rule);
+		break;
+	      case PBO_SUB:
+		Collect ('B', e, *cur, contours, holes, SubS_Rule, SubJ_Rule);
+		break;
+	      }
 	    }
-          else if ((*cur)->Flags.status == INSIDE)
+	  else if ((*cur)->Flags.status == INSIDE)
 	    switch (action)
 	      {
 	      case PBO_XOR:
