Bottom: c5cdc7682f56697c7748fe6882d4e29f6715d1f1
Top:    7da87bc982bebc3d6327a6616024c5dd045181ea
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-09-05 18:18:12 +0100

Refresh of hid-gtk-replace-usage-of-the-d

---

diff --git a/src/hid/gtk/gui-dialog-print.c b/src/hid/gtk/gui-dialog-print.c
index 5d7d003..13da605 100644
--- a/src/hid/gtk/gui-dialog-print.c
+++ b/src/hid/gtk/gui-dialog-print.c
@@ -113,8 +113,11 @@ ghid_attribute_dialog (HID_Attribute * attrs,
   GtkWidget *widget;
   GHidPort *out = &ghid_port;
   int i, j, n;
+  GtkTooltips *tips;
   int rc = 0;
 
+  tips = gtk_tooltips_new ();
+
   dialog = gtk_dialog_new_with_buttons (_(title),
 					GTK_WINDOW (out->top_window),
 					(GtkDialogFlags)(GTK_DIALOG_MODAL
@@ -148,7 +151,7 @@ ghid_attribute_dialog (HID_Attribute * attrs,
 	case HID_Label:
 	  widget = gtk_label_new (attrs[j].name);
 	  gtk_box_pack_start (GTK_BOX (vbox), widget, FALSE, FALSE, 0);
-	  gtk_widget_set_tooltip_text (widget, attrs[j].help_text);
+	  gtk_tooltips_set_tip (tips, widget, attrs[j].help_text, NULL);
 	  break;
 
 	case HID_Integer:
@@ -164,7 +167,8 @@ ghid_attribute_dialog (HID_Attribute * attrs,
 			    attrs[j].min_val, attrs[j].max_val, 1.0, 1.0, 0, 0,
 			    intspinner_changed_cb,
 			    &(attrs[j].default_val.int_value), FALSE, NULL);
-	  gtk_widget_set_tooltip_text (widget, attrs[j].help_text);
+
+	  gtk_tooltips_set_tip (tips, widget, attrs[j].help_text, NULL);
 
 	  widget = gtk_label_new (attrs[j].name);
 	  gtk_box_pack_start (GTK_BOX (hbox), widget, FALSE, FALSE, 0);
@@ -181,7 +185,7 @@ ghid_attribute_dialog (HID_Attribute * attrs,
 	  if(attrs[j].default_val.str_value != NULL)
 	    gtk_entry_set_text (GTK_ENTRY (entry),
 				attrs[j].default_val.str_value);
-	  gtk_widget_set_tooltip_text (entry, attrs[j].help_text);
+	  gtk_tooltips_set_tip (tips, entry, attrs[j].help_text, NULL);
 	  g_signal_connect (G_OBJECT (entry), "changed",
 			    G_CALLBACK (coordentry_changed_cb),
 			    &(attrs[j].default_val.coord_value));
@@ -205,7 +209,7 @@ ghid_attribute_dialog (HID_Attribute * attrs,
 			    dblspinner_changed_cb,
 			    &(attrs[j].default_val.real_value), FALSE, NULL);
 
-	  gtk_widget_set_tooltip_text (widget, attrs[j].help_text);
+	  gtk_tooltips_set_tip (tips, widget, attrs[j].help_text, NULL);
 
 	  widget = gtk_label_new (attrs[j].name);
 	  gtk_box_pack_start (GTK_BOX (hbox), widget, FALSE, FALSE, 0);
@@ -220,7 +224,7 @@ ghid_attribute_dialog (HID_Attribute * attrs,
 	  if(attrs[j].default_val.str_value != NULL)
 	    gtk_entry_set_text (GTK_ENTRY (entry),
 				attrs[j].default_val.str_value);
-	  gtk_widget_set_tooltip_text (entry, attrs[j].help_text);
+	  gtk_tooltips_set_tip (tips, entry, attrs[j].help_text, NULL);
 	  g_signal_connect (G_OBJECT (entry), "changed",
 			    G_CALLBACK (entry_changed_cb),
 			    &(attrs[j].default_val.str_value));
@@ -236,7 +240,7 @@ ghid_attribute_dialog (HID_Attribute * attrs,
 				       TRUE, FALSE, FALSE, 0, set_flag_cb,
 				       &(attrs[j].default_val.int_value),
 				       attrs[j].name);
-	  gtk_widget_set_tooltip_text (widget, attrs[j].help_text);
+	  gtk_tooltips_set_tip (tips, widget, attrs[j].help_text, NULL);
 	  break;
 
 	case HID_Enum:
@@ -244,9 +248,16 @@ ghid_attribute_dialog (HID_Attribute * attrs,
 	  gtk_box_pack_start (GTK_BOX (vbox), hbox, FALSE, FALSE, 0);
 
         do_enum:
+	  /* 
+	   * We have to put the combo_box inside of an event_box in
+	   * order for tooltips to work.
+	   */
+	  widget = gtk_event_box_new ();
+	  gtk_tooltips_set_tip (tips, widget, attrs[j].help_text, NULL);
+	  gtk_box_pack_start (GTK_BOX (hbox), widget, FALSE, FALSE, 0);
+
 	  combo = gtk_combo_box_new_text ();
-	  gtk_widget_set_tooltip_text (combo, attrs[j].help_text);
-	  gtk_box_pack_start (GTK_BOX (hbox), combo, FALSE, FALSE, 0);
+	  gtk_container_add (GTK_CONTAINER (widget), combo);
 	  g_signal_connect (G_OBJECT (combo), "changed",
 			    G_CALLBACK (enum_changed_cb),
 			    &(attrs[j].default_val.int_value));
@@ -283,7 +294,7 @@ ghid_attribute_dialog (HID_Attribute * attrs,
 			    0,
 			    dblspinner_changed_cb,
 			    &(attrs[j].default_val.real_value), FALSE, NULL);
-	  gtk_widget_set_tooltip_text (widget, attrs[j].help_text);
+	  gtk_tooltips_set_tip (tips, widget, attrs[j].help_text, NULL);
 
           goto do_enum;
 	  break;
@@ -298,7 +309,7 @@ ghid_attribute_dialog (HID_Attribute * attrs,
 			    G_CALLBACK (entry_changed_cb),
 			    &(attrs[j].default_val.str_value));
 
-	  gtk_widget_set_tooltip_text (entry, attrs[j].help_text);
+	  gtk_tooltips_set_tip (tips, entry, attrs[j].help_text, NULL);
 	  break;
 
 	case HID_Unit:
@@ -307,10 +318,16 @@ ghid_attribute_dialog (HID_Attribute * attrs,
 
 	  hbox = gtk_hbox_new (FALSE, 4);
 	  gtk_box_pack_start (GTK_BOX (vbox), hbox, FALSE, FALSE, 0);
+	  /* 
+	   * We have to put the combo_box inside of an event_box in
+	   * order for tooltips to work.
+	   */
+	  widget = gtk_event_box_new ();
+	  gtk_tooltips_set_tip (tips, widget, attrs[j].help_text, NULL);
+	  gtk_box_pack_start (GTK_BOX (hbox), widget, FALSE, FALSE, 0);
 
 	  combo = gtk_combo_box_new_text ();
-	  gtk_widget_set_tooltip_text (combo, attrs[j].help_text);
-	  gtk_box_pack_start (GTK_BOX (hbox), combo, FALSE, FALSE, 0);
+	  gtk_container_add (GTK_CONTAINER (widget), combo);
 	  g_signal_connect (G_OBJECT (combo), "changed",
 			    G_CALLBACK (enum_changed_cb),
 			    &(attrs[j].default_val.int_value));
@@ -416,8 +433,11 @@ ghid_dialog_export (void)
   GHidPort *out = &ghid_port;
   int i;
   HID **hids;
+  GtkTooltips *tips;
   gboolean no_exporter = TRUE;
 
+  tips = gtk_tooltips_new ();
+
   export_dialog = gtk_dialog_new_with_buttons (_("PCB Export Layout"),
 					       GTK_WINDOW (out->top_window),
 					       (GtkDialogFlags)(GTK_DIALOG_MODAL
@@ -447,7 +467,7 @@ ghid_dialog_export (void)
 	{
 	  no_exporter = FALSE;
 	  button = gtk_button_new_with_label (hids[i]->name);
-	  gtk_widget_set_tooltip_text (button, hids[i]->description);
+	  gtk_tooltips_set_tip (tips, button, hids[i]->description, NULL);
 	  gtk_box_pack_start (GTK_BOX (vbox), button, FALSE, FALSE, 0);
 	  g_signal_connect (G_OBJECT (button), "clicked",
 			    G_CALLBACK (exporter_clicked_cb), hids[i]);
