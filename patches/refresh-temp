Bottom: 457a1835377500699f3a020cbbb708d0def27ed3
Top:    48e88917c8b2f8e3002c2e98abe3ad1d381a3654
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-12-24 16:25:55 +0000

Refresh of major-re-write-to-drawing-rout

---

diff --git a/src/draw.h b/src/draw.h
index 9bc0784..e0d522f 100644
--- a/src/draw.h
+++ b/src/draw.h
@@ -77,13 +77,13 @@ void DrawHoles (bool draw_plated, bool draw_unplated, const BoxType *drawn_area)
 void PrintAssembly (int side, const BoxType *drawn_area);
 
 /* TEMPORARY */
-void ClearPad (PadTypePtr, bool);
-void DrawPinOrViaLowLevel (PinTypePtr, bool);
-void DrawPlainPin (PinTypePtr, bool);
-void DrawPlainVia (PinTypePtr, bool);
-void DrawRegularText (LayerTypePtr, TextTypePtr);
-void DrawEMark (ElementTypePtr, Coord, Coord, bool);
-void DrawHole (PinTypePtr);
+void ClearPad (PadType *, bool);
+void DrawPinOrViaLowLevel (PinType *, bool);
+void DrawPlainPin (PinType *, bool);
+void DrawPlainVia (PinType *, bool);
+void DrawRegularText (LayerType *, TextType *);
+void DrawEMark (ElementType *, Coord, Coord, bool);
+void DrawHole (PinType *);
 void DrawRats (const BoxType *);
 /* TEMPORARY */
 
diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index 31bce4d..f848476 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -984,14 +984,14 @@ ghid_screen_update (void)
 static int
 EMark_callback (const BoxType * b, void *cl)
 {
-  ElementTypePtr element = (ElementTypePtr) b;
+  ElementType *element = (ElementType *) b;
 
   DrawEMark (element, element->MarkX, element->MarkY, !FRONT (element));
   return 1;
 }
 
 static void
-SetPVColor (PinTypePtr Pin, int Type)
+SetPVColor (PinType *Pin, int Type)
 {
   char *color;
 
@@ -1028,7 +1028,7 @@ SetPVColor (PinTypePtr Pin, int Type)
 }
 
 static void
-SetPVColor_inlayer (PinTypePtr Pin, LayerTypePtr Layer, int Type)
+SetPVColor_inlayer (PinType *Pin, LayerType *Layer, int Type)
 {
   char *color;
 
@@ -1092,7 +1092,7 @@ _draw_pv_name (PinType *pv)
 }
 
 static void
-_draw_pv (PinTypePtr pv, bool draw_hole)
+_draw_pv (PinType *pv, bool draw_hole)
 {
   if (TEST_FLAG (THINDRAWFLAG, PCB))
     gui->thindraw_pcb_pv (Output.fgGC, Output.fgGC, pv, draw_hole, false);
@@ -1104,7 +1104,7 @@ _draw_pv (PinTypePtr pv, bool draw_hole)
 }
 
 static void
-draw_pin (PinTypePtr pin, bool draw_hole)
+draw_pin (PinType *pin, bool draw_hole)
 {
   SetPVColor (pin, PIN_TYPE);
   _draw_pv (pin, draw_hole);
@@ -1120,13 +1120,13 @@ pin_callback (const BoxType * b, void *cl)
 static int
 pin_inlayer_callback (const BoxType * b, void *cl)
 {
-  SetPVColor_inlayer ((PinTypePtr) b, cl, PIN_TYPE);
+  SetPVColor_inlayer ((PinType *) b, cl, PIN_TYPE);
   _draw_pv ((PinType *) b, false);
   return 1;
 }
 
 static void
-draw_via (PinTypePtr via, bool draw_hole)
+draw_via (PinType *via, bool draw_hole)
 {
   SetPVColor (via, VIA_TYPE);
   _draw_pv (via, draw_hole);
@@ -1142,7 +1142,7 @@ via_callback (const BoxType * b, void *cl)
 static int
 via_inlayer_callback (const BoxType * b, void *cl)
 {
-  SetPVColor_inlayer ((PinTypePtr) b, cl, VIA_TYPE);
+  SetPVColor_inlayer ((PinType *) b, cl, VIA_TYPE);
   _draw_pv ((PinType *) b, TEST_FLAG (THINDRAWFLAG, PCB));
   return 1;
 }
@@ -1228,7 +1228,7 @@ draw_pad (PadType *pad)
 static int
 pad_callback (const BoxType * b, void *cl)
 {
-  PadTypePtr pad = (PadTypePtr) b;
+  PadType *pad = (PadType *) b;
   int *side = cl;
 
   if (ON_SIDE (pad, *side))
@@ -1240,7 +1240,7 @@ pad_callback (const BoxType * b, void *cl)
 static int
 hole_callback (const BoxType * b, void *cl)
 {
-  PinTypePtr pv = (PinTypePtr) b;
+  PinType *pv = (PinType *) b;
   int plated = cl ? *(int *) cl : -1;
 
   if ((plated == 0 && !TEST_FLAG (HOLEFLAG, pv)) ||
@@ -1350,7 +1350,7 @@ draw_arc (LayerType *layer, ArcType *arc)
 static int
 arc_callback (const BoxType * b, void *cl)
 {
-  draw_arc ((LayerTypePtr) cl, (ArcTypePtr) b);
+  draw_arc ((LayerType *) cl, (ArcType *) b);
   return 1;
 }
 
@@ -1375,7 +1375,7 @@ text_callback (const BoxType * b, void *cl)
 }
 
 static void
-DrawPlainPolygon (LayerTypePtr Layer, PolygonTypePtr Polygon, const BoxType *drawn_area)
+DrawPlainPolygon (LayerType *Layer, PolygonType *Polygon, const BoxType *drawn_area)
 {
   static char *color;
 
@@ -1413,7 +1413,7 @@ DrawPlainPolygon (LayerTypePtr Layer, PolygonTypePtr Polygon, const BoxType *dra
 
 struct poly_info
 {
-  LayerTypePtr Layer;
+  LayerType *Layer;
   const BoxType *drawn_area;
 };
 
@@ -1422,14 +1422,14 @@ poly_callback (const BoxType * b, void *cl)
 {
   struct poly_info *i = (struct poly_info *) cl;
 
-  DrawPlainPolygon (i->Layer, (PolygonTypePtr) b, i->drawn_area);
+  DrawPlainPolygon (i->Layer, (PolygonType *) b, i->drawn_area);
   return 1;
 }
 
 static int
 clearPin_callback (const BoxType * b, void *cl)
 {
-  PinType *pin = (PinTypePtr) b;
+  PinType *pin = (PinType *) b;
   if (TEST_FLAG (THINDRAWFLAG, PCB) || TEST_FLAG (THINDRAWPOLYFLAG, PCB))
     gui->thindraw_pcb_pv (Output.pmGC, Output.pmGC, pin, false, true);
   else
@@ -1440,7 +1440,7 @@ clearPin_callback (const BoxType * b, void *cl)
 static int
 clearPad_callback (const BoxType * b, void *cl)
 {
-  PadTypePtr pad = (PadTypePtr) b;
+  PadType *pad = (PadType *) b;
   int *side = cl;
   if (ON_SIDE (pad, *side) && pad->Mask)
     _draw_pad (Output.pmGC, pad, true, true);
@@ -1450,7 +1450,7 @@ clearPad_callback (const BoxType * b, void *cl)
 static int
 clearPin_callback_solid (const BoxType * b, void *cl)
 {
-  PinTypePtr pin = (PinTypePtr) b;
+  PinType *pin = (PinType *) b;
   gui->fill_pcb_pv (Output.pmGC, Output.pmGC, pin, false, true);
   return 1;
 }
@@ -1458,7 +1458,7 @@ clearPin_callback_solid (const BoxType * b, void *cl)
 static int
 clearPad_callback_solid (const BoxType * b, void *cl)
 {
-  PadTypePtr pad = (PadTypePtr) b;
+  PadType *pad = (PadType *) b;
   int *side = cl;
   if (ON_SIDE (pad, *side) && pad->Mask)
     gui->fill_pcb_pad (Output.pmGC, pad, true, true);
@@ -1503,7 +1503,7 @@ GhidDrawLayerGroup (int group, const BoxType * screen)
   int layernum;
   int side;
   struct poly_info info;
-  LayerTypePtr Layer;
+  LayerType *Layer;
   int n_entries = PCB->LayerGroups.Number[group];
   Cardinal *layers = PCB->LayerGroups.Entries[group];
   int first_run = 1;
@@ -1671,7 +1671,7 @@ via_hole_cyl_callback (const BoxType * b, void *cl)
 }
 
 void
-ghid_draw_everything (BoxTypePtr drawn_area)
+ghid_draw_everything (BoxType *drawn_area)
 {
   render_priv *priv = gport->render_priv;
   int i, ngroups;
