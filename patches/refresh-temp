Bottom: c4145ef56f22eae8c4d23df2b77ed6b314e6ed45
Top:    0d5872f2afb6d3593535b2d47f0c4906fc629e2d
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2010-11-21 18:47:02 +0000

Refresh of add-vrml-model-rendering-suppo

---

diff --git a/src/hid/common/hidgl_geometry.c b/src/hid/common/hidgl_geometry.c
index 003af8e..7f775ea 100644
--- a/src/hid/common/hidgl_geometry.c
+++ b/src/hid/common/hidgl_geometry.c
@@ -36,14 +36,14 @@
 #define GL_GLEXT_PROTOTYPES 1
 #include <GL/gl.h>
 #include <GL/glu.h>
-#include "hidgl_material.h"
+#include "hidgl_geometry.h"
 
 #ifdef HAVE_LIBDMALLOC
 #include <dmalloc.h>
 #endif
 
 /* Opaque data-structure keeping a geometry object */
-struct _hidgl_material {
+struct _hidgl_geometry {
   char *name;
 
 };
diff --git a/src/hid/common/hidgl_geometry.h b/src/hid/common/hidgl_geometry.h
index 9673d87..cf8b60a 100644
--- a/src/hid/common/hidgl_geometry.h
+++ b/src/hid/common/hidgl_geometry.h
@@ -22,10 +22,43 @@
 
 #ifndef __HIDGL_GEOMETRY_INCLUDED__
 #define __HIDGL_GEOMETRY_INCLUDED__
+typedef struct _hidgl_geometry hidgl_geometry;
 
-#include "hidgl_shaders.h"
+struct geometry_class {
+  void create (void); /* How do we create a geometry without some concrete data? */
+  void draw (void);   /* What assumptions are made about the GL state prior to calling this? */
+  void free (void);   /* Clean up any internal state and delete */
+};
+
+/* Subclasses required / planned / thought of :
+ *
+ * hidgl_tristrip_geometry
+ * hidgl_triangle_geometry
+ * hidgl_mesh_geometry (EXAMPLE)
+ * hidgl_brep_geometry (EXAMPLE)
+ */
+
+"tristrip_geometry and traiangle geometry probably share some common data-storage stuff?"
+"Should we do like VRML and keep data-definition separate from the defining geometry?"
+"Should we create a data-storage class for reading the meshes / vertex data into?"
+""
+
+Need something which looks a little like the following:
+
+Group / transform node
+  (Transform properties)
+  (Children)-+------------> Shape -+-> Appearance / material
+             |                     `-> Geometry
+             |------------> Shape -+-> Appearance / material
+             |                     `-> Geometry
+             |------------> Shape -+-> Appearance / material
+             |                     `-> Geometry
+             `---------> Transform
+                            (Children)-+---> Shape -+-> Appearance / material
+                                       |            `-> Geometry
+                                       `---> Shape -+-> Appearance / material
+                                                    `-> Geometry
 
-typedef struct _hidgl_material hidgl_material;
 
 hidgl_geometry *hidgl_geometry_new (char *name);
 void hidgl_geometry_free (hidgl_geometry *geometry);
