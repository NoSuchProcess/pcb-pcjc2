Bottom: 2efb98e05a79f0359cff1ef728721591ec32e57f
Top:    f9a78cdaadf938eb439295bc3d6e07df9cb7be9b
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2010-11-21 19:30:24 +0000

Refresh of add-vrml-model-rendering-suppo

---

diff --git a/src/hid/common/hidgl_package_vrml.c b/src/hid/common/hidgl_package_vrml.c
index 5ae16ad..aa30bfd 100644
--- a/src/hid/common/hidgl_package_vrml.c
+++ b/src/hid/common/hidgl_package_vrml.c
@@ -19,6 +19,8 @@
 #define GL_GLEXT_PROTOTYPES 1
 #include <GL/gl.h>
 
+#include "hidgl_matrix.h"
+
 #ifdef HAVE_LIBDMALLOC
 #include <dmalloc.h>
 #endif
@@ -64,8 +66,6 @@ load_texture_from_png (char *filename)
 }
 
 
-static void invert_4x4 (float m[4][4], float out[4][4]);
-
 static GLfloat *debug_lines = NULL;
 static int no_debug_lines = 0;
 static int max_debug_lines = 0;
@@ -364,77 +364,3 @@ hidgl_draw_vrml (ElementType *element, float surface_depth, float board_thicknes
   hidgl_parse_vrml ("test.wrl");
   one_shot = false;
 }
-
-static float
-determinant_4x4 (float m[4][4])
-{
-  float det;
-  det = m[0][3] * m[1][2] * m[2][1] * m[3][0]-m[0][2] * m[1][3] * m[2][1] * m[3][0] -
-        m[0][3] * m[1][1] * m[2][2] * m[3][0]+m[0][1] * m[1][3] * m[2][2] * m[3][0] +
-        m[0][2] * m[1][1] * m[2][3] * m[3][0]-m[0][1] * m[1][2] * m[2][3] * m[3][0] -
-        m[0][3] * m[1][2] * m[2][0] * m[3][1]+m[0][2] * m[1][3] * m[2][0] * m[3][1] +
-        m[0][3] * m[1][0] * m[2][2] * m[3][1]-m[0][0] * m[1][3] * m[2][2] * m[3][1] -
-        m[0][2] * m[1][0] * m[2][3] * m[3][1]+m[0][0] * m[1][2] * m[2][3] * m[3][1] +
-        m[0][3] * m[1][1] * m[2][0] * m[3][2]-m[0][1] * m[1][3] * m[2][0] * m[3][2] -
-        m[0][3] * m[1][0] * m[2][1] * m[3][2]+m[0][0] * m[1][3] * m[2][1] * m[3][2] +
-        m[0][1] * m[1][0] * m[2][3] * m[3][2]-m[0][0] * m[1][1] * m[2][3] * m[3][2] -
-        m[0][2] * m[1][1] * m[2][0] * m[3][3]+m[0][1] * m[1][2] * m[2][0] * m[3][3] +
-        m[0][2] * m[1][0] * m[2][1] * m[3][3]-m[0][0] * m[1][2] * m[2][1] * m[3][3] -
-        m[0][1] * m[1][0] * m[2][2] * m[3][3]+m[0][0] * m[1][1] * m[2][2] * m[3][3];
-   return det;
-}
-
-static void
-invert_4x4 (float m[4][4], float out[4][4])
-{
-  float scale = 1 / determinant_4x4 (m);
-
-  out[0][0] = (m[1][2] * m[2][3] * m[3][1] - m[1][3] * m[2][2] * m[3][1] +
-               m[1][3] * m[2][1] * m[3][2] - m[1][1] * m[2][3] * m[3][2] -
-               m[1][2] * m[2][1] * m[3][3] + m[1][1] * m[2][2] * m[3][3]) * scale;
-  out[0][1] = (m[0][3] * m[2][2] * m[3][1] - m[0][2] * m[2][3] * m[3][1] -
-               m[0][3] * m[2][1] * m[3][2] + m[0][1] * m[2][3] * m[3][2] +
-               m[0][2] * m[2][1] * m[3][3] - m[0][1] * m[2][2] * m[3][3]) * scale;
-  out[0][2] = (m[0][2] * m[1][3] * m[3][1] - m[0][3] * m[1][2] * m[3][1] +
-               m[0][3] * m[1][1] * m[3][2] - m[0][1] * m[1][3] * m[3][2] -
-               m[0][2] * m[1][1] * m[3][3] + m[0][1] * m[1][2] * m[3][3]) * scale;
-  out[0][3] = (m[0][3] * m[1][2] * m[2][1] - m[0][2] * m[1][3] * m[2][1] -
-               m[0][3] * m[1][1] * m[2][2] + m[0][1] * m[1][3] * m[2][2] +
-               m[0][2] * m[1][1] * m[2][3] - m[0][1] * m[1][2] * m[2][3]) * scale;
-  out[1][0] = (m[1][3] * m[2][2] * m[3][0] - m[1][2] * m[2][3] * m[3][0] -
-               m[1][3] * m[2][0] * m[3][2] + m[1][0] * m[2][3] * m[3][2] +
-               m[1][2] * m[2][0] * m[3][3] - m[1][0] * m[2][2] * m[3][3]) * scale;
-  out[1][1] = (m[0][2] * m[2][3] * m[3][0] - m[0][3] * m[2][2] * m[3][0] +
-               m[0][3] * m[2][0] * m[3][2] - m[0][0] * m[2][3] * m[3][2] -
-               m[0][2] * m[2][0] * m[3][3] + m[0][0] * m[2][2] * m[3][3]) * scale;
-  out[1][2] = (m[0][3] * m[1][2] * m[3][0] - m[0][2] * m[1][3] * m[3][0] -
-               m[0][3] * m[1][0] * m[3][2] + m[0][0] * m[1][3] * m[3][2] +
-               m[0][2] * m[1][0] * m[3][3] - m[0][0] * m[1][2] * m[3][3]) * scale;
-  out[1][3] = (m[0][2] * m[1][3] * m[2][0] - m[0][3] * m[1][2] * m[2][0] +
-               m[0][3] * m[1][0] * m[2][2] - m[0][0] * m[1][3] * m[2][2] -
-               m[0][2] * m[1][0] * m[2][3] + m[0][0] * m[1][2] * m[2][3]) * scale;
-  out[2][0] = (m[1][1] * m[2][3] * m[3][0] - m[1][3] * m[2][1] * m[3][0] +
-               m[1][3] * m[2][0] * m[3][1] - m[1][0] * m[2][3] * m[3][1] -
-               m[1][1] * m[2][0] * m[3][3] + m[1][0] * m[2][1] * m[3][3]) * scale;
-  out[2][1] = (m[0][3] * m[2][1] * m[3][0] - m[0][1] * m[2][3] * m[3][0] -
-               m[0][3] * m[2][0] * m[3][1] + m[0][0] * m[2][3] * m[3][1] +
-               m[0][1] * m[2][0] * m[3][3] - m[0][0] * m[2][1] * m[3][3]) * scale;
-  out[2][2] = (m[0][1] * m[1][3] * m[3][0] - m[0][3] * m[1][1] * m[3][0] +
-               m[0][3] * m[1][0] * m[3][1] - m[0][0] * m[1][3] * m[3][1] -
-               m[0][1] * m[1][0] * m[3][3] + m[0][0] * m[1][1] * m[3][3]) * scale;
-  out[2][3] = (m[0][3] * m[1][1] * m[2][0] - m[0][1] * m[1][3] * m[2][0] -
-               m[0][3] * m[1][0] * m[2][1] + m[0][0] * m[1][3] * m[2][1] +
-               m[0][1] * m[1][0] * m[2][3] - m[0][0] * m[1][1] * m[2][3]) * scale;
-  out[3][0] = (m[1][2] * m[2][1] * m[3][0] - m[1][1] * m[2][2] * m[3][0] -
-               m[1][2] * m[2][0] * m[3][1] + m[1][0] * m[2][2] * m[3][1] +
-               m[1][1] * m[2][0] * m[3][2] - m[1][0] * m[2][1] * m[3][2]) * scale;
-  out[3][1] = (m[0][1] * m[2][2] * m[3][0] - m[0][2] * m[2][1] * m[3][0] +
-               m[0][2] * m[2][0] * m[3][1] - m[0][0] * m[2][2] * m[3][1] -
-               m[0][1] * m[2][0] * m[3][2] + m[0][0] * m[2][1] * m[3][2]) * scale;
-  out[3][2] = (m[0][2] * m[1][1] * m[3][0] - m[0][1] * m[1][2] * m[3][0] -
-               m[0][2] * m[1][0] * m[3][1] + m[0][0] * m[1][2] * m[3][1] +
-               m[0][1] * m[1][0] * m[3][2] - m[0][0] * m[1][1] * m[3][2]) * scale;
-  out[3][3] = (m[0][1] * m[1][2] * m[2][0] - m[0][2] * m[1][1] * m[2][0] +
-               m[0][2] * m[1][0] * m[2][1] - m[0][0] * m[1][2] * m[2][1] -
-               m[0][1] * m[1][0] * m[2][2] + m[0][0] * m[1][1] * m[2][2]) * scale;
-}
