Bottom: e7ddd615669d7626a1f3939938add16ae892537e
Top:    1078ed5affa4c0e57a9799cfb49d91762a800cd2
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-05-03 17:43:28 +0100

Refresh of background-image-support

---

diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index a04f189..412542e 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -158,34 +158,57 @@ ghid_draw_grid (BoxTypePtr drawn_area)
 static void
 ghid_draw_bg_image (void)
 {
-  static int texture_handle = 0;
-  int bits_per_sample;
-  gboolean has_alpha;
-  unsigned char *pixels;
+  static GLuint texture_handle = 0;
 
   if (!ghidgui->bg_pixbuf)
     return;
 
   if (texture_handle == 0)
     {
-      bits_per_sample = gdk_pixbuf_get_bits_per_sample (ghidgui->bg_pixbuf);
-      has_alpha = gdk_pixbuf_get_has_alpha (ghidgui->bg_pixbuf);
-      pixels = gdk_pixbuf_get_pixels (ghidgui->bg_pixbuf);
-
+      int width =             gdk_pixbuf_get_width (ghidgui->bg_pixbuf);
+      int height =            gdk_pixbuf_get_height (ghidgui->bg_pixbuf);
+      int rowstride =         gdk_pixbuf_get_rowstride (ghidgui->bg_pixbuf);
+      // gboolean has_alpha =    gdk_pixbuf_get_has_alpha (ghidgui->bg_pixbuf);
+      int bits_per_sample =   gdk_pixbuf_get_bits_per_sample (ghidgui->bg_pixbuf);
+      int n_channels =        gdk_pixbuf_get_n_channels (ghidgui->bg_pixbuf);
+      unsigned char *pixels = gdk_pixbuf_get_pixels (ghidgui->bg_pixbuf);
+
+      g_warn_if_fail (bits_per_sample == 8);
+      g_warn_if_fail (rowstride == width * n_channels);
+
+      glGenTextures (1, &texture_handle);
+      glBindTexture (GL_TEXTURE_2D, texture_handle);
+
+      glTexImage2D (GL_TEXTURE_2D, 0, GL_RGB, width, height, 0,
+                    (n_channels == 4) ? GL_RGBA : GL_RGB, GL_UNSIGNED_BYTE, pixels);
     }
 
   if (texture_handle == 0)
     return;
 
+  glBindTexture (GL_TEXTURE_2D, texture_handle);
+
+  glTexEnvf (GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
+  glTexParameterf (GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
+  glTexParameterf (GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
+  glTexParameterf (GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);
+  glTexParameterf (GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);
+  glEnable (GL_TEXTURE_2D);
+
   /* Render a quad with the background as a texture */
 
   glBegin (GL_QUADS);
+  glTexCoord2d (0., 0.);
   glVertex3i (0,             0,              0);
+  glTexCoord2d (1., 0.);
   glVertex3i (PCB->MaxWidth, 0,              0);
+  glTexCoord2d (1., 1.);
   glVertex3i (PCB->MaxWidth, PCB->MaxHeight, 0);
+  glTexCoord2d (0., 1.);
   glVertex3i (0,             PCB->MaxHeight, 0);
   glEnd ();
 
+  glDisable (GL_TEXTURE_2D);
 }
 
 void
