Bottom: ac7b2c0ca586020626ab7a89ef7e82b05d11c085
Top:    9579a8373d964b31b2b216b2dd8ff04162b57d75
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2009-11-07 11:13:12 +0000

Refresh of gl-try-rendering-to-textures-f

---

diff --git a/src/hid/gtk/gtkhid-main.c b/src/hid/gtk/gtkhid-main.c
index ce6a891..0984bef 100644
--- a/src/hid/gtk/gtkhid-main.c
+++ b/src/hid/gtk/gtkhid-main.c
@@ -613,31 +613,37 @@ ghid_set_layer (const char *name, int group, int empty)
   glBindFramebufferEXT (GL_FRAMEBUFFER_EXT, 0);
   glBindTexture (GL_TEXTURE_2D, tex_name);
 
+  glPushMatrix ();
+  glLoadIdentity ();
+
   /* Use the texture on a big quad, onto the window */
   glEnable (GL_TEXTURE_2D);
   glBegin (GL_QUADS);
   glColor4f (1.0f, 1.0f, 1.0f, 1.0f);
   glTexCoord2f (  0,   1);
-  glVertex2f   (  0,   0);
+  glVertex2f   (  -1, -1);
   glTexCoord2f (  0,   0);
-  glVertex2f   (  0, Vz (PCB->MaxHeight));
+  glVertex2f   (  -1,   1);
   glTexCoord2f (  1,   0);
-  glVertex2f   (Vz (PCB->MaxWidth), Vz (PCB->MaxHeight));
+  glVertex2f   (  1,   1);
   glTexCoord2f (  1,   1);
-  glVertex2f   (Vz (PCB->MaxWidth),   0);
+  glVertex2f   (  1,   -1);
   glEnd ();
   glDisable (GL_TEXTURE_2D);
   glBindTexture (GL_TEXTURE_2D, 0);
 
+  glPopMatrix ();
+
   if ((errCode = glGetError()) != GL_NO_ERROR) {
       errString = gluErrorString(errCode);
      fprintf (stderr, "5OpenGL Error: %s\n", errString);
   }
 
   /* Setup for the next layer */
-  if (group != -99)
+  if (group != -99) {
     glBindFramebufferEXT (GL_FRAMEBUFFER_EXT, fbo_name);
-  else
+    glFramebufferTexture2DEXT (GL_FRAMEBUFFER_EXT, GL_COLOR_ATTACHMENT0_EXT, GL_TEXTURE_2D, tex_name, 0);
+  } else
     return 0;
 
   if ((errCode = glGetError()) != GL_NO_ERROR) {
diff --git a/src/hid/gtk/gui-output-events.c b/src/hid/gtk/gui-output-events.c
index 7b47c59..67c92b4 100644
--- a/src/hid/gtk/gui-output-events.c
+++ b/src/hid/gtk/gui-output-events.c
@@ -1779,9 +1779,9 @@ ghid_port_drawing_area_expose_event_cb (GtkWidget * widget,
   glMatrixMode (GL_PROJECTION);
   glLoadIdentity ();
 //  glOrtho (0, widget->allocation.width, widget->allocation.height, 0, -100000, 100000);
-//  glOrtho (-1, 1, -1, 1, 100, 10000);
+  glOrtho (-1, 1, -1, 1, -100, 10000);
 //  glFrustum (0, widget->allocation.width, widget->allocation.height, 0, 10, 1000);
-  glFrustum (-1, 1, -1, 1, 10, 10000);
+//  glFrustum (-1, 1, -1, 1, 10, 10000);
 //  gluPerspective (30, widget->allocation.width / widget->allocation.height, 10, 1000);
   glMatrixMode (GL_MODELVIEW);
   glLoadIdentity ();
@@ -1876,8 +1876,11 @@ ghid_port_drawing_area_expose_event_cb (GtkWidget * widget,
   region.Y1 = MIN (Py (min_y), Py (max_y + 1));
   region.Y2 = MAX (Py (min_y), Py (max_y + 1));
 
-  eleft = Vx (0);  eright  = Vx (PCB->MaxWidth);
-  etop  = Vy (0);  ebottom = Vy (PCB->MaxHeight);
+//  eleft = Vx (0);  eright  = Vx (PCB->MaxWidth);
+//  etop  = Vy (0);  ebottom = Vy (PCB->MaxHeight);
+
+  eleft = ev->area.x; eright = ev->area.x + ev->area.width;
+  etop = ev->area.y; ebottom = ev->area.y + ev->area.height;
 
   glColor3f (gport->bg_color.red / 65535.,
              gport->bg_color.green / 65535.,
@@ -1895,8 +1898,8 @@ ghid_port_drawing_area_expose_event_cb (GtkWidget * widget,
   glTexImage2D (GL_TEXTURE_2D,
                 0, /* Level */
                 GL_RGBA8, /* Int. format */
-                eright - eleft + 1, /* Width */
-                ebottom - etop + 1, /* Height */
+                widget->allocation.width, /* Width */
+                widget->allocation.height, /* Height */
                 0,      /* Border */
                 GL_RGBA, /* Format */
                 GL_INT, /* Type */
@@ -1911,7 +1914,7 @@ ghid_port_drawing_area_expose_event_cb (GtkWidget * widget,
   CHECK_FRAMEBUFFER_STATUS ()
   glBindTexture (GL_TEXTURE_2D, 0);
 
-  glClearColor (1., 1., 1., 1.);
+  glClearColor (1., 1., 1., 0.);
   glClear (GL_COLOR_BUFFER_BIT);
 
 //  glBindFramebufferEXT (GL_FRAMEBUFFER_EXT, 0);
