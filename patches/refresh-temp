Bottom: 84f7e23c2723b723b4eeec3e8b88a9db72ab82e9
Top:    6d6bbaf327df96659e3b4cd5d6e71fa3aac55926
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2009-02-10 19:39:28 +0000

Refresh of nearly-working

---

diff --git a/src/polygon1.c b/src/polygon1.c
index 993c0d4..e3a058d 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -1083,7 +1083,6 @@ M_POLYAREA_label_separated (PLINE * afst, POLYAREA * b, BOOLp touch)
   PLINE *curc = afst;
 
   for (curc = afst; curc != NULL; curc = curc->next) {
-//    printf ("Labelling separated contour\n");
     if (cntr_label_POLYAREA (curc, b, touch) && touch)
       return TRUE;
   }
@@ -1160,7 +1159,6 @@ PutContour (jmp_buf * e, PLINE * cntr, POLYAREA ** contours, PLINE ** holes,
 	{
 	  cntr->next = parent_contour->next;
 	  parent_contour->next = cntr;
-//          printf ("Put Contour adding a hole directly to its parent\n");
           if (owner != parent)
             {
               if (owner != NULL)
@@ -1172,7 +1170,6 @@ PutContour (jmp_buf * e, PLINE * cntr, POLYAREA ** contours, PLINE ** holes,
 	{
 	  cntr->next = *holes;
 	  *holes = cntr;	/* let cntr be 1st hole in list */
-//          printf ("Put Contour adding a hole\n");
           /* We don't insert the holes into an r-tree,
            * they just form a linked list */
           if (owner != NULL)
@@ -1221,13 +1218,10 @@ find_inside (const BoxType *b, void *cl)
   PLINE *check = (PLINE *) b;
   /* Do test on check to see if it inside info->want_inside */
   /* If it is: */
-//  printf ("find_inside: Checking a possible hole\n");
   if (check->Flags.orient == PLF_DIR) {
-//    printf ("Think we just got the main contour?\n");
     return 0;
   }
   if (poly_ContourInContour (info->want_inside, check)) {
-//    printf ("find_inside: Found a hole inside the one we're checking\n");
     info->result = check;
     longjmp (info->jb, 1);
   }
@@ -1797,10 +1791,8 @@ M_POLYAREA_separate_isected (jmp_buf * e, POLYAREA ** pieces,
   PLINE *curc, *next, *prev;
   int finished;
 
-  if (a == NULL) {
-//    printf ("M_POLYAREA_separate_isected: No polygon pieces to play with\n");
+  if (a == NULL)
     return;
-  }
 
   /* TODO: STASH ENOUGH INFORMATION EARLIER ON, SO WE CAN REMOVE THE INTERSECTED
            CONTOURS WITHOUT HAVING TO WALK THE FULL DATA-STRUCTURE LOOKING FOR THEM. */
@@ -1833,14 +1825,12 @@ M_POLYAREA_separate_isected (jmp_buf * e, POLYAREA ** pieces,
           curc->next = *isected;
           *isected = curc;
         } else if (hole_contour) {
-//          printf ("Hole contour, perhaps would have been saved the trouble if we mass-evicted children\n");
           /* Link into the list of holes */
           curc->next = *holes;
           *holes = curc;
         }
 
         if (is_first && is_last) {
-//          printf ("M_POLYAREA_separate_isected: Deleted / removed the whole polygon piece\n");
           remove_polyarea (pieces, a);
           poly_Free (&a); /* NB: Sets a to NULL */
         }
@@ -1882,7 +1872,6 @@ find_inside_m_pa (const BoxType *b, void *cl)
   if (check->Flags.status == ISECTED)
     return 0;
   if (cntr_in_M_POLYAREA (check, info->want_inside, FALSE)) {
-//    printf ("find_inside_m_pa: Found a hole inside the one we're checking\n");
     info->result = check;
     longjmp (info->jb, 1);
   }
@@ -1904,12 +1893,8 @@ M_POLYAREA_update_primary (jmp_buf * e, POLYAREA ** pieces,
   int del_outside = 0;
   int finished;
 
-//  printf ("M_POLYAREA_update_primary %p, %p, %i\n", pieces, holes, action);
-
-  if (a == NULL) {
-//    printf ("M_POLYAREA_update_primary: No polygon pieces to play with\n");
+  if (a == NULL)
     return;
-  }
 
   switch (action) {
     case PBO_ISECT:
@@ -1954,7 +1939,6 @@ M_POLYAREA_update_primary (jmp_buf * e, POLYAREA ** pieces,
           cntr_in_M_POLYAREA (a->contours, bpa, FALSE)) {
 
         /* Delete this contour, all children -> holes queue */
-//        printf ("Outer contour needs to be deleted, and children moved to hole queue\n");
 
         /* Delete the outer contour */
         curc = a->contours;
@@ -2068,18 +2052,15 @@ M_POLYAREA_update_primary (jmp_buf * e, POLYAREA ** pieces,
         if (del_contour) {
           /* Delete the contour */
           poly_DelContour (&curc); /* NB: Sets curc to NULL */
-//          printf ("Deleting contour we don't want in the result\n");
         } else if (hole_contour) {
           /* Link into the list of holes */
           curc->next = *holes;
           *holes = curc;
-//          printf ("Separating a hole (belonging to a moved contour)\n");
         } else {
           assert (0);
         }
 
         if (is_first && is_last) {
-//          printf ("M_POLYAREA_update_primary: Deleted / removed the whole polygon piece\n");
           remove_polyarea (pieces, a);
           poly_Free (&a); /* NB: Sets a to NULL */
         }
@@ -2219,8 +2200,6 @@ M_POLYAREA_Collect_separated (jmp_buf * e, PLINE * afst, POLYAREA ** contours,
 {
   PLINE **cur, **next;
 
-//  printf ("M_POLYAREA_Collect_separated %p, %p, %p, %i, %i\n", afst, contours, holes, action, maybe);
-
   assert (a != NULL);
 
   for (cur = &afst; *cur != NULL; cur = next) {
