Bottom: 96924898c0f886d768af87580420c9a81d354f34
Top:    d7122ab3aeb2abef2386a23dc468a7909e2bf56c
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2009-01-24 16:35:53 +0000

Refresh of add-some-shared-code-for-gl-dr

---

diff --git a/src/hid/common/hidgl.c b/src/hid/common/hidgl.c
index b2ea263..c95cc7f 100644
--- a/src/hid/common/hidgl.c
+++ b/src/hid/common/hidgl.c
@@ -1,6 +1,6 @@
 /* $Id: */
 
-#if 0 /* DISABLE EVERYTHING! */
+#if 1 /* DISABLE EVERYTHING! */
 
 #ifdef HAVE_CONFIG_H
 #include "config.h"
@@ -13,7 +13,7 @@
 #endif
 #include <math.h>
 #include <time.h>
-
+#include <assert.h>
 
 #include "action.h"
 #include "crosshair.h"
@@ -40,6 +40,7 @@
 
 RCSID ("$Id: $");
 
+#define USE_GC(x)
 
 #define TRIANGLE_ARRAY_SIZE 5000
 static GLfloat triangle_array [2 * 3 * TRIANGLE_ARRAY_SIZE];
@@ -93,78 +94,11 @@ add_triangle (GLfloat x1, GLfloat y1,
   triangle_count++;
 }
 
-static int cur_mask = -1;
+//static int cur_mask = -1;
 
-/* Px converts view->pcb, Vx converts pcb->view */
-      
-static inline int 
-Vx (int x)
-{     
-  int rv;
-  if (hidgl_flip_x) 
-    rv = (PCB->MaxWidth - x - gport->view_x0) / gport->zoom + 0.5;
-  else
-    rv = (x - gport->view_x0) / gport->zoom + 0.5;
-  return rv;
-}       
-      
-static inline int 
-Vx2 (int x)
-{     
-  return (x - gport->view_x0) / gport->zoom + 0.5;
-}       
-      
-static inline int
-Vy (int y)
-{         
-  int rv;
-  if (hidgl_flip_y)
-    rv = (PCB->MaxHeight - y - gport->view_y0) / gport->zoom + 0.5;
-  else
-    rv = (y - gport->view_y0) / gport->zoom + 0.5;
-  return rv;
-}     
-        
-static inline int 
-Vy2 (int y)
-{     
-  return (y - gport->view_y0) / gport->zoom + 0.5;
-}       
-      
-static inline int
-Vz (int z)
-{           
-  return z / gport->zoom + 0.5;
-}         
-                
-static inline int
-Px (int x)
-{  
-  int rv = x * gport->zoom + gport->view_x0;
-  if (hidgl_flip_x)
-    rv = PCB->MaxWidth - (x * gport->zoom + gport->view_x0);
-  return  rv;
-}  
-
-static inline int
-Py (int y)
-{  
-  int rv = y * gport->zoom + gport->view_y0;
-  if (hidgl_flip_y)
-    rv = PCB->MaxHeight - (y * gport->zoom + gport->view_y0);
-  return  rv;
-}  
-
-static inline int  
-Pz (int z)
-{
-  return (z * gport->zoom);
-}
-
-/* ------------------------------------------------------------ */
 
 /* ------------------------------------------------------------ */
-
+#if 0
 /*static*/ void
 draw_grid ()
 {
@@ -248,9 +182,10 @@ draw_grid ()
   glFlush ();
 }
 
+#endif
 /* ------------------------------------------------------------ */
 
-
+#if 0
 int
 hidgl_set_layer (const char *name, int group, int empty)
 {
@@ -329,6 +264,8 @@ hidgl_use_mask (int use_it)
     }
   cur_mask = use_it;
 }
+#endif
+
 
 typedef struct
 {
@@ -342,178 +279,6 @@ typedef struct
 } ColorCache;
 
 
-  /* Config helper functions for when the user changes color preferences.
-     |  set_special colors used in the gtkhid.
-   */
-static void
-set_special_grid_color (void)
-{
-  if (!gport->colormap)
-    return;
-  gport->grid_color.red ^= gport->bg_color.red;
-  gport->grid_color.green ^= gport->bg_color.green;
-  gport->grid_color.blue ^= gport->bg_color.blue;
-//  gdk_color_alloc (gport->colormap, &gport->grid_color);
-}
-
-void
-hidgl_set_special_colors (HID_Attribute * ha)
-{
-  if (!ha->name || !ha->value)
-    return;
-  if (!strcmp (ha->name, "background-color"))
-    {
-      hidgl_map_color_string (*(char **) ha->value, &gport->bg_color);
-      set_special_grid_color ();
-    }
-  else if (!strcmp (ha->name, "off-limit-color"))
-  {
-      hidgl_map_color_string (*(char **) ha->value, &gport->offlimits_color);
-    }
-  else if (!strcmp (ha->name, "grid-color"))
-    {
-      hidgl_map_color_string (*(char **) ha->value, &gport->grid_color);
-      set_special_grid_color ();
-    }
-}
-
-
-void
-hidgl_set_color (hidGC gc, const char *name)
-{
-  static void *cache = NULL;
-  static char *old_name = NULL;
-  hidval cval;
-  ColorCache *cc;
-  double alpha_mult = 1.0;
-  double r, g, b, a;
-  a = 1.0;
-
-  if (old_name != NULL)
-    {
-      if (strcmp (name, old_name) == 0)
-        return;
-      free (old_name);
-    }
-
-  old_name = strdup (name);
-
-  if (name == NULL)
-    {
-      fprintf (stderr, "%s():  name = NULL, setting to magenta\n",
-               __FUNCTION__);
-      name = "magenta";
-    }
-
-  gc->colorname = (char *) name;
-
-  if (gport->colormap == 0)
-    gport->colormap = gtk_widget_get_colormap (gport->top_window);
-  if (strcmp (name, "erase") == 0)
-    {
-      gc->erase = 1;
-      r = gport->bg_color.red   / 65535.;
-      g = gport->bg_color.green / 65535.;
-      b = gport->bg_color.blue  / 65535.;
-    }
-  else if (strcmp (name, "drill") == 0)
-    {
-      gc->erase = 0;
-      alpha_mult = 0.85;
-      r = gport->offlimits_color.red   / 65535.;
-      g = gport->offlimits_color.green / 65535.;
-      b = gport->offlimits_color.blue  / 65535.;
-    }
-  else
-    {
-      alpha_mult = 0.7;
-      if (hid_cache_color (0, name, &cval, &cache))
-        cc = (ColorCache *) cval.ptr;
-      else
-        {
-          cc = (ColorCache *) malloc (sizeof (ColorCache));
-          memset (cc, 0, sizeof (*cc));
-          cval.ptr = cc;
-          hid_cache_color (1, name, &cval, &cache);
-        }
-
-      if (!cc->color_set)
-        {
-          if (gdk_color_parse (name, &cc->color))
-            gdk_color_alloc (gport->colormap, &cc->color);
-          else
-            gdk_color_white (gport->colormap, &cc->color);
-          cc->red   = cc->color.red   / 65535.;
-          cc->green = cc->color.green / 65535.;
-          cc->blue  = cc->color.blue  / 65535.;
-          cc->color_set = 1;
-        }
-      if (gc->xor)
-        {
-          if (!cc->xor_set)
-            {
-              cc->xor_color.red = cc->color.red ^ gport->bg_color.red;
-              cc->xor_color.green = cc->color.green ^ gport->bg_color.green;
-              cc->xor_color.blue = cc->color.blue ^ gport->bg_color.blue;
-              gdk_color_alloc (gport->colormap, &cc->xor_color);
-              cc->red   = cc->color.red   / 65535.;
-              cc->green = cc->color.green / 65535.;
-              cc->blue  = cc->color.blue  / 65535.;
-              cc->xor_set = 1;
-            }
-        }
-      r = cc->red;
-      g = cc->green;
-      b = cc->blue;
-
-      gc->erase = 0;
-    }
-  if (1) {
-    double maxi, mult;
-    if (gport->trans_lines)
-      a = a * alpha_mult;
-    maxi = r;
-    if (g > maxi) maxi = g;
-    if (b > maxi) maxi = b;
-    mult = MIN (1 / alpha_mult, 1 / maxi);
-#if 1
-    r = r * mult;
-    g = g * mult;
-    b = b * mult;
-#endif
-  }
-
-  if( ! hidgl_gui_is_up )
-    return;
-
-  hidgl_flush_triangles ();
-  glColor4d (r, g, b, a);
-}
-
-void
-hidgl_set_line_cap (hidGC gc, EndCapStyle style)
-{
-  switch (style)
-    {
-    case Trace_Cap:
-    case Round_Cap:
-      gc->cap = GDK_CAP_ROUND;
-      gc->join = GDK_JOIN_ROUND;
-      break;
-    case Square_Cap:
-    case Beveled_Cap:
-      gc->cap = GDK_CAP_PROJECTING;
-      gc->join = GDK_JOIN_MITER;
-      break;
-    }
-}
-
-void
-hidgl_set_line_width (hidGC gc, int width)
-{
-  gc->width = width;
-}
-
 void
 hidgl_set_draw_xor (hidGC gc, int xor)
 {
@@ -536,6 +301,7 @@ hidgl_set_line_cap_angle (hidGC gc, int x1, int y1, int x2, int y2)
   printf ("hidgl_set_line_cap_angle() -- not implemented\n");
 }
 
+#if 0
 static void
 use_gc (hidGC gc)
 {
@@ -548,6 +314,7 @@ use_gc (hidGC gc)
 
   hidgl_set_color (gc, gc->colorname);
 }
+#endif
 
 void
 errorCallback(GLenum errorCode)
@@ -561,13 +328,12 @@ errorCallback(GLenum errorCode)
 
 
 void
-hidgl_draw_line (hidGC gc, int x1, int y1, int x2, int y2)
+hidgl_draw_line (hidGC gc, int cap, double width, int x1, int y1, int x2, int y2)
 {
 #define TRIANGLES_PER_CAP 15
 #define MIN_TRIANGLES_PER_CAP 3
 #define MAX_TRIANGLES_PER_CAP 1000
-  double dx1, dy1, dx2, dy2;
-  double width, angle;
+  double angle;
   float deltax, deltay, length;
   float wdx, wdy;
   int slices;
@@ -582,18 +348,11 @@ hidgl_draw_line (hidGC gc, int x1, int y1, int x2, int y2)
 
   USE_GC (gc);
 
-  dx1 = Vx (x1);
-  dy1 = Vy (y1);
-  dx2 = Vx (x2);
-  dy2 = Vy (y2);
-
-  width = Vz (gc->width);
-
   if (width == 0.0)
     width = 1.0;
 
-  deltax = dx2 - dx1;
-  deltay = dy2 - dy1;
+  deltax = x2 - x1;
+  deltay = y2 - y1;
 
   length = sqrt (deltax * deltax + deltay * deltay);
 
@@ -624,7 +383,7 @@ hidgl_draw_line (hidGC gc, int x1, int y1, int x2, int y2)
 
 //  slices = TRIANGLES_PER_CAP;
 
-  switch (gc->cap) {
+  switch (cap) {
     case Trace_Cap:
     case Round_Cap:
       circular_caps = 1;
@@ -632,16 +391,16 @@ hidgl_draw_line (hidGC gc, int x1, int y1, int x2, int y2)
 
     case Square_Cap:
     case Beveled_Cap:
-      dx1 -= deltax * width / 2. / length;
-      dy1 -= deltay * width / 2. / length;
-      dx2 += deltax * width / 2. / length;
-      dy2 += deltay * width / 2. / length;
+      x1 -= deltax * width / 2. / length;
+      y1 -= deltay * width / 2. / length;
+      x2 += deltax * width / 2. / length;
+      y2 += deltay * width / 2. / length;
       break;
   }
 
   ensure_triangle_space (2);
-  add_triangle (dx1 - wdx, dy1 - wdy, dx2 - wdx, dy2 - wdy, dx2 + wdx, dy2 + wdy);
-  add_triangle (dx1 - wdx, dy1 - wdy, dx2 + wdx, dy2 + wdy, dx1 + wdx, dy1 + wdy);
+  add_triangle (x1 - wdx, y1 - wdy, x2 - wdx, y2 - wdy, x2 + wdx, y2 + wdy);
+  add_triangle (x1 - wdx, y1 - wdy, x2 + wdx, y2 + wdy, x1 + wdx, y1 + wdy);
 
   if (circular_caps) {
     int i;
@@ -649,23 +408,23 @@ hidgl_draw_line (hidGC gc, int x1, int y1, int x2, int y2)
 
     ensure_triangle_space (2 * slices);
 
-    last_capx = ((float)width) / 2. * cos (angle * M_PI / 180.) + dx1;
-    last_capy = -((float)width) / 2. * sin (angle * M_PI / 180.) + dy1;
+    last_capx = ((float)width) / 2. * cos (angle * M_PI / 180.) + x1;
+    last_capy = -((float)width) / 2. * sin (angle * M_PI / 180.) + y1;
     for (i = 0; i < slices; i++) {
       float capx, capy;
-      capx = ((float)width) / 2. * cos (angle * M_PI / 180. + ((float)(i + 1)) * M_PI / (float)slices) + dx1;
-      capy = -((float)width) / 2. * sin (angle * M_PI / 180. + ((float)(i + 1)) * M_PI / (float)slices) + dy1;
-      add_triangle (last_capx, last_capy, capx, capy, dx1, dy1);
+      capx = ((float)width) / 2. * cos (angle * M_PI / 180. + ((float)(i + 1)) * M_PI / (float)slices) + x1;
+      capy = -((float)width) / 2. * sin (angle * M_PI / 180. + ((float)(i + 1)) * M_PI / (float)slices) + y1;
+      add_triangle (last_capx, last_capy, capx, capy, x1, y1);
       last_capx = capx;
       last_capy = capy;
     }
-    last_capx = -((float)width) / 2. * cos (angle * M_PI / 180.) + dx2;
-    last_capy = ((float)width) / 2. * sin (angle * M_PI / 180.) + dy2;
+    last_capx = -((float)width) / 2. * cos (angle * M_PI / 180.) + x2;
+    last_capy = ((float)width) / 2. * sin (angle * M_PI / 180.) + y2;
     for (i = 0; i < slices; i++) {
       float capx, capy;
-      capx = -((float)width) / 2. * cos (angle * M_PI / 180. + ((float)(i + 1)) * M_PI / (float)slices) + dx2;
-      capy = ((float)width) / 2. * sin (angle * M_PI / 180. + ((float)(i + 1)) * M_PI / (float)slices) + dy2;
-      add_triangle (last_capx, last_capy, capx, capy, dx2, dy2);
+      capx = -((float)width) / 2. * cos (angle * M_PI / 180. + ((float)(i + 1)) * M_PI / (float)slices) + x2;
+      capy = ((float)width) / 2. * sin (angle * M_PI / 180. + ((float)(i + 1)) * M_PI / (float)slices) + y2;
+      add_triangle (last_capx, last_capy, capx, capy, x2, y2);
       last_capx = capx;
       last_capy = capy;
     }
@@ -673,39 +432,22 @@ hidgl_draw_line (hidGC gc, int x1, int y1, int x2, int y2)
 }
 
 void
-hidgl_draw_arc (hidGC gc, int cx, int cy,
-               int xradius, int yradius, int start_angle, int delta_angle)
+hidgl_draw_arc (hidGC gc, double width, int vx, int vy,
+               int vrx, int vry, int start_angle, int delta_angle,
+               int flip_x, int flip_y)
 {
 #define MIN_SLICES_PER_ARC 10
-  int vrx, vry;
-  int w, h, radius, slices;
-  double width;
+  int slices;
   GLUquadricObj *qobj;
 
-  width = Vz (gc->width);
-
-  if (width == 0.0)
-    width = 1.0;
-
-  w = gport->width * gport->zoom;
-  h = gport->height * gport->zoom;
-  radius = (xradius > yradius) ? xradius : yradius;
-  if (SIDE_X (cx) < gport->view_x0 - radius
-      || SIDE_X (cx) > gport->view_x0 + w + radius
-      || SIDE_Y (cy) < gport->view_y0 - radius 
-      || SIDE_Y (cy) > gport->view_y0 + h + radius)
-    return;
-  
   USE_GC (gc);
-  vrx = Vz (xradius);
-  vry = Vz (yradius);
 
-  if (hidgl_flip_x)
+  if (flip_x)
     {
       start_angle = 180 - start_angle;
       delta_angle = - delta_angle;
     }
-  if (hidgl_flip_y)
+  if (flip_y)
     {
       start_angle = - start_angle;
       delta_angle = - delta_angle;					
@@ -730,7 +472,7 @@ hidgl_draw_arc (hidGC gc, int cx, int cy,
   gluQuadricNormals (qobj, GLU_SMOOTH);
 
   glPushMatrix ();
-  glTranslatef (Vx (cx), Vy (cy), 0.0);
+  glTranslatef (vx, vx, 0.0);
   gluPartialDisk (qobj, vrx - width / 2, vrx + width / 2, slices, 1, 270 + start_angle, delta_angle);
   glPopMatrix ();
 
@@ -741,15 +483,15 @@ hidgl_draw_arc (hidGC gc, int cx, int cy,
 
   /* TODO: CHANGE TO USING THE TRIANGLE LIST */
   glPushMatrix ();
-  glTranslatef (Vx (cx) + vrx * -cos (M_PI / 180. * start_angle),
-                Vy (cy) + vrx *  sin (M_PI / 180. * start_angle), 0.0);
+  glTranslatef (vx + vrx * -cos (M_PI / 180. * start_angle),
+                vy + vrx *  sin (M_PI / 180. * start_angle), 0.0);
   gluPartialDisk (qobj, 0, width / 2, slices, 1, start_angle + 90., 180);
   glPopMatrix ();
 
   /* TODO: CHANGE TO USING THE TRIANGLE LIST */
   glPushMatrix ();
-  glTranslatef (Vx (cx) + vrx * -cos (M_PI / 180. * (start_angle + delta_angle)),
-                Vy (cy) + vrx *  sin (M_PI / 180. * (start_angle + delta_angle)), 0.0);
+  glTranslatef (vx + vrx * -cos (M_PI / 180. * (start_angle + delta_angle)),
+                vy + vrx *  sin (M_PI / 180. * (start_angle + delta_angle)), 0.0);
   gluPartialDisk (qobj, 0, width / 2, slices, 1, start_angle + delta_angle + 270., 180);
   glPopMatrix ();
 
@@ -759,29 +501,7 @@ hidgl_draw_arc (hidGC gc, int cx, int cy,
 void
 hidgl_draw_rect (hidGC gc, int x1, int y1, int x2, int y2)
 {
-  int w, h, lw;
-
-  lw = gc->width;
-  w = gport->width * gport->zoom;
-  h = gport->height * gport->zoom;
-
-  if ((SIDE_X (x1) < gport->view_x0 - lw
-       && SIDE_X (x2) < gport->view_x0 - lw)
-      || (SIDE_X (x1) > gport->view_x0 + w + lw
-	  && SIDE_X (x2) > gport->view_x0 + w + lw)
-      || (SIDE_Y (y1) < gport->view_y0 - lw 
-	  && SIDE_Y (y2) < gport->view_y0 - lw)
-      || (SIDE_Y (y1) > gport->view_y0 + h + lw 
-	  && SIDE_Y (y2) > gport->view_y0 + h + lw))
-    return;
-
-  x1 = Vx (x1);
-  y1 = Vy (y1);
-  x2 = Vx (x2);
-  y2 = Vy (y2);
-
   USE_GC (gc);
-
   glBegin (GL_LINE_LOOP);
   glVertex2f (x1, y1);
   glVertex2f (x1, y2);
@@ -792,28 +512,16 @@ hidgl_draw_rect (hidGC gc, int x1, int y1, int x2, int y2)
 
 
 void
-hidgl_fill_circle (hidGC gc, int cx, int cy, int radius)
+hidgl_fill_circle (hidGC gc, int vx, int vy, int vr)
 {
 #define TRIANGLES_PER_CIRCLE 30
 #define MIN_TRIANGLES_PER_CIRCLE 6
 #define MAX_TRIANGLES_PER_CIRCLE 2000
-  int w, h, vx, vy, vr;
   float last_x, last_y;
   int slices;
   int i;
 
-  w = gport->width * gport->zoom;
-  h = gport->height * gport->zoom;
-  if (SIDE_X (cx) < gport->view_x0 - radius
-      || SIDE_X (cx) > gport->view_x0 + w + radius
-      || SIDE_Y (cy) < gport->view_y0 - radius 
-      || SIDE_Y (cy) > gport->view_y0 + h + radius)
-    return;
-
   USE_GC (gc);
-  vx = Vx (cx);
-  vy = Vy (cy);
-  vr = Vz (radius);
 
   slices = M_PI * 2 * vr / PIXELS_PER_CIRCLINE;
 
@@ -849,7 +557,7 @@ static int stashed_vertices;
 static int triangle_comp_idx;
 
 
-void
+static void
 myError (GLenum errno)
 {
   printf ("gluTess error: %s\n", gluErrorString (errno));
@@ -977,8 +685,8 @@ hidgl_fill_polygon (hidGC gc, int n_coords, int *x, int *y)
 
   for (i = 0; i < n_coords; i++)
     {
-      vertices [0 + i * 3] = Vx (x[i]);
-      vertices [1 + i * 3] = Vy (y[i]);
+      vertices [0 + i * 3] = x[i];
+      vertices [1 + i * 3] = y[i];
       vertices [2 + i * 3] = 0.;
       gluTessVertex (tobj, &vertices [i * 3], &vertices [i * 3]);
     }
@@ -994,27 +702,6 @@ hidgl_fill_polygon (hidGC gc, int n_coords, int *x, int *y)
 void
 hidgl_fill_rect (hidGC gc, int x1, int y1, int x2, int y2)
 {
-  int w, h, lw;
-
-  lw = gc->width;
-  w = gport->width * gport->zoom;
-  h = gport->height * gport->zoom;
-
-  if ((SIDE_X (x1) < gport->view_x0 - lw
-       && SIDE_X (x2) < gport->view_x0 - lw)
-      || (SIDE_X (x1) > gport->view_x0 + w + lw
-          && SIDE_X (x2) > gport->view_x0 + w + lw)
-      || (SIDE_Y (y1) < gport->view_y0 - lw
-          && SIDE_Y (y2) < gport->view_y0 - lw)
-      || (SIDE_Y (y1) > gport->view_y0 + h + lw
-          && SIDE_Y (y2) > gport->view_y0 + h + lw))
-    return;
-
-  x1 = Vx (x1);
-  y1 = Vy (y1);
-  x2 = Vx (x2);
-  y2 = Vy (y2);
-
   USE_GC (gc);
   glBegin (GL_QUADS);
   glVertex2f (x1, y1);
@@ -1026,65 +713,5 @@ hidgl_fill_rect (hidGC gc, int x1, int y1, int x2, int y2)
 
 /* ---------------------------------------------------------------------- */
 
-HID hidgl_hid = {
-  sizeof (HID),
-  "",
-  "",
-  1,				/* gui */
-  0,				/* printer */
-  0,				/* exporter */
-  0,				/* poly before */
-  1,				/* poly after */
-  0,				/* poly dicer */
-
-  NULL, /* hidgl_get_export_options */
-  NULL, /* hidgl_do_export */
-  NULL, /* hidgl_parse_arguments */
-
-  NULL, /* hidgl_invalidate_wh */
-  NULL, /* hidgl_invalidate_lr */
-  NULL, /* hidgl_invalidate_all */
-  hidgl_set_layer,
-  hidgl_make_gc,
-  hidgl_destroy_gc,
-  hidgl_use_mask,
-  hidgl_set_color,
-  hidgl_set_line_cap,
-  hidgl_set_line_width,
-  hidgl_set_draw_xor,
-  hidgl_set_draw_faded,
-  hidgl_set_line_cap_angle,
-  hidgl_draw_line,
-  hidgl_draw_arc,
-  hidgl_draw_rect,
-  hidgl_fill_circle,
-  hidgl_fill_polygon,
-  hidgl_fill_rect,
-
-  NULL, /* hidgl_calibrate */
-  NULL, /* hidgl_shift_is_pressed */
-  NULL, /* hidgl_control_is_pressed */
-  NULL, /* hidgl_get_coords */
-  NULL, /* hidgl_set_crosshair */
-  NULL, /* hidgl_add_timer */
-  NULL, /* hidgl_stop_timer */
-  NULL, /* hidgl_watch_file */
-  NULL, /* hidgl_unwatch_file */
-  NULL, /* hidgl_add_block_hook */
-  NULL, /* hidgl_stop_block_hook */
-
-  NULL, /* hidgl_log */
-  NULL, /* hidgl_logv */
-  NULL, /* hidgl_confirm_dialog */
-  NULL, /* hidgl_close_confirm_dialog */
-  NULL, /* hidgl_report_dialog */
-  NULL, /* hidgl_prompt_for */
-  NULL, /* hidgl_fileselect */
-  NULL, /* hidgl_attribute_dialog */
-  NULL, /* hidgl_show_item */
-  NULL, /* hidgl_beep */
-  NULL, /* hidgl_progress */
-};
-
 #endif /* DISABLE EVERYTHING! */
