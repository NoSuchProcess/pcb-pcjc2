Bottom: afe0164c35f686f6ff94194e14247b1dfce78fcc
Top:    19ea1abb8416a682a6fa7197e6723c578bad73b7
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-05-03 16:30:33 +0100

Refresh of grid-drawing-common-code

---

diff --git a/src/hid/common/hidgl.c b/src/hid/common/hidgl.c
index f8c0b72..aa9d6e0 100644
--- a/src/hid/common/hidgl.c
+++ b/src/hid/common/hidgl.c
@@ -95,41 +95,25 @@ hidgl_set_depth (float depth)
   global_depth = depth;
 }
 
-/* ------------------------------------------------------------ */
-#if 0
-/*static*/ void
-draw_grid ()
+void
+hidgl_draw_grid (BoxType *drawn_area)
 {
   static GLfloat *points = 0;
   static int npoints = 0;
   int x1, y1, x2, y2, n, i;
   double x, y;
+  extern float global_depth;
 
   if (!Settings.DrawGrid)
     return;
+
   if (Vz (PCB->Grid) < MIN_GRID_DISTANCE)
     return;
 
-  if (gdk_color_parse (Settings.GridColor, &gport->grid_color))
-    {
-      gport->grid_color.red ^= gport->bg_color.red;
-      gport->grid_color.green ^= gport->bg_color.green;
-      gport->grid_color.blue ^= gport->bg_color.blue;
-    }
-
-  hidgl_flush_triangles ();
-
-  glEnable (GL_COLOR_LOGIC_OP);
-  glLogicOp (GL_XOR);
-
-  glColor3f (gport->grid_color.red / 65535.,
-             gport->grid_color.green / 65535.,
-             gport->grid_color.blue / 65535.);
-
-  x1 = GRIDFIT_X (SIDE_X (gport->view_x0), PCB->Grid);
-  y1 = GRIDFIT_Y (SIDE_Y (gport->view_y0), PCB->Grid);
-  x2 = GRIDFIT_X (SIDE_X (gport->view_x0 + gport->view_width - 1), PCB->Grid);
-  y2 = GRIDFIT_Y (SIDE_Y (gport->view_y0 + gport->view_height - 1), PCB->Grid);
+  x1 = GRIDFIT_X (MAX (0, drawn_area->X1), PCB->Grid);
+  y1 = GRIDFIT_Y (MAX (0, drawn_area->Y1), PCB->Grid);
+  x2 = GRIDFIT_X (MIN (PCB->MaxWidth, drawn_area->X2), PCB->Grid);
+  y2 = GRIDFIT_Y (MIN (PCB->MaxHeight, drawn_area->Y2), PCB->Grid);
   if (x1 > x2)
     {
       int tmp = x1;
@@ -154,31 +138,30 @@ draw_grid ()
   if (n > npoints)
     {
       npoints = n + 10;
-      points = realloc (points, npoints * 2 * sizeof (GLfloat));
+      points = realloc (points, npoints * 3 * sizeof (GLfloat));
     }
 
   glEnableClientState (GL_VERTEX_ARRAY);
-  glVertexPointer (2, GL_FLOAT, 0, points);
+  glVertexPointer (3, GL_FLOAT, 0, points);
 
   n = 0;
   for (x = x1; x <= x2; x += PCB->Grid)
     {
-      points[2 * n] = Vx (x);
+      points[3 * n] = Vx (x);
+      points[3 * n + 2] = global_depth;
       n++;
     }
   for (y = y1; y <= y2; y += PCB->Grid)
     {
       int vy = Vy (y);
       for (i = 0; i < n; i++)
-        points[2 * i + 1] = vy;
+        points[3 * i + 1] = vy;
       glDrawArrays (GL_POINTS, 0, n);
     }
 
   glDisableClientState (GL_VERTEX_ARRAY);
-  glDisable (GL_COLOR_LOGIC_OP);
 }
 
-#endif
 /* ------------------------------------------------------------ */
 
 #define MAX_PIXELS_ARC_TO_CHORD 0.5
diff --git a/src/hid/common/hidgl.h b/src/hid/common/hidgl.h
index e69a6b7..c26e24e 100644
--- a/src/hid/common/hidgl.h
+++ b/src/hid/common/hidgl.h
@@ -66,7 +66,7 @@ hidgl_add_triangle (triangle_buffer *buffer,
                                  x3, y3, global_depth);
 }
 
-// void draw_grid ()
+void hidgl_draw_grid (BoxType *drawn_area);
 void hidgl_set_depth (float depth);
 void hidgl_draw_line (int cap, double width, int x1, int y1, int x2, int y2, double scale);
 void hidgl_draw_arc (double width, int vx, int vy, int vrx, int vry, int start_angle, int delta_angle, double scale);
diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index 94a2903..1b1d5f8 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -129,18 +129,8 @@ ghid_make_gc (void)
 }
 
 static void
-ghid_draw_grid ()
+ghid_draw_grid (BoxTypePtr drawn_area)
 {
-  static GLfloat *points = 0;
-  static int npoints = 0;
-  int x1, y1, x2, y2, n, i;
-  double x, y;
-
-  if (!Settings.DrawGrid)
-    return;
-  if (Vz (PCB->Grid) < MIN_GRID_DISTANCE)
-    return;
-
   if (gdk_color_parse (Settings.GridColor, &gport->grid_color))
     {
       gport->grid_color.red ^= gport->bg_color.red;
@@ -157,55 +147,8 @@ ghid_draw_grid ()
              gport->grid_color.green / 65535.,
              gport->grid_color.blue / 65535.);
 
-  x1 = GRIDFIT_X (SIDE_X (gport->view_x0), PCB->Grid);
-  y1 = GRIDFIT_Y (SIDE_Y (gport->view_y0), PCB->Grid);
-  x2 = GRIDFIT_X (SIDE_X (gport->view_x0 + gport->view_width - 1), PCB->Grid);
-  y2 = GRIDFIT_Y (SIDE_Y (gport->view_y0 + gport->view_height - 1), PCB->Grid);
-  if (x1 > x2)
-    {
-      int tmp = x1;
-      x1 = x2;
-      x2 = tmp;
-    }
-  if (y1 > y2)
-    {
-      int tmp = y1;
-      y1 = y2;
-      y2 = tmp;
-    }
-  if (Vx (x1) < 0)
-    x1 += PCB->Grid;
-  if (Vy (y1) < 0)
-    y1 += PCB->Grid;
-  if (Vx (x2) >= gport->width)
-    x2 -= PCB->Grid;
-  if (Vy (y2) >= gport->height)
-    y2 -= PCB->Grid;
-  n = (int) ((x2 - x1) / PCB->Grid + 0.5) + 1;
-  if (n > npoints)
-    {
-      npoints = n + 10;
-      points = realloc (points, npoints * 2 * sizeof (GLfloat));
-    }
-
-  glEnableClientState (GL_VERTEX_ARRAY);
-  glVertexPointer (2, GL_FLOAT, 0, points);
-
-  n = 0;
-  for (x = x1; x <= x2; x += PCB->Grid)
-    {
-      points[2 * n] = Vx (x);
-      n++;
-    }
-  for (y = y1; y <= y2; y += PCB->Grid)
-    {
-      int vy = Vy (y);
-      for (i = 0; i < n; i++)
-	points[2 * i + 1] = vy;
-      glDrawArrays (GL_POINTS, 0, n);
-    }
+  hidgl_draw_grid (drawn_area);
 
-  glDisableClientState (GL_VERTEX_ARRAY);
   glDisable (GL_COLOR_LOGIC_OP);
 }
