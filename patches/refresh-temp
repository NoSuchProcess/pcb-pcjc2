Bottom: d58dfe20a8c9ef24ce8601ebb799a233b57faa2a
Top:    951915eb7454627df6bfcbc1cfc048e5775a96ad
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2015-01-11 18:20:07 +0000

Refresh of move-some-fields-from-the-hid

---

diff --git a/src/draw.c b/src/draw.c
index a9b9eb1..5eaa3fc 100644
--- a/src/draw.c
+++ b/src/draw.c
@@ -566,7 +566,7 @@ DrawEverything (const BoxType *drawn_area)
    * first draw all 'invisible' stuff
    */
   if (!TEST_FLAG (CHECKPLANESFLAG, PCB)
-      && gui->set_layer ("invisible", SL (INVISIBLE, 0), 0))
+      && gui->graphics->set_layer ("invisible", SL (INVISIBLE, 0), 0))
     {
       side = SWAP_IDENT ? TOP_SIDE : BOTTOM_SIDE;
       if (PCB->ElementOn)
@@ -576,7 +576,7 @@ DrawEverything (const BoxType *drawn_area)
 	  DrawLayer (&(PCB->Data->Layer[max_copper_layer + side]), drawn_area);
 	}
       r_search (PCB->Data->pad_tree, drawn_area, NULL, pad_callback, &side);
-      gui->end_layer ();
+      gui->graphics->end_layer ();
     }
 
   /* draw all layers in layerstack order */
@@ -584,10 +584,10 @@ DrawEverything (const BoxType *drawn_area)
     {
       int group = drawn_groups[i];
 
-      if (gui->set_layer (0, group, 0))
+      if (gui->graphics->set_layer (0, group, 0))
         {
           DrawLayerGroup (group, drawn_area);
-          gui->end_layer ();
+          gui->graphics->end_layer ();
         }
     }
 
@@ -601,42 +601,42 @@ DrawEverything (const BoxType *drawn_area)
     {
       CountHoles (&plated, &unplated, drawn_area);
 
-      if (plated && gui->set_layer ("plated-drill", SL (PDRILL, 0), 0))
+      if (plated && gui->graphics->set_layer ("plated-drill", SL (PDRILL, 0), 0))
         {
           DrawHoles (true, false, drawn_area);
-          gui->end_layer ();
+          gui->graphics->end_layer ();
         }
 
-      if (unplated && gui->set_layer ("unplated-drill", SL (UDRILL, 0), 0))
+      if (unplated && gui->graphics->set_layer ("unplated-drill", SL (UDRILL, 0), 0))
         {
           DrawHoles (false, true, drawn_area);
-          gui->end_layer ();
+          gui->graphics->end_layer ();
         }
     }
 
   /* Draw the solder mask if turned on */
-  if (gui->set_layer ("componentmask", SL (MASK, TOP), 0))
+  if (gui->graphics->set_layer ("componentmask", SL (MASK, TOP), 0))
     {
       DrawMask (TOP_SIDE, drawn_area);
-      gui->end_layer ();
+      gui->graphics->end_layer ();
     }
 
-  if (gui->set_layer ("soldermask", SL (MASK, BOTTOM), 0))
+  if (gui->graphics->set_layer ("soldermask", SL (MASK, BOTTOM), 0))
     {
       DrawMask (BOTTOM_SIDE, drawn_area);
-      gui->end_layer ();
+      gui->graphics->end_layer ();
     }
 
-  if (gui->set_layer ("topsilk", SL (SILK, TOP), 0))
+  if (gui->graphics->set_layer ("topsilk", SL (SILK, TOP), 0))
     {
       DrawSilk (TOP_SIDE, drawn_area);
-      gui->end_layer ();
+      gui->graphics->end_layer ();
     }
 
-  if (gui->set_layer ("bottomsilk", SL (SILK, BOTTOM), 0))
+  if (gui->graphics->set_layer ("bottomsilk", SL (SILK, BOTTOM), 0))
     {
       DrawSilk (BOTTOM_SIDE, drawn_area);
-      gui->end_layer ();
+      gui->graphics->end_layer ();
     }
 
   if (gui->graphics->klass->gui)
@@ -646,43 +646,43 @@ DrawEverything (const BoxType *drawn_area)
 	r_search (PCB->Data->element_tree, drawn_area, NULL, EMark_callback,
 		  NULL);
       /* Draw rat lines on top */
-      if (gui->set_layer ("rats", SL (RATS, 0), 0))
+      if (gui->graphics->set_layer ("rats", SL (RATS, 0), 0))
         {
           DrawRats(drawn_area);
-          gui->end_layer ();
+          gui->graphics->end_layer ();
         }
     }
 
   paste_empty = IsPasteEmpty (TOP_SIDE);
-  if (gui->set_layer ("toppaste", SL (PASTE, TOP), paste_empty))
+  if (gui->graphics->set_layer ("toppaste", SL (PASTE, TOP), paste_empty))
     {
       DrawPaste (TOP_SIDE, drawn_area);
-      gui->end_layer ();
+      gui->graphics->end_layer ();
     }
 
   paste_empty = IsPasteEmpty (BOTTOM_SIDE);
-  if (gui->set_layer ("bottompaste", SL (PASTE, BOTTOM), paste_empty))
+  if (gui->graphics->set_layer ("bottompaste", SL (PASTE, BOTTOM), paste_empty))
     {
       DrawPaste (BOTTOM_SIDE, drawn_area);
-      gui->end_layer ();
+      gui->graphics->end_layer ();
     }
 
-  if (gui->set_layer ("topassembly", SL (ASSY, TOP), 0))
+  if (gui->graphics->set_layer ("topassembly", SL (ASSY, TOP), 0))
     {
       PrintAssembly (TOP_SIDE, drawn_area);
-      gui->end_layer ();
+      gui->graphics->end_layer ();
     }
 
-  if (gui->set_layer ("bottomassembly", SL (ASSY, BOTTOM), 0))
+  if (gui->graphics->set_layer ("bottomassembly", SL (ASSY, BOTTOM), 0))
     {
       PrintAssembly (BOTTOM_SIDE, drawn_area);
-      gui->end_layer ();
+      gui->graphics->end_layer ();
     }
 
-  if (gui->set_layer ("fab", SL (FAB, 0), 0))
+  if (gui->graphics->set_layer ("fab", SL (FAB, 0), 0))
     {
       PrintFab (Output.fgGC);
-      gui->end_layer ();
+      gui->graphics->end_layer ();
     }
 }
 
diff --git a/src/hid.h b/src/hid.h
index 50921e9..7d5bdc2 100644
--- a/src/hid.h
+++ b/src/hid.h
@@ -294,23 +294,6 @@ typedef enum
     void (*notify_crosshair_change) (bool changes_complete);
     void (*notify_mark_change) (bool changes_complete);
 
-    /* During redraw or print/export cycles, this is called once per
-       layer (or layer group, for copper layers).  If it returns false
-       (zero), the HID does not want that layer, and none of the drawing
-       functions should be called.  If it returns true (nonzero), the
-       items in that layer [group] should be drawn using the various
-       drawing functions.  In addition to the MAX_GROUP copper layer
-       groups, you may select layers indicated by the macros SL_*
-       defined above, or any others with an index of -1.  For copper
-       layer groups, you may pass NULL for name to have a name fetched
-       from the PCB struct.  The EMPTY argument is a hint - if set, the
-       layer is empty, if zero it may be non-empty.  */
-    int (*set_layer) (const char *name_, int group_, int _empty);
-
-    /* Tell the GUI the layer last selected has been finished with */
-    void (*end_layer) (void);
-
-
     HID_DRAW *graphics;
 
     /* This is for the printer.  If you call this for the GUI, xval and
diff --git a/src/hid_draw.h b/src/hid_draw.h
index 613ca67..30de626 100644
--- a/src/hid_draw.h
+++ b/src/hid_draw.h
@@ -9,6 +9,22 @@ enum mask_mode {
 
 typedef struct hid_draw_class_st
 {
+  /* During redraw or print/export cycles, this is called once per
+     layer (or layer group, for copper layers).  If it returns false
+     (zero), the HID does not want that layer, and none of the drawing
+     functions should be called.  If it returns true (nonzero), the
+     items in that layer [group] should be drawn using the various
+     drawing functions.  In addition to the MAX_GROUP copper layer
+     groups, you may select layers indicated by the macros SL_*
+     defined above, or any others with an index of -1.  For copper
+     layer groups, you may pass NULL for name to have a name fetched
+     from the PCB struct.  The EMPTY argument is a hint - if set, the
+     layer is empty, if zero it may be non-empty.  */
+  int (*set_layer) (const char *name_, int group_, int _empty);
+
+  /* Tell the GUI the layer last selected has been finished with */
+  void (*end_layer) (void);
+
   /* Drawing Functions.  Coordinates and distances are ALWAYS in PCB's
      default coordinates (1 nm at the time this comment was written).
      Angles are always in degrees, with 0 being "right" (positive X)
@@ -87,6 +103,18 @@ struct hid_gc_struct {
 /* Calling wrappers to access the vfunc table */
 
 inline hidGC
+hid_draw_set_layer (HID_DRAW *hid_draw, const char *name, int group, int empty)
+{
+  hid_draw->klass->set_layer (name, group, empty);
+}
+
+inline hidGC
+hid_draw_end_layer (HID_DRAW *hid_draw)
+{
+  hid_draw->klass->end_layer ();
+}
+
+inline hidGC
 hid_draw_make_gc (HID_DRAW *hid_draw)
 {
   return hid_draw->klass->make_gc ();
