Bottom: a26075a6397f50a413fa85f5e5a14c04069ddda9
Top:    6d457f98af610fd080e1fc6228b880901dbc5d55
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-08-27 00:05:39 +0100

Refresh of bga-wizard

---

diff --git a/src/Makefile.am b/src/Makefile.am
index bf24e2c..3f812bf 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -295,23 +295,23 @@ hid/common/hidlist.h : Makefile
 libgtk_a_CPPFLAGS = -I./hid/gtk
 LIBGTK_SRCS = \
 	dolists.h \
-	hid/hidint.h \
+	hid/gtk/bga-wizard.c \
+	hid/gtk/gtkhid.h \
+	hid/gtk/gtkhid-main.c \
+	hid/gtk/gtk-pcb-cell-renderer-visibility.c \
+	hid/gtk/gtk-pcb-cell-renderer-visibility.h \
 	hid/gtk/gtk-pcb-coord-entry.c \
 	hid/gtk/gtk-pcb-coord-entry.h \
 	hid/gtk/gtk-pcb-layer-selector.c \
 	hid/gtk/gtk-pcb-layer-selector.h \
-	hid/gtk/gtk-pcb-cell-renderer-visibility.c \
-	hid/gtk/gtk-pcb-cell-renderer-visibility.h \
-	hid/gtk/gtkhid-main.c \
-	hid/gtk/gtkhid.h \
-	hid/gtk/gui.h \
 	hid/gtk/gui-command-window.c \
 	hid/gtk/gui-config.c \
+	hid/gtk/gui-dialog.c \
 	hid/gtk/gui-dialog-print.c \
 	hid/gtk/gui-dialog-size.c \
-	hid/gtk/gui-dialog.c \
 	hid/gtk/gui-drc-window.c \
 	hid/gtk/gui-drc-window.h \
+	hid/gtk/gui.h \
 	hid/gtk/gui-keyref-window.c \
 	hid/gtk/gui-library-window.c \
 	hid/gtk/gui-library-window.h \
@@ -326,6 +326,7 @@ LIBGTK_SRCS = \
 	hid/gtk/gui-utils.c \
 	hid/gtk/snavi.c \
 	hid/gtk/snavi.h
+	hid/hidint.h \
 libgtk_a_SOURCES = ${LIBGTK_SRCS} hid/gtk/gtk_lists.h
 
 hid/gtk/gtk_lists.h : ${LIBGTK_SRCS} Makefile
diff --git a/src/hid/gtk/bga-wizard.c b/src/hid/gtk/bga-wizard.c
new file mode 100644
index 0000000..c8518d1
--- /dev/null
+++ b/src/hid/gtk/bga-wizard.c
@@ -0,0 +1,159 @@
+/*
+ *                            COPYRIGHT
+ *
+ *  PCB, interactive printed circuit board design
+ *  Copyright (C) 2011 PCB Contributors (See ChangeLog for details)
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ *  Contact addresses for paper mail and Email:
+ *  Thomas Nau, Schlehenweg 15, 88471 Baustetten, Germany
+ *  Thomas.Nau@rz.uni-ulm.de
+ *
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include "global.h"
+
+#include "gui.h"
+
+#include "gui-pinout-preview.h"
+
+#ifdef HAVE_LIBDMALLOC
+#include <dmalloc.h>
+#endif
+
+static void
+set_default_page_attributes (GtkAssistant *assistant, GtkWidget *page)
+{
+  gtk_assistant_set_page_title (assistant, page, _("BGA Footprint Wizard"));
+}
+
+static GtkWidget *
+create_intro_page (GtkAssistant *assistant)
+{
+  GtkWidget *page;
+  page = gtk_label_new ("Hello world");
+
+  gtk_assistant_append_page (assistant, page);
+  gtk_assistant_set_page_type (assistant, page, GTK_ASSISTANT_PAGE_INTRO);
+  set_default_page_attributes (assistant, page);
+  gtk_assistant_set_page_complete (assistant, page, TRUE);
+
+  return page;
+}
+
+static GtkWidget *
+create_step1_page (GtkAssistant *assistant)
+{
+  GtkWidget *page;
+  GtkWidget *hbox;
+  GtkWidget *preview_frame;
+  GtkWidget *preview;
+  GtkWidget *vbox;
+  GtkWidget *label;
+
+  hbox = gtk_hbox_new (FALSE, 0);
+
+  preview_frame = gtk_frame_new (_("Preview"));
+  preview = ghid_pinout_preview_new (NULL);
+  gtk_container_add (GTK_CONTAINER (preview_frame), preview);
+
+  vbox = gtk_vbox_new (FALSE, 8);
+
+  label = gtk_label_new (_("Define the parameters for this BGA"));
+  gtk_box_pack_start (GTK_BOX (vbox), label, TRUE, TRUE, 0);
+  label = gtk_label_new (_("Parameter 1"));
+  gtk_box_pack_start (GTK_BOX (vbox), label, TRUE, TRUE, 0);
+  label = gtk_label_new (_("Parameter 2"));
+  gtk_box_pack_start (GTK_BOX (vbox), label, TRUE, TRUE, 0);
+  label = gtk_label_new (_("Parameter 3"));
+  gtk_box_pack_start (GTK_BOX (vbox), label, TRUE, TRUE, 0);
+
+
+  gtk_box_pack_start (GTK_BOX (hbox), preview_frame, TRUE, TRUE, 8);
+  gtk_box_pack_start (GTK_BOX (hbox),          vbox, TRUE, TRUE, 8);
+
+  page = hbox;
+
+  gtk_assistant_append_page (assistant, page);
+  set_default_page_attributes (assistant, page);
+  gtk_assistant_set_page_complete (assistant, page, TRUE);
+
+  return page;
+}
+
+static void
+assistant_close_cb (GtkAssistant *assistant, gpointer userdata)
+{
+  gtk_widget_destroy (GTK_WIDGET (assistant));
+}
+
+static void
+assistant_cancel_cb (GtkAssistant *assistant, gpointer userdata)
+{
+  gtk_widget_destroy (GTK_WIDGET (assistant));
+}
+
+static gboolean
+assistant_delete_event_cb (GtkWidget *assistant, gpointer userdata)
+{
+  gtk_widget_destroy (assistant);
+  return TRUE;
+}
+
+void
+demo_assistant (void)
+{
+  GtkWidget *assistant;
+
+  assistant = gtk_assistant_new ();
+  create_intro_page (GTK_ASSISTANT (assistant));
+  create_step1_page (GTK_ASSISTANT (assistant));
+
+  g_signal_connect (assistant, "close", G_CALLBACK (assistant_close_cb), NULL);
+  g_signal_connect (assistant, "cancel", G_CALLBACK (assistant_cancel_cb), NULL);
+  g_signal_connect (assistant, "delete-event", G_CALLBACK (assistant_delete_event_cb), NULL);
+
+  gtk_widget_show_all (assistant);
+}
+
+
+static const char bga_wizard_syntax[] = "BgaWizard()";
+
+static const char bga_wizard_help[] =
+"Activate the BGA footprint wizard.";
+
+int
+bga_wizard_action (int argc, char **argv, int px, int pz)
+{
+  if (!ghidgui || !ghidgui->ui_manager)
+    return 0;
+
+  demo_assistant ();
+  return 0;
+}
+
+HID_Action bga_wizard_action_list[] = {
+  {"BgaWizard", 0, bga_wizard_action,
+   bga_wizard_help, bga_wizard_syntax},
+};
+
+REGISTER_ACTIONS (bga_wizard_action_list)
+
+
