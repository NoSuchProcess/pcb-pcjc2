Bottom: 5fe673b3bf85d8e094572778fcfa51a6c986ca3d
Top:    5a4285e247dac913a4f8745da72c652aa65beefc
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-04-25 13:05:27 +0100

Refresh of demo-of-exporter-specific-expo

---

diff --git a/src/draw.c b/src/draw.c
index 360df90..25e360d 100644
--- a/src/draw.c
+++ b/src/draw.c
@@ -82,8 +82,6 @@ static const BoxType *clip_box = NULL;
  */
 static void Redraw (bool, BoxTypePtr);
 static void DrawEverything (BoxTypePtr);
-static void DrawPPV (int group, const BoxType *);
-static int DrawLayerGroup (int, const BoxType *);
 static void DrawPinOrViaLowLevel (PinTypePtr, bool);
 static void DrawPlainPin (PinTypePtr, bool);
 static void DrawPlainVia (PinTypePtr, bool);
@@ -518,7 +516,7 @@ pad_callback (const BoxType * b, void *cl)
  * Draws pins pads and vias - Always draws for non-gui HIDs,
  * otherwise drawing depends on PCB->PinOn and PCB->ViaOn
  */
-static void
+void
 DrawPPV (int group, const BoxType *drawn_area)
 {
   int component_group = GetLayerGroupNumberByNumber (component_silk_layer);
@@ -780,7 +778,7 @@ DrawLayer (LayerTypePtr Layer, const BoxType * screen)
  * draws one layer group.  Returns non-zero if pins and pads should be
  * drawn with this group.
  */
-static int
+int
 DrawLayerGroup (int group, const BoxType *drawn_area)
 {
   int i, rv = 1;
diff --git a/src/draw.h b/src/draw.h
index f21baae..996380f 100644
--- a/src/draw.h
+++ b/src/draw.h
@@ -74,6 +74,9 @@ void EraseObject (int, void *, void *);
 void LoadBackgroundImage (char *);
 void UpdateAll (void);
 
+void DrawPPV (int group, const BoxType *);
+int DrawLayerGroup (int, const BoxType *);
+
 void DrawMask (int side, BoxType *);
 void DrawSilk (int side, const BoxType *);
 void DrawPaste (int side, BoxType *);
diff --git a/src/hid/common/draw_helpers.c b/src/hid/common/draw_helpers.c
index 1e1dee0..3c67bde 100644
--- a/src/hid/common/draw_helpers.c
+++ b/src/hid/common/draw_helpers.c
@@ -5,6 +5,7 @@
 #include "misc.h"
 #include "print.h" /* FIXME */
 #include "data.h" /* FIXME */
+#include "draw.h" /* FIXME */
 
 static void
 fill_contour (hidGC gc, PLINE *pl)
@@ -490,6 +491,7 @@ struct pin_info
 /* ---------------------------------------------------------------------------
  * draws one non-copper layer
  */
+#if 0
 void
 DrawLayerCommon (LayerTypePtr Layer, const BoxType * screen, bool clear_pins)
 {
@@ -498,7 +500,7 @@ DrawLayerCommon (LayerTypePtr Layer, const BoxType * screen, bool clear_pins)
   /* print the non-clearing polys */
   info.Layer = Layer;
   info.arg = clear_pins;
-  clip_box = screen;
+
   r_search (Layer->polygon_tree, screen, NULL, poly_callback, &info);
 
   if (clear_pins && TEST_FLAG (CHECKPLANESFLAG, PCB))
@@ -525,14 +527,14 @@ DrawLayerCommon (LayerTypePtr Layer, const BoxType * screen, bool clear_pins)
                       0, 0,
                       PCB->MaxWidth, PCB->MaxHeight);
     }
-
-  clip_box = NULL;
 }
+#endif
 
 /* ---------------------------------------------------------------------------
  * draws one layer group.  Returns non-zero if pins and pads should be
  * drawn with this group.
  */
+#if 0
 static int
 DrawLayerGroup (int group, const BoxType * screen)
 {
@@ -542,7 +544,6 @@ DrawLayerGroup (int group, const BoxType * screen)
   int n_entries = PCB->LayerGroups.Number[group];
   Cardinal *layers = PCB->LayerGroups.Entries[group];
 
-  clip_box = screen;
   for (i = n_entries - 1; i >= 0; i--)
     {
       layernum = layers[i];
@@ -557,6 +558,7 @@ DrawLayerGroup (int group, const BoxType * screen)
     rv = 1;
   return rv;
 }
+#endif
 
 typedef struct
 {
@@ -611,47 +613,12 @@ pin_callback (const BoxType * b, void *cl)
 static int
 pad_callback (const BoxType * b, void *cl)
 {
-  PadTypePtr pad = (PadTypePtr) b;
+  //PadTypePtr pad = (PadTypePtr) b;
   //if (FRONT (pad))
     //DrawPad (pad, 0);
   return 1;
 }
 
-static bool
-IsPasteEmpty (int side)
-{
-  bool paste_empty = true;
-  ALLPAD_LOOP (PCB->Data);
-  {
-    if (TEST_FLAG (ONSOLDERFLAG, pad) == (side == SOLDER_LAYER) &&
-        !TEST_FLAG (NOPASTEFLAG, pad) && pad->Mask > 0)
-      {
-        paste_empty = false;
-        break;
-      }
-  }
-  ENDALL_LOOP;
-  return paste_empty;
-}
-
-static void
-DrawPaste (int side)
-{
-  gui->set_color (Output.fgGC, PCB->ElementColor);
-  ALLPAD_LOOP (PCB->Data);
-  {
-    if (TEST_FLAG (ONSOLDERFLAG, pad) == (side == SOLDER_LAYER) &&
-        !TEST_FLAG (NOPASTEFLAG, pad) && pad->Mask > 0)
-      {
-        //if (pad->Mask < pad->Thickness)
-          //DrawPadLowLevel (Output.fgGC, pad, true, true);
-        //else
-          //DrawPadLowLevel (Output.fgGC, pad, false, false);
-      }
-  }
-  ENDALL_LOOP;
-}
-
 void
 common_export_region (HID *hid, BoxType *region)
 {
@@ -675,70 +642,62 @@ common_export_region (HID *hid, BoxType *region)
     {
       if (gui->set_layer (0, group, 0))
         {
-          if (DrawLayerGroup (group, drawn_area))
+          if (DrawLayerGroup (group, region))
             {
-              r_search (PCB->Data->via_tree, drawn_area, NULL, pin_callback, NULL);
-              r_search (PCB->Data->pin_tree, drawn_area, NULL, pin_callback, NULL);
+              r_search (PCB->Data->via_tree, region, NULL, pin_callback, NULL);
+              r_search (PCB->Data->pin_tree, region, NULL, pin_callback, NULL);
 
               if (group == component_group || group == solder_group)
                 {
                   SWAP_IDENT = (group == solder_group);
-                  r_search (PCB->Data->pad_tree, drawn_area, NULL, pad_callback, NULL);
+                  r_search (PCB->Data->pad_tree, region, NULL, pad_callback, NULL);
                   SWAP_IDENT = save_swap;
                 }
             }
         }
     }
 
-  count_holes (drawn_area, &nplated, &nunplated);
+  count_holes (region, &nplated, &nunplated);
 
   if (nplated && gui->set_layer ("plated-drill", SL (PDRILL, 0), 0))
     {
       plated = 1;
-      r_search (PCB->Data->pin_tree, drawn_area, NULL, hole_callback, &plated);
-      r_search (PCB->Data->via_tree, drawn_area, NULL, hole_callback, &plated);
+      r_search (PCB->Data->pin_tree, region, NULL, hole_callback, &plated);
+      r_search (PCB->Data->via_tree, region, NULL, hole_callback, &plated);
     }
 
   if (nunplated && gui->set_layer ("unplated-drill", SL (UDRILL, 0), 0))
     {
       plated = 0;
-      r_search (PCB->Data->pin_tree, drawn_area, NULL, hole_callback, &plated);
-      r_search (PCB->Data->via_tree, drawn_area, NULL, hole_callback, &plated);
+      r_search (PCB->Data->pin_tree, region, NULL, hole_callback, &plated);
+      r_search (PCB->Data->via_tree, region, NULL, hole_callback, &plated);
     }
 
   if (gui->set_layer ("componentmask", SL (MASK, TOP), 0))
-    {
-      SWAP_IDENT = 0;
-      DrawMask (drawn_area);
-      SWAP_IDENT = save_swap;
-    }
+    DrawMask (COMPONENT_LAYER, region);
 
   if (gui->set_layer ("soldermask", SL (MASK, BOTTOM), 0))
-    {
-      SWAP_IDENT = 1;
-      DrawMask (drawn_area);
-      SWAP_IDENT = save_swap;
-    }
+    DrawMask (SOLDER_LAYER, region);
 
   if (gui->set_layer ("topsilk", SL (SILK, TOP), 0))
-    DrawSilk (0, component_silk_layer, drawn_area);
+    DrawSilk (COMPONENT_LAYER, region);
 
   if (gui->set_layer ("bottomsilk", SL (SILK, BOTTOM), 0))
-    DrawSilk (1, solder_silk_layer, drawn_area);
+    DrawSilk (SOLDER_LAYER, region);
 
   paste_empty = IsPasteEmpty (COMPONENT_LAYER);
   if (gui->set_layer ("toppaste", SL (PASTE, TOP), paste_empty))
-    DrawPaste (COMPONENT_LAYER);
+    DrawPaste (COMPONENT_LAYER, region);
 
   paste_empty = IsPasteEmpty (SOLDER_LAYER);
   if (gui->set_layer ("bottompaste", SL (PASTE, BOTTOM), paste_empty))
-    DrawPaste (SOLDER_LAYER);
+    DrawPaste (SOLDER_LAYER, region);
 
   //if (gui->set_layer ("topassembly", SL (ASSY, TOP), 0))
-    //PrintAssembly (drawn_area, component_group, 0);
+    //PrintAssembly (region, component_group, 0);
 
-  if (gui->set_layer ("bottomassembly", SL (ASSY, BOTTOM), 0))
-    PrintAssembly (drawn_area, solder_group, 1);
+  //if (gui->set_layer ("bottomassembly", SL (ASSY, BOTTOM), 0))
+    //PrintAssembly (region, solder_group, 1);
 
   if (gui->set_layer ("fab", SL (FAB, 0), 0))
     PrintFab ();
diff --git a/src/hid/gerber/gerber.c b/src/hid/gerber/gerber.c
index 91deeb6..1eb1e2a 100644
--- a/src/hid/gerber/gerber.c
+++ b/src/hid/gerber/gerber.c
@@ -25,7 +25,9 @@
 #include "data.h"
 #include "misc.h"
 #include "error.h"
+#include "rtree.h"
 #include "draw.h"
+#include "print.h"
 
 #include "hid.h"
 #include "../hidint.h"
@@ -362,12 +364,62 @@ maybe_close_f ()
 
 static BoxType region;
 
+typedef struct
+{
+  int nplated;
+  int nunplated;
+} HoleCountStruct;
+
+static int
+hole_counting_callback (const BoxType * b, void *cl)
+{
+  PinTypePtr pin = (PinTypePtr) b;
+  HoleCountStruct *hcs = cl;
+  if (TEST_FLAG (HOLEFLAG, pin))
+    hcs->nunplated++;
+  else
+    hcs->nplated++;
+  return 1;
+}
+
 static void
-gerber_expose (HID * hid, BoxType * region, void *item)
+count_holes (BoxType *region, int *plated, int *unplated)
+{
+  HoleCountStruct hcs;
+  hcs.nplated = hcs.nunplated = 0;
+  r_search (PCB->Data->pin_tree, region, NULL, hole_counting_callback, &hcs);
+  r_search (PCB->Data->via_tree, region, NULL, hole_counting_callback, &hcs);
+  if (plated != NULL) *plated = hcs.nplated;
+  if (unplated != NULL) *unplated = hcs.nunplated;
+}
+
+static int
+hole_callback (const BoxType * b, void *cl)
 {
-  int i, ngroups, side;
-  int plated;
-  int component, solder;
+  PinTypePtr pin = (PinTypePtr) b;
+  bool plated = *(bool *)cl;
+
+  if ((plated == 0 && !TEST_FLAG (HOLEFLAG, pin)) ||
+      (plated == 1 &&  TEST_FLAG (HOLEFLAG, pin)))
+    return 1;
+
+  gui->fill_circle (Output.bgGC, pin->X, pin->Y, pin->DrillingHole / 2);
+  return 1;
+}
+
+static void
+DrawHoles (bool plated, BoxType *drawn_area)
+{
+  r_search (PCB->Data->pin_tree, drawn_area, NULL, hole_callback, &plated);
+  r_search (PCB->Data->via_tree, drawn_area, NULL, hole_callback, &plated);
+}
+
+static void
+gerber_expose (HID * hid, BoxType *drawn_area, void *item)
+{
+  int i;
+  int group;
+  int nplated, nunplated;
 
   HID *old_gui = gui;
   hidGC savebg = Output.bgGC;
@@ -409,18 +461,10 @@ gerber_expose (HID * hid, BoxType * region, void *item)
   count_holes (drawn_area, &nplated, &nunplated);
 
   if (nplated && gui->set_layer ("plated-drill", SL (PDRILL, 0), 0))
-    {
-      plated = 1;
-      r_search (PCB->Data->pin_tree, drawn_area, NULL, hole_callback, &plated);
-      r_search (PCB->Data->via_tree, drawn_area, NULL, hole_callback, &plated);
-    }
+    DrawHoles (true, drawn_area);
 
   if (nunplated && gui->set_layer ("unplated-drill", SL (UDRILL, 0), 0))
-    {
-      plated = 0;
-      r_search (PCB->Data->pin_tree, drawn_area, NULL, hole_callback, &plated);
-      r_search (PCB->Data->via_tree, drawn_area, NULL, hole_callback, &plated);
-    }
+    DrawHoles (false, drawn_area);
 
   if (gui->set_layer ("componentmask", SL (MASK, TOP), 0))
     DrawMask (COMPONENT_LAYER, drawn_area);
@@ -434,12 +478,10 @@ gerber_expose (HID * hid, BoxType * region, void *item)
   if (gui->set_layer ("bottomsilk", SL (SILK, BOTTOM), 0))
     DrawSilk (SOLDER_LAYER, drawn_area);
 
-  paste_empty = IsPasteEmpty (COMPONENT_LAYER);
-  if (gui->set_layer ("toppaste", SL (PASTE, TOP), paste_empty))
+  if (gui->set_layer ("toppaste", SL (PASTE, TOP), 0))
     DrawPaste (COMPONENT_LAYER, drawn_area);
 
-  paste_empty = IsPasteEmpty (SOLDER_LAYER);
-  if (gui->set_layer ("bottompaste", SL (PASTE, BOTTOM), paste_empty))
+  if (gui->set_layer ("bottompaste", SL (PASTE, BOTTOM), 0))
     DrawPaste (SOLDER_LAYER, drawn_area);
 
   if (gui->set_layer ("fab", SL (FAB, 0), 0))
@@ -576,14 +618,6 @@ gerber_set_layer (const char *name, int group, int empty)
   if (name == 0)
     name = PCB->Data->Layer[idx].Name;
 
-  if (idx >= 0 && idx < max_copper_layer && !print_layer[idx])
-    return 0;
-
-  if (strcmp (name, "invisible") == 0)
-    return 0;
-  if (SL_TYPE (idx) == SL_ASSY)
-    return 0;
-
   flash_drills = 0;
   if (strcmp (name, "outline") == 0 ||
       strcmp (name, "route") == 0)
