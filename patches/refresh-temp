Bottom: 451c4b6897be5a902ce9231dcb3828fb319f1b64
Top:    7bee68bd71aba399e783ec4696cdc66529145cc6
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2010-11-21 19:08:03 +0000

Refresh of add-vrml-model-rendering-suppo

---

diff --git a/src/hid/common/hidgl.c b/src/hid/common/hidgl.c
index 6e5c6a1..3a960b1 100644
--- a/src/hid/common/hidgl.c
+++ b/src/hid/common/hidgl.c
@@ -1010,6 +1010,7 @@ hidgl_init (void)
   }
 
   load_built_in_shaders ();
+  hidgl_init_acy_resistor ();
 
 done:
   done_once = true;
diff --git a/src/hid/common/hidgl.h b/src/hid/common/hidgl.h
index 834f606..c56bb01 100644
--- a/src/hid/common/hidgl.h
+++ b/src/hid/common/hidgl.h
@@ -141,6 +141,7 @@ void hidgl_reset_stencil_usage (void);
 void hidgl_set_depth (float depth);
 
 /* hidgl_pacakge_acy_resistor.c */
+void hidgl_init_acy_resistor ();
 void hidgl_draw_acy_resistor (ElementType *element, float surface_depth, float board_thickness);
 
 /* hidgl_pacakge_vrml.c */
diff --git a/src/hid/common/hidgl_geometry.h b/src/hid/common/hidgl_geometry.h
index 92a722a..2658e1e 100644
--- a/src/hid/common/hidgl_geometry.h
+++ b/src/hid/common/hidgl_geometry.h
@@ -38,13 +38,11 @@ struct geometry_class {
  * hidgl_brep_geometry (EXAMPLE)
  */
 
-char *notes =
-"tristrip_geometry and traiangle geometry probably share some common data-storage stuff?"
-"Should we do like VRML and keep data-definition separate from the defining geometry?"
-"Should we create a data-storage class for reading the meshes / vertex data into?"
-;
-
 #if 0
+tristrip_geometry and traiangle geometry probably share some common data-storage stuff?
+Should we do like VRML and keep data-definition separate from the defining geometry?
+Should we create a data-storage class for reading the meshes / vertex data into?
+
 Need something which looks a little like the following:
 
 Group / transform node
diff --git a/src/hid/common/hidgl_package_acy_resistor.c b/src/hid/common/hidgl_package_acy_resistor.c
index 0fd4ffc..50f966b 100644
--- a/src/hid/common/hidgl_package_acy_resistor.c
+++ b/src/hid/common/hidgl_package_acy_resistor.c
@@ -21,11 +21,67 @@
 
 #include "hidgl.h"
 #include "hidgl_material.h"
+#include "hidgl_geometry.h"
 
 #ifdef HAVE_LIBDMALLOC
 #include <dmalloc.h>
 #endif
 
+/* Static data we initialise for the model */
+typedef struct {
+  hidgl_material *resistor_body_mat;
+  hidgl_material *resistor_pin_mat;
+  hidgl_material *resistor_pin_selected_mat;
+  hidgl_geometry *resistor_body_geom;
+  hidgl_geometry *resistor_pin_geom;
+  GLuint resistor_body_bump_texture;
+  GLuint zero_ohm_body_bump_texture;
+} model_data;
+
+static model_data model = {
+    .resistor_body_mat = NULL,
+    .resistor_pin_mat = NULL,
+    .resistor_pin_selected_mat = NULL,
+    .resistor_body_geom = NULL,
+    .resistor_pin_geom = NULL,
+    .resistor_body_bump_texture = 0;
+    .zero_ohm_body_bump_texture = 0;
+};
+
+void
+hidgl_init_acy_resistor (void)
+{
+  GLfloat emission[] = {0.0f, 0.0f, 0.0f, 1.0f};
+  GLfloat specular[] = {0.5f, 0.5f, 0.5f, 1.0f};
+  GLfloat resistor_pin_color[] = {0.55, 0.55, 0.55, 1.0};
+
+  /* Define the resistor body material */
+  model.resistor_body_mat = hidgl_material_new ("resistor_body");
+  hidgl_material_set_emission_color (model.resistor_body_mat, emission);
+  hidgl_material_set_specular_color (model.resistor_body_mat, specular);
+  hidgl_material_set_shininess (model.resistor_body_mat, 20.0f);
+  hidgl_material_set_shader (model.resistor_body_mat, resistor_program);
+
+  /* Define the resistor pin material */
+  model.resistor_pin_mat = hidgl_material_new ("resistor_pin");
+  hidgl_material_set_ambient_color (model.resistor_pin_mat, resistor_pin_color);
+  hidgl_material_set_diffuse_color (model.resistor_pin_mat, resistor_pin_color);
+  hidgl_material_set_emission_color (model.resistor_pin_mat, emission);
+  hidgl_material_set_specular_color (model.resistor_pin_mat, specular);
+  hidgl_material_set_shininess (model.resistor_pin_mat, 120.0f);
+
+  /* Load bump mapping textures */
+  glGenTextures (1, &model.resistor_body_bump_texture);
+  glBindTexture (GL_TEXTURE_2D, model.resistor_body_bump_texture);
+  load_texture_from_png ("resistor_bump.png", true);
+
+  glGenTextures (1, &model.resistor_body_bump_texture);
+  glBindTexture (GL_TEXTURE_2D, model.zero_ohm_body_bump_texture);
+  load_texture_from_png ("zero_ohm_bump.png", true);
+
+  glBindTexture (GL_TEXTURE_2D, 0);
+}
+
 static int
 compute_offset (int x, int y, int width, int height)
 {
@@ -618,19 +674,16 @@ hidgl_draw_acy_resistor (ElementType *element, float surface_depth, float board_
   float center_x, center_y;
   float angle;
   GLfloat resistor_body_color[] = {0.31, 0.47, 0.64, 1.0};
-  GLfloat resistor_pin_color[] = {0.55, 0.55, 0.55, 1.0};
 
   int strip;
   int no_strips = NUM_RESISTOR_STRIPS;
   int ring;
   int no_rings = NUM_PIN_RINGS;
   int end;
-  bool zero_ohms;
+  bool zero_ohm;
 
   static bool first_run = true;
   static GLuint texture1;
-  static GLuint texture2_resistor;
-  static GLuint texture2_zero_ohms;
 
   GLuint restore_sp;
 
@@ -676,13 +729,10 @@ hidgl_draw_acy_resistor (ElementType *element, float surface_depth, float board_
   }
 
   glActiveTextureARB (GL_TEXTURE0_ARB);
-//  if (first_run) {
-    glGenTextures (1, &texture1);
-    glBindTexture (GL_TEXTURE_1D, texture1);
-    zero_ohms = setup_resistor_texture (element, resistor_body_color);
-//  } else {
-//    glBindTexture (GL_TEXTURE_1D, texture1);
-//  }
+  glGenTextures (1, &texture1);
+  glBindTexture (GL_TEXTURE_1D, texture1);
+  zero_ohm = setup_resistor_texture (element, resistor_body_color);
+
   glTexEnvf (GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
   glTexParameterf (GL_TEXTURE_1D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
   glTexParameterf (GL_TEXTURE_1D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
@@ -690,19 +740,10 @@ hidgl_draw_acy_resistor (ElementType *element, float surface_depth, float board_
   glEnable (GL_TEXTURE_1D);
 
   glActiveTextureARB (GL_TEXTURE1_ARB);
-  if (first_run) {
-    glGenTextures (1, &texture2_resistor);
-    glBindTexture (GL_TEXTURE_2D, texture2_resistor);
-    load_texture_from_png ("resistor_bump.png", true);
-
-    glGenTextures (1, &texture2_zero_ohms);
-    glBindTexture (GL_TEXTURE_2D, texture2_zero_ohms);
-    load_texture_from_png ("zero_ohms_bump.png", true);
-  }
-  if (zero_ohms)
-    glBindTexture (GL_TEXTURE_2D, texture2_zero_ohms);
+  if (zero_ohm)
+    glBindTexture (GL_TEXTURE_2D, model.zero_ohm_body_bump_texture);
   else
-    glBindTexture (GL_TEXTURE_2D, texture2_resistor);
+    glBindTexture (GL_TEXTURE_2D, model.resistor_body_bump_texture);
 
   glTexParameterf (GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
   glTexParameterf (GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
@@ -721,19 +762,7 @@ hidgl_draw_acy_resistor (ElementType *element, float surface_depth, float board_
 
   glDisable (GL_LIGHTING);
 
-  if (1) {
-    GLfloat emission[] = {0.0f, 0.0f, 0.0f, 1.0f};
-    GLfloat specular[] = {0.5f, 0.5f, 0.5f, 1.0f};
-    hidgl_material *material;
-
-    material = hidgl_material_new ("resistor_body");
-    hidgl_material_set_emission_color (material, emission);
-    hidgl_material_set_specular_color (material, specular);
-    hidgl_material_set_shininess (material, 20.0f);
-    hidgl_material_set_shader (material, resistor_program);
-    hidgl_material_activate (material);
-    hidgl_material_free (material);
-  }
+  hidgl_material_activate (model.resistor_body_mat);
 
 #if 1
   glBegin (GL_TRIANGLE_STRIP);
@@ -806,20 +835,7 @@ hidgl_draw_acy_resistor (ElementType *element, float surface_depth, float board_
   glEnable (GL_LIGHTING);
 
   /* COLOR / MATERIAL SETUP */
-  if (1) {
-    GLfloat emission[] = {0.0f, 0.0f, 0.0f, 1.0f};
-    GLfloat specular[] = {0.5f, 0.5f, 0.5f, 1.0f};
-    hidgl_material *material;
-
-    material = hidgl_material_new ("resistor_pin");
-    hidgl_material_set_ambient_color (material, resistor_pin_color);
-    hidgl_material_set_diffuse_color (material, resistor_pin_color);
-    hidgl_material_set_emission_color (material, emission);
-    hidgl_material_set_specular_color (material, specular);
-    hidgl_material_set_shininess (material, 120.0f);
-    hidgl_material_activate (material);
-    hidgl_material_free (material);
-  }
+  hidgl_material_activate (model.resistor_pin_mat);
 
   for (end = 0; end < 2; end++) {
     float end_sign = (end == 0) ? 1. : -1.;
