Bottom: 80b847a5f082c0073a06523cdd7cb054ecfb84cd
Top:    49c2f076600156779ee6d5b693a614b6951a5d4c
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-07-24 14:20:58 +0100

Refresh of hid-gtk-gtkhid-gl-c-convert-cr

---

diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index 653c0ea..e7cad9b 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -659,9 +659,9 @@ static void
 draw_right_cross (gint x, gint y, gint z)
 {
   glVertex3i (x, 0, z);
-  glVertex3i (x, PCB->MaxHeight, z);
+  glVertex3i (x, gport->height, z);
   glVertex3i (0, y, z);
-  glVertex3i (PCB->MaxWidth, y, z);
+  glVertex3i (gport->width, y, z);
 }
 
 static void
@@ -669,25 +669,25 @@ draw_slanted_cross (gint x, gint y, gint z)
 {
   gint x0, y0, x1, y1;
 
-  x0 = x + (PCB->MaxHeight - y);
-  x0 = MAX(0, MIN (x0, PCB->MaxWidth));
+  x0 = x + (gport->height - y);
+  x0 = MAX(0, MIN (x0, gport->width));
   x1 = x - y;
-  x1 = MAX(0, MIN (x1, PCB->MaxWidth));
-  y0 = y + (PCB->MaxWidth - x);
-  y0 = MAX(0, MIN (y0, PCB->MaxHeight));
+  x1 = MAX(0, MIN (x1, gport->width));
+  y0 = y + (gport->width - x);
+  y0 = MAX(0, MIN (y0, gport->height));
   y1 = y - x;
-  y1 = MAX(0, MIN (y1, PCB->MaxHeight));
+  y1 = MAX(0, MIN (y1, gport->height));
   glVertex3i (x0, y0, z);
   glVertex3i (x1, y1, z);
 
-  x0 = x - (PCB->MaxHeight - y);
-  x0 = MAX(0, MIN (x0, PCB->MaxWidth));
+  x0 = x - (gport->height - y);
+  x0 = MAX(0, MIN (x0, gport->width));
   x1 = x + y;
-  x1 = MAX(0, MIN (x1, PCB->MaxWidth));
+  x1 = MAX(0, MIN (x1, gport->width));
   y0 = y + x;
-  y0 = MAX(0, MIN (y0, PCB->MaxHeight));
-  y1 = y - (PCB->MaxWidth - x);
-  y1 = MAX(0, MIN (y1, PCB->MaxHeight));
+  y0 = MAX(0, MIN (y0, gport->height));
+  y1 = y - (gport->width - x);
+  y1 = MAX(0, MIN (y1, gport->height));
   glVertex3i (x0, y0, z);
   glVertex3i (x1, y1, z);
 }
@@ -698,47 +698,47 @@ draw_dozen_cross (gint x, gint y, gint z)
   gint x0, y0, x1, y1;
   gdouble tan60 = sqrt (3);
 
-  x0 = x + (PCB->MaxHeight - y) / tan60;
-  x0 = MAX(0, MIN (x0, PCB->MaxWidth));
+  x0 = x + (gport->height - y) / tan60;
+  x0 = MAX(0, MIN (x0, gport->width));
   x1 = x - y / tan60;
-  x1 = MAX(0, MIN (x1, PCB->MaxWidth));
-  y0 = y + (PCB->MaxWidth - x) * tan60;
-  y0 = MAX(0, MIN (y0, PCB->MaxHeight));
+  x1 = MAX(0, MIN (x1, gport->width));
+  y0 = y + (gport->width - x) * tan60;
+  y0 = MAX(0, MIN (y0, gport->height));
   y1 = y - x * tan60;
-  y1 = MAX(0, MIN (y1, PCB->MaxHeight));
+  y1 = MAX(0, MIN (y1, gport->height));
   glVertex3i (x0, y0, z);
   glVertex3i (x1, y1, z);
 
-  x0 = x + (PCB->MaxHeight - y) * tan60;
-  x0 = MAX(0, MIN (x0, PCB->MaxWidth));
+  x0 = x + (gport->height - y) * tan60;
+  x0 = MAX(0, MIN (x0, gport->width));
   x1 = x - y * tan60;
-  x1 = MAX(0, MIN (x1, PCB->MaxWidth));
-  y0 = y + (PCB->MaxWidth - x) / tan60;
-  y0 = MAX(0, MIN (y0, PCB->MaxHeight));
+  x1 = MAX(0, MIN (x1, gport->width));
+  y0 = y + (gport->width - x) / tan60;
+  y0 = MAX(0, MIN (y0, gport->height));
   y1 = y - x / tan60;
-  y1 = MAX(0, MIN (y1, PCB->MaxHeight));
+  y1 = MAX(0, MIN (y1, gport->height));
   glVertex3i (x0, y0, z);
   glVertex3i (x1, y1, z);
 
-  x0 = x - (PCB->MaxHeight - y) / tan60;
-  x0 = MAX(0, MIN (x0, PCB->MaxWidth));
+  x0 = x - (gport->height - y) / tan60;
+  x0 = MAX(0, MIN (x0, gport->width));
   x1 = x + y / tan60;
-  x1 = MAX(0, MIN (x1, PCB->MaxWidth));
+  x1 = MAX(0, MIN (x1, gport->width));
   y0 = y + x * tan60;
-  y0 = MAX(0, MIN (y0, PCB->MaxHeight));
-  y1 = y - (PCB->MaxWidth - x) * tan60;
-  y1 = MAX(0, MIN (y1, PCB->MaxHeight));
+  y0 = MAX(0, MIN (y0, gport->height));
+  y1 = y - (gport->width - x) * tan60;
+  y1 = MAX(0, MIN (y1, gport->height));
   glVertex3i (x0, y0, z);
   glVertex3i (x1, y1, z);
 
-  x0 = x - (PCB->MaxHeight - y) * tan60;
-  x0 = MAX(0, MIN (x0, PCB->MaxWidth));
+  x0 = x - (gport->height - y) * tan60;
+  x0 = MAX(0, MIN (x0, gport->width));
   x1 = x + y * tan60;
-  x1 = MAX(0, MIN (x1, PCB->MaxWidth));
+  x1 = MAX(0, MIN (x1, gport->width));
   y0 = y + x / tan60;
-  y0 = MAX(0, MIN (y0, PCB->MaxHeight));
-  y1 = y - (PCB->MaxWidth - x) / tan60;
-  y1 = MAX(0, MIN (y1, PCB->MaxHeight));
+  y0 = MAX(0, MIN (y0, gport->height));
+  y1 = y - (gport->width - x) / tan60;
+  y1 = MAX(0, MIN (y1, gport->height));
   glVertex3i (x0, y0, z);
   glVertex3i (x1, y1, z);
 }
@@ -777,8 +777,8 @@ ghid_show_crosshair (gboolean paint_new_location)
       /* FIXME: when CrossColor changed from config */
       ghid_map_color_string (Settings.CrossColor, &cross_color);
     }
-  x = gport->x_crosshair;
-  y = gport->y_crosshair;
+  x = DRAW_X (gport->x_crosshair);
+  y = DRAW_Y (gport->y_crosshair);
   z = global_depth;
 
   glEnable (GL_COLOR_LOGIC_OP);
@@ -801,22 +801,22 @@ ghid_show_crosshair (gboolean paint_new_location)
   if (x >= 0 && paint_new_location && draw_markers)
     {
       glBegin (GL_QUADS);
-      glVertex3i (0,                       y - VCD,                  z);
-      glVertex3i (0,                       y - VCD + VCW,            z);
-      glVertex3i (VCD,                     y - VCD + VCW,            z);
-      glVertex3i (VCD,                     y - VCD,                  z);
-      glVertex3i (gport->view_width,       y - VCD,                  z);
-      glVertex3i (gport->view_width,       y - VCD + VCW,            z);
-      glVertex3i (gport->view_width - VCD, y - VCD + VCW,            z);
-      glVertex3i (gport->view_width - VCD, y - VCD,                  z);
-      glVertex3i (x - VCD,                 0,                        z);
-      glVertex3i (x - VCD,                 VCD,                      z);
-      glVertex3i (x - VCD + VCW,           VCD,                      z);
-      glVertex3i (x - VCD + VCW,           0,                        z);
-      glVertex3i (x - VCD,                 gport->view_height - VCD, z);
-      glVertex3i (x - VCD,                 gport->view_height,       z);
-      glVertex3i (x - VCD + VCW,           gport->view_height,       z);
-      glVertex3i (x - VCD + VCW,           gport->view_height - VCD, z);
+      glVertex3i (0,                  y - VCD,             z);
+      glVertex3i (0,                  y - VCD + VCW,       z);
+      glVertex3i (VCD,                y - VCD + VCW,       z);
+      glVertex3i (VCD,                y - VCD,             z);
+      glVertex3i (gport->width,       y - VCD,             z);
+      glVertex3i (gport->width,       y - VCD + VCW,       z);
+      glVertex3i (gport->width - VCD, y - VCD + VCW,       z);
+      glVertex3i (gport->width - VCD, y - VCD,             z);
+      glVertex3i (x - VCD,            0,                   z);
+      glVertex3i (x - VCD,            VCD,                 z);
+      glVertex3i (x - VCD + VCW,      VCD,                 z);
+      glVertex3i (x - VCD + VCW,      0,                   z);
+      glVertex3i (x - VCD,            gport->height - VCD, z);
+      glVertex3i (x - VCD,            gport->height,       z);
+      glVertex3i (x - VCD + VCW,      gport->height,       z);
+      glVertex3i (x - VCD + VCW,      gport->height - VCD, z);
       glEnd ();
     }
 
@@ -1035,54 +1035,25 @@ ghid_drawing_area_expose_cb (GtkWidget *widget,
              port->bg_color.green / 65535.,
              port->bg_color.blue / 65535.);
 
-  hidgl_init_triangle_array (&buffer);
-  ghid_invalidate_current_gc ();
-
-  /* Setup stenciling */
-  /* Drawing operations set the stencil buffer to '1' */
-  glStencilOp (GL_KEEP, GL_KEEP, GL_REPLACE); /* Stencil pass => replace stencil value (with 1) */
-  /* Drawing operations as masked to areas where the stencil buffer is '0' */
-  /* glStencilFunc (GL_GREATER, 1, 1); */           /* Draw only where stencil buffer is 0 */
-
-  if (global_view_2d) {
-    glBegin (GL_QUADS);
-    glVertex3i (0,             0,              0);
-    glVertex3i (PCB->MaxWidth, 0,              0);
-    glVertex3i (PCB->MaxWidth, PCB->MaxHeight, 0);
-    glVertex3i (0,             PCB->MaxHeight, 0);
-    glEnd ();
-  } else {
-    int solder_group;
-    int component_group;
-    int min_phys_group;
-    int max_phys_group;
-    int i;
-
-    solder_group = GetLayerGroupNumberByNumber (solder_silk_layer);
-    component_group = GetLayerGroupNumberByNumber (component_silk_layer);
-
-    min_phys_group = MIN (solder_group, component_group);
-    max_phys_group = MAX (solder_group, component_group);
-
-    glBegin (GL_QUADS);
-    for (i = min_phys_group; i <= max_phys_group; i++) {
-      int depth = compute_depth (i);
-      glVertex3i (0,             0,              depth);
-      glVertex3i (PCB->MaxWidth, 0,              depth);
-      glVertex3i (PCB->MaxWidth, PCB->MaxHeight, depth);
-      glVertex3i (0,             PCB->MaxHeight, depth);
-    }
-    glEnd ();
-  }
+  glBegin (GL_QUADS);
+  glVertex3i (0,             0,              -50);
+  glVertex3i (PCB->MaxWidth, 0,              -50);
+  glVertex3i (PCB->MaxWidth, PCB->MaxHeight, -50);
+  glVertex3i (0,             PCB->MaxHeight, -50);
+  glEnd ();
 
   ghid_draw_bg_image ();
 
+  hidgl_init_triangle_array (&buffer);
+  ghid_invalidate_current_gc ();
   hid_expose_callback (&ghid_hid, &region, 0);
   hidgl_flush_triangles (&buffer);
 
   /* Just prod the drawing code so the current depth gets set to
      the right value for the layer we are editing */
-  hidgl_set_depth (compute_depth (GetLayerGroupNumberByNumber (INDEXOFCURRENT)));
+  gui->set_layer (NULL, GetLayerGroupNumberByNumber (INDEXOFCURRENT), 0);
+  gui->end_layer ();
+
   ghid_draw_grid (&region);
 
   ghid_invalidate_current_gc ();
diff --git a/src/hid/gtk/gui-output-events.c b/src/hid/gtk/gui-output-events.c
index 6d50298..7bd5f17 100644
--- a/src/hid/gtk/gui-output-events.c
+++ b/src/hid/gtk/gui-output-events.c
@@ -215,6 +215,7 @@ ghid_note_event_location (GdkEventButton * ev)
   gboolean moved;
   /* FIXME: IFDEF HACK */
 #ifdef ENABLE_GL
+  int pcb_x, pcb_y;
   extern float global_depth; /* FIXME: REMOVE THIS HACK! */
 #endif
 
@@ -233,11 +234,13 @@ ghid_note_event_location (GdkEventButton * ev)
 #ifdef ENABLE_GL
   /* Unproject event_x and event_y to world coordinates of the plane we are on */
   ghid_unproject_to_z_plane (event_x, event_y, global_depth,
-                             &event_x, &event_y);
-#endif
-
+                             &pcb_x, &pcb_y);
+  gport->view_x = SIDE_X (pcb_x);
+  gport->view_y = SIDE_Y (pcb_y);
+#else
   gport->view_x = event_x * gport->zoom + gport->view_x0;
   gport->view_y = event_y * gport->zoom + gport->view_y0;
+#endif
 
   moved = MoveCrosshairAbsolute (SIDE_X (gport->view_x), 
 				 SIDE_Y (gport->view_y));
