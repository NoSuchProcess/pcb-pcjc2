Bottom: 083fe104693e36085eaeff25e1c4d2628b62582f
Top:    37ec95a927ef68f34d7e781fa6f882705ec3219c
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2009-02-11 16:10:26 +0000

Refresh of add-raw-polygons-support-for-t

---

diff --git a/src/dbus.c b/src/dbus.c
index 653d294..b3bb007 100644
--- a/src/dbus.c
+++ b/src/dbus.c
@@ -29,7 +29,7 @@
 #include "dbus.h"
 #include "dbus-pcbmain.h"
 #include "dbus-introspect.h"
-#include "hid.h"
+#include "global.h"
 #include "data.h"
 
 /* For lrealpath */
diff --git a/src/draw.c b/src/draw.c
index fdb33f7..a44a658 100644
--- a/src/draw.c
+++ b/src/draw.c
@@ -1741,6 +1741,15 @@ DrawPolygonLowLevel (PolygonTypePtr Polygon, void *data)
       AddPart (Polygon);
       return;
     }
+
+  if (gui->fill_pcb_polygon &&
+      !TEST_FLAG (THINDRAWFLAG, PCB) &&
+      !TEST_FLAG (THINDRAWPOLYFLAG, PCB) &&
+      !TEST_FLAG (CLEARLINEFLAG, Polygon)) {
+    gui->fill_pcb_polygon (Output.fgGC, Polygon);
+    return;
+  }
+
   pl = Polygon->Clipped->contours;
   n = pl->Count;
   x = (int *) malloc (n * sizeof (int));
diff --git a/src/global.h b/src/global.h
index 1be65d6..93aef49 100644
--- a/src/global.h
+++ b/src/global.h
@@ -50,6 +50,8 @@
 #include <ctype.h>
 #include <sys/types.h>
 
+typedef struct polygon_st PolygonType, *PolygonTypePtr;
+
 #include "hid.h"
 
 typedef struct rtree rtree_t;
@@ -234,7 +236,7 @@ typedef struct
   void *Element;
 } TextType, *TextTypePtr;
 
-typedef struct			/* holds information about a polygon */
+struct polygon_st			/* holds information about a polygon */
 {
   ANYOBJECTFIELDS;
   Cardinal PointN,		/* number of points in polygon */
@@ -243,7 +245,7 @@ typedef struct			/* holds information about a polygon */
   POLYAREA *NoHoles;		/* the polygon broken into hole-less regions */
   int NoHolesValid;		/* Is the NoHoles polygon up to date? */
   PointTypePtr Points;		/* data */
-} PolygonType, *PolygonTypePtr;
+};
 
 typedef struct			/* holds information about arcs */
 {
diff --git a/src/hid.h b/src/hid.h
index aaca24d..9f3ecdf 100644
--- a/src/hid.h
+++ b/src/hid.h
@@ -358,6 +358,8 @@ typedef enum
     void (*draw_rect) (hidGC gc_, int x1_, int y1_, int x2_, int y2_);
     void (*fill_circle) (hidGC gc_, int cx_, int cy_, int radius_);
     void (*fill_polygon) (hidGC gc_, int n_coords_, int *x_, int *y_);
+//    void (*fill_pcb_polygon) (hidGC gc_, void *poly);
+    void (*fill_pcb_polygon) (hidGC gc_, PolygonType *poly);
     void (*fill_rect) (hidGC gc_, int x1_, int y1_, int x2_, int y2_);
 
 
diff --git a/src/hid/batch/batch.c b/src/hid/batch/batch.c
index 1579c6e..094a44b 100644
--- a/src/hid/batch/batch.c
+++ b/src/hid/batch/batch.c
@@ -473,6 +473,7 @@ HID batch_gui = {
   batch_draw_rect,
   batch_fill_circle,
   batch_fill_polygon,
+  0 /*batch_fill_pcb_polygon*/ ,
   batch_fill_rect,
   batch_calibrate,
   batch_shift_is_pressed,
diff --git a/src/hid/bom/bom.c b/src/hid/bom/bom.c
index 059e84e..20eeebd 100644
--- a/src/hid/bom/bom.c
+++ b/src/hid/bom/bom.c
@@ -562,6 +562,7 @@ HID bom_hid = {
   0,				/* bom_draw_rect */
   0,				/* bom_fill_circle */
   0,				/* bom_fill_polygon */
+  0,				/* bom_fill_pcb_polygon */
   0,				/* bom_fill_rect */
   0,				/* bom_calibrate */
   0,				/* bom_shift_is_pressed */
diff --git a/src/hid/common/extents.c b/src/hid/common/extents.c
index 58aa756..154f128 100644
--- a/src/hid/common/extents.c
+++ b/src/hid/common/extents.c
@@ -202,6 +202,7 @@ static HID extents_hid = {
   extents_draw_rect,
   extents_fill_circle,
   extents_fill_polygon,
+  0 /* extents_fill_pcb_polygon */,
   extents_fill_rect,
 
   0 /* extents_calibrate */ ,
diff --git a/src/hid/common/hidgl.c b/src/hid/common/hidgl.c
index 12a484e..d109e1f 100644
--- a/src/hid/common/hidgl.c
+++ b/src/hid/common/hidgl.c
@@ -36,7 +36,7 @@
 
 #include "hid.h"
 #include "hidgl.h"
-
+#include "rtree.h"
 
 
 #ifdef HAVE_LIBDMALLOC
@@ -537,6 +537,8 @@ myBegin (GLenum type)
   triangle_comp_idx = 0;
 }
 
+static double global_scale;
+
 static void
 myVertex (GLdouble *vertex_data)
 {
@@ -553,11 +555,23 @@ myVertex (GLdouble *vertex_data)
         }
       else
         {
+#if 1
           hidgl_ensure_triangle_space (&buffer, 1);
           hidgl_add_triangle (&buffer,
                               triangle_vertices [0], triangle_vertices [1],
                               triangle_vertices [2], triangle_vertices [3],
                               vertex_data [0], vertex_data [1]);
+#else
+          hidgl_draw_line (Square_Cap, global_scale,
+                           triangle_vertices [0], triangle_vertices [1],
+                           triangle_vertices [2], triangle_vertices [3], global_scale);
+          hidgl_draw_line (Square_Cap, global_scale,
+                           triangle_vertices [2], triangle_vertices [3],
+                           vertex_data [0],       vertex_data [1],       global_scale);
+          hidgl_draw_line (Square_Cap, global_scale,
+                           vertex_data [0],       vertex_data [1],
+                           triangle_vertices [0], triangle_vertices [1], global_scale);
+#endif
 
           if (tessVertexType == GL_TRIANGLE_STRIP)
             {
@@ -628,6 +642,105 @@ hidgl_fill_polygon (int n_coords, int *x, int *y)
   free (vertices);
 }
 
+void tesselate_contour (GLUtesselator *tobj, VNODE *vnode,
+                        GLdouble *vertices, int *i)
+{
+  VNODE *vn = vnode;
+  int offset = *i * 3;
+
+  gluTessBeginContour (tobj);
+  do {
+    vertices [0 + offset] = vn->point[0];
+    vertices [1 + offset] = vn->point[1];
+    vertices [2 + offset] = 0.;
+    gluTessVertex (tobj, &vertices [offset], &vertices [offset]);
+    (*i)++;
+    offset += 3;
+  } while ((vn = vn->next) != vnode);
+  gluTessEndContour (tobj);
+}
+
+struct do_hole_info {
+  GLUtesselator *tobj;
+  GLdouble *vertices;
+  int *i;
+};
+
+static int
+do_hole (const BoxType *b, void *cl)
+{
+  struct do_hole_info *info = cl;
+  PLINE *curc = (PLINE *) b;
+  /* Ignore the outer contour - we draw it first explicitly*/
+  if (curc->Flags.orient == PLF_DIR) {
+    return 0;
+  }
+  tesselate_contour (info->tobj, &curc->head, info->vertices, info->i);
+  return 1;
+}
+
+void
+hidgl_fill_pcb_polygon (PolygonType *poly, BoxType *clip_box, double scale)
+{
+  int i, cc;
+  GLUtesselator *tobj;
+  GLdouble *vertices;
+  int vertex_count = 0;
+  POLYAREA *piece;
+  PLINE *contour;
+
+  global_scale = scale;
+
+  if (poly->Clipped == NULL) {
+    fprintf (stderr, "hidgl_fill_pcb_polygon: poly->Clipped == NULL\n");
+    return;
+  }
+
+  /* JUST DRAW THE FIRST PIECE */
+  /* Walk the polygon structure, counting vertices */
+  /* This gives an upper bound on the amount of storage required */
+  piece = poly->Clipped;
+//  do {
+    for (contour = piece->contours; contour != NULL; contour = contour->next)
+      vertex_count += contour->Count;
+//  } while ((piece = piece->f) != poly->Clipped);
+
+  vertices = malloc (sizeof(GLdouble) * vertex_count * 3);
+
+  tobj = gluNewTess ();
+  gluTessCallback(tobj, GLU_TESS_BEGIN, myBegin);
+  gluTessCallback(tobj, GLU_TESS_VERTEX, myVertex);
+  gluTessCallback(tobj, GLU_TESS_COMBINE, myCombine);
+  gluTessCallback(tobj, GLU_TESS_ERROR, myError);
+
+  gluTessBeginPolygon (tobj, NULL);
+
+  /* JUST DRAW THE FIRST PIECE */
+  /* Walk the polygon structure, adding the vertices */
+  i = 0;
+  cc = 1;
+  piece = poly->Clipped;
+  do {
+    struct do_hole_info info;
+    info.tobj = tobj;
+    info.vertices = vertices;
+    info.i = &i;
+
+    tesselate_contour (tobj, &piece->contours->head, vertices, &i);
+
+    /* Search for a contour to draw */
+    r_search (piece->contour_tree, clip_box, NULL, do_hole, &info);
+
+  } while (0);
+//  } while ((piece = piece->f) != poly->Clipped);
+
+  gluTessEndPolygon (tobj);
+  gluDeleteTess (tobj);
+
+  myFreeCombined ();
+  free (vertices);
+}
+
 void
 hidgl_fill_rect (int x1, int y1, int x2, int y2)
 {
diff --git a/src/hid/common/hidgl.h b/src/hid/common/hidgl.h
index 1f15d3f..980f49b 100644
--- a/src/hid/common/hidgl.h
+++ b/src/hid/common/hidgl.h
@@ -65,6 +65,7 @@ void hidgl_draw_arc (double width, int vx, int vy, int vrx, int vry, int start_a
 void hidgl_draw_rect (int x1, int y1, int x2, int y2);
 void hidgl_fill_circle (int vx, int vy, int vr, double scale);
 void hidgl_fill_polygon (int n_coords, int *x, int *y);
+void hidgl_fill_pcb_polygon (PolygonType *poly, BoxType *clip_box, double scale);
 void hidgl_fill_rect (int x1, int y1, int x2, int y2);
 
 
diff --git a/src/hid/common/hidinit.c b/src/hid/common/hidinit.c
index 846cb4f..9581d32 100644
--- a/src/hid/common/hidinit.c
+++ b/src/hid/common/hidinit.c
@@ -21,6 +21,7 @@
 #include <windows.h>
 #endif
 
+#include "global.h"
 #include "hid.h"
 #include "../hidint.h"
 
diff --git a/src/hid/common/hidnogui.c b/src/hid/common/hidnogui.c
index 458d16a..1d0fd0d 100644
--- a/src/hid/common/hidnogui.c
+++ b/src/hid/common/hidnogui.c
@@ -364,6 +364,7 @@ HID hid_nogui = {
   nogui_draw_rect,
   nogui_fill_circle,
   nogui_fill_polygon,
+  0 /* nogui_fill_pcb_polygon */ ,
   nogui_fill_rect,
   nogui_calibrate,
   nogui_shift_is_pressed,
@@ -415,6 +416,7 @@ apply_default_hid (HID * d, HID * s)
   AD (draw_arc);
   AD (fill_circle);
   AD (fill_polygon);
+  AD (fill_pcb_polygon);
   AD (calibrate);
   AD (shift_is_pressed);
   AD (control_is_pressed);
diff --git a/src/hid/gerber/gerber.c b/src/hid/gerber/gerber.c
index 1557228..181fdec 100644
--- a/src/hid/gerber/gerber.c
+++ b/src/hid/gerber/gerber.c
@@ -1095,6 +1095,7 @@ static HID gerber_hid = {
   gerber_draw_rect,
   gerber_fill_circle,
   gerber_fill_polygon,
+  0 /* gerber_fill_pcb_polygon */ ,
   gerber_fill_rect,
   gerber_calibrate,
   0 /* gerber_shift_is_pressed */ ,
diff --git a/src/hid/gtk/gtkhid-main.c b/src/hid/gtk/gtkhid-main.c
index 3332d7e..2590f29 100644
--- a/src/hid/gtk/gtkhid-main.c
+++ b/src/hid/gtk/gtkhid-main.c
@@ -13,12 +13,12 @@
 #include <time.h>
 
 
+#include "global.h"
 #include "action.h"
 #include "crosshair.h"
 #include "data.h"
 #include "draw.h"
 #include "error.h"
-#include "global.h"
 #include "mymem.h"
 #include "draw.h"
 #include "clip.h"
@@ -936,6 +936,21 @@ ghid_fill_polygon (hidGC gc, int n_coords, int *x, int *y)
 }
 
 void
+ghid_fill_pcb_polygon (hidGC gc, PolygonType *poly)
+{
+  BoxType clip_box;
+
+  USE_GC (gc);
+
+  clip_box.X1 = gport->view_x0;
+  clip_box.Y1 = gport->view_y0;
+  clip_box.X2 = gport->view_x0 + gport->view_width;
+  clip_box.Y2 = gport->view_y0 + gport->view_height;
+
+  hidgl_fill_pcb_polygon (poly, &clip_box, gport->zoom);
+}
+
+void
 ghid_fill_rect (hidGC gc, int x1, int y1, int x2, int y2)
 {
   USE_GC (gc);
@@ -1454,6 +1469,7 @@ HID ghid_hid = {
   ghid_draw_rect,
   ghid_fill_circle,
   ghid_fill_polygon,
+  ghid_fill_pcb_polygon,
   ghid_fill_rect,
 
   ghid_calibrate,
@@ -1514,6 +1530,7 @@ HID ghid_extents = {
   ghid_extents_draw_rect,
   ghid_extents_fill_circle,
   ghid_extents_fill_polygon,
+  0 /* ghid_extents_fill_pcb_polygon */ ,
   ghid_extents_fill_rect,
 
   0 /* ghid_calibrate */ ,
diff --git a/src/hid/gtk/gui-config.c b/src/hid/gtk/gui-config.c
index 55ab6e7..1b50d32 100644
--- a/src/hid/gtk/gui-config.c
+++ b/src/hid/gtk/gui-config.c
@@ -34,11 +34,11 @@
 #include <stdlib.h>
 #endif
 
+#include "gui.h"
 #include "hid.h"
 #include "../hidint.h"
 #include "gtkhid.h"
 
-#include "gui.h"
 #include "global.h"
 #include "action.h"
 #include "change.h"
diff --git a/src/hid/gtk/gui.h b/src/hid/gtk/gui.h
index 6b69a15..4c0dca3 100644
--- a/src/hid/gtk/gui.h
+++ b/src/hid/gtk/gui.h
@@ -27,6 +27,7 @@
 #ifndef __GHID_INCLUDED__
 #define __GHID_INCLUDED__
 
+#include "global.h"
 #include "hid.h"
 
 #include "data.h"
diff --git a/src/hid/lesstif/main.c b/src/hid/lesstif/main.c
index ce5e6a3..01f8778 100644
--- a/src/hid/lesstif/main.c
+++ b/src/hid/lesstif/main.c
@@ -3901,6 +3901,7 @@ HID lesstif_gui = {
   lesstif_draw_rect,
   lesstif_fill_circle,
   lesstif_fill_polygon,
+  0 /* lesstif_fill_pcb_polygon */ ,
   lesstif_fill_rect,
 
   lesstif_calibrate,
diff --git a/src/hid/lpr/lpr.c b/src/hid/lpr/lpr.c
index 5fcc9a7..b5f5a88 100644
--- a/src/hid/lpr/lpr.c
+++ b/src/hid/lpr/lpr.c
@@ -139,6 +139,7 @@ HID lpr_hid = {
   0 /* lpr_draw_rect */ ,
   0 /* lpr_fill_circle */ ,
   0 /* lpr_fill_polygon */ ,
+  0 /* lpr_fill_pcb_polygon */ ,
   0 /* lpr_fill_rect */ ,
   lpr_calibrate,
   0 /* lpr_shift_is_pressed */ ,
diff --git a/src/hid/nelma/nelma.c b/src/hid/nelma/nelma.c
index 964265a..0b90249 100644
--- a/src/hid/nelma/nelma.c
+++ b/src/hid/nelma/nelma.c
@@ -1073,6 +1073,7 @@ HID             nelma_hid = {
 	nelma_draw_rect,
 	nelma_fill_circle,
 	nelma_fill_polygon,
+	0 /* nelma_fill_pcb_polygon */ ,
 	nelma_fill_rect,
 	nelma_calibrate,
 	0 /* nelma_shift_is_pressed */ ,
diff --git a/src/hid/png/png.c b/src/hid/png/png.c
index 3c688bc..5a38351 100644
--- a/src/hid/png/png.c
+++ b/src/hid/png/png.c
@@ -1351,6 +1351,7 @@ HID png_hid = {
   png_draw_rect,
   png_fill_circle,
   png_fill_polygon,
+  0 /* png_fill_pcb_polygon */ ,
   png_fill_rect,
   png_calibrate,
   0 /* png_shift_is_pressed */ ,
diff --git a/src/hid/ps/eps.c b/src/hid/ps/eps.c
index 3545ddf..b1f0d86 100644
--- a/src/hid/ps/eps.c
+++ b/src/hid/ps/eps.c
@@ -636,6 +636,7 @@ static HID eps_hid = {
   eps_draw_rect,
   eps_fill_circle,
   eps_fill_polygon,
+  0 /* eps_fill_pcb_polygon */ ,
   eps_fill_rect,
   eps_calibrate,
   0 /* eps_shift_is_pressed */ ,
diff --git a/src/hid/ps/ps.c b/src/hid/ps/ps.c
index bfb2e09..af13511 100644
--- a/src/hid/ps/ps.c
+++ b/src/hid/ps/ps.c
@@ -1174,6 +1174,7 @@ HID ps_hid = {
   ps_draw_rect,
   ps_fill_circle,
   ps_fill_polygon,
+  0 /* ps_fill_pcb_polygon */,
   ps_fill_rect,
   ps_calibrate,
   0 /* ps_shift_is_pressed */ ,
