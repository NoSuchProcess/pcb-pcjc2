Bottom: 14efe750c226d35f6d72868c7fe2f22a86225bf0
Top:    fb0a8af95754419a92795a18dd158c5456e3000f
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-04-18 22:57:57 +0100

Refresh of give-the-hids-control-over-att

---

diff --git a/src/crosshair.c b/src/crosshair.c
index 62bde1c..4855c19 100644
--- a/src/crosshair.c
+++ b/src/crosshair.c
@@ -701,6 +701,21 @@ DrawMark (void)
 }
 
 
+/* ---------------------------------------------------------------------------
+ * notify the GUI that data relating to the crosshair is being changed.
+ *
+ * The argument passed is false to notify "changes are about to happen",
+ * and true to notify "changes have finished".
+ *
+ * Each call with a 'false' parameter must be matched with a following one
+ * with a 'true' parameter. Unmatched 'true' calls are currently not permitted,
+ * but might be allowed in the future.
+ *
+ * GUIs should not complain if they receive extra calls with 'true' as parameter.
+ * They should initiate a redraw of the crosshair attached objects - which may
+ * (if necessary) mean repainting the whole screen if the GUI hasn't tracked the
+ * location of existing attached drawing.
+ */
 void
 notify_crosshair_change (bool changes_complete)
 {
@@ -709,6 +724,20 @@ notify_crosshair_change (bool changes_complete)
 }
 
 
+/* ---------------------------------------------------------------------------
+ * notify the GUI that data relating to the mark is being changed.
+ *
+ * The argument passed is false to notify "changes are about to happen",
+ * and true to notify "changes have finished".
+ *
+ * Each call with a 'false' parameter must be matched with a following one
+ * with a 'true' parameter. Unmatched 'true' calls are currently not permitted,
+ * but might be allowed in the future.
+ *
+ * GUIs should not complain if they receive extra calls with 'true' as parameter.
+ * They should initiate a redraw of the mark - which may (if necessary) mean
+ * repainting the whole screen if the GUI hasn't tracked the mark's location.
+ */
 void
 notify_mark_change (bool changes_complete)
 {
@@ -758,11 +787,26 @@ CrosshairOff (void)
 }
 
 /* ---------------------------------------------------------------------------
- * Convenience for plugins using the old API
+ * Convenience for plugins using the old {Hide,Restore}Crosshair API.
+ * This links up to notify the GUI of the expected changes using the new APIs.
+ *
+ * Use of this old API is deprecated, as the names don't necessarily reflect
+ * what all GUIs may do in response to the notifications. Keeping these APIs
+ * is aimed at easing transition to the newer API, they will emit a harmless
+ * warning at the time of their first use.
+ *
  */
 void
 HideCrosshair (void)
 {
+  static bool warned_old_api = false;
+  if (!warned_old_api)
+    {
+      Message (_("WARNING: A plugin is using the deprecated API HideCrosshair().\n"
+                 "         This API may be removed in a future release of PCB.\n"));
+      warned_old_api = true;
+    }
+
   notify_crosshair_change (false);
   notify_mark_change (false);
 }
@@ -770,6 +814,14 @@ HideCrosshair (void)
 void
 RestoreCrosshair (void)
 {
+  static bool warned_old_api = false;
+  if (!warned_old_api)
+    {
+      Message (_("WARNING: A plugin is using the deprecated API RestoreCrosshair().\n"
+                 "         This API may be removed in a future release of PCB.\n"));
+      warned_old_api = true;
+    }
+
   notify_crosshair_change (true);
   notify_mark_change (true);
 }
