Bottom: 525fc9a1a5a941989abeaf096b23523314ccc0e4
Top:    ba793c268482d8118d0aeb1cff59da07e57e3401
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2010-06-02 22:04:14 +0100

Refresh of try-adding-polygon-objects-aft

---

diff --git a/src/pour.c b/src/pour.c
index c3e19e3..ee67723 100644
--- a/src/pour.c
+++ b/src/pour.c
@@ -74,6 +74,8 @@ RCSID ("$Id$");
  * local prototypes
  */
 
+static int subtract_plow (DataTypePtr Data, LayerTypePtr layer, PourTypePtr pour, int type, void *ptr1, void *ptr2);
+
 
 /* --------------------------------------------------------------------------
  * remove redundant polygon points. Any point that lies on the straight
@@ -460,8 +462,14 @@ struct cpInfo
   Boolean solder;
   POLYAREA *pg;
   BoxType *region;
+<<<<<<< current
   POLYAREA *accumulate;
   int batch_size;
+=======
+  int type;
+  void *ptr1;
+  void *ptr2;
+>>>>>>> patched
   jmp_buf env;
 };
 
@@ -477,6 +485,7 @@ subtract_accumulated (struct cpInfo *info)
 }
 
 static int
+<<<<<<< current
 pin_sub_callback (const BoxType * b, void *cl)
 {
   PinTypePtr pin = (PinTypePtr) b;
@@ -573,74 +582,36 @@ line_sub_callback (const BoxType * b, void *cl)
 
 static int
 text_sub_callback (const BoxType * b, void *cl)
+=======
+Group (DataTypePtr Data, Cardinal layer)
+>>>>>>> patched
 {
-  TextTypePtr text = (TextTypePtr) b;
-  struct cpInfo *info = (struct cpInfo *) cl;
-  POLYAREA *np;
-
-  /* don't subtract the object that was put back! */
-  if (b == info->other)
-    return 0;
-  if (!TEST_FLAG (CLEARLINEFLAG, text))
-    return 0;
-
-  np = get_subtract_text_poly (text, info->pour);
-  if (np == NULL)
-    return 0;
-
-  if (subtract_poly (np, &info->pg) < 0)
-    longjmp (info->env, 1);
-  return 1;
+  Cardinal i, j;
+  for (i = 0; i < max_layer; i++)
+    for (j = 0; j < ((PCBType *) (Data->pcb))->LayerGroups.Number[i]; j++)
+      if (layer == ((PCBType *) (Data->pcb))->LayerGroups.Entries[i][j])
+        return i;
+  return i;
 }
 
 static int
-poly_sub_callback (const BoxType * b, void *cl)
+clear_callback (const BoxType * b, void *cl)
 {
-  PolygonTypePtr poly = (PolygonTypePtr) b;
   struct cpInfo *info = (struct cpInfo *) cl;
-  POLYAREA *np;
 
   /* don't subtract the object that was put back! */
   if (b == info->other)
     return 0;
-  if (!TEST_FLAG (CLEARLINEFLAG, poly))
-    return 0;
 
-  np = get_subtract_polygon_poly (poly, info->pour);
-  if (np == NULL)
-    return 0;
-
-  if (subtract_poly (np, &info->pg) < 0)
-    longjmp (info->env, 1);
-  return 1;
-}
-
-static int
-pour_sub_callback (const BoxType * b, void *cl)
-{
-  PourTypePtr pour = (PourTypePtr) b;
-  struct cpInfo *info = (struct cpInfo *) cl;
-  BoxType *region = info->region;
-
-  return r_search (pour->polygon_tree, region, NULL, poly_sub_callback, info);
-
-}
-
-static int
-Group (DataTypePtr Data, Cardinal layer)
-{
-  Cardinal i, j;
-  for (i = 0; i < max_layer; i++)
-    for (j = 0; j < ((PCBType *) (Data->pcb))->LayerGroups.Number[i]; j++)
-      if (layer == ((PCBType *) (Data->pcb))->LayerGroups.Entries[i][j])
-        return i;
-  return i;
+  subtract_plow (info->data, info->layer, info->pour,
+                  info->type, (void *)b, (void *)b);
+  return 0;
 }
 
 /* NB: For convenience, we're passing the defined POLYAREA in here */
 static int
-ClearPour (DataTypePtr Data, LayerTypePtr Layer, PourType * pour,
-           POLYAREA **pg, const BoxType * here, BDimension expand)
+InitClearPour (DataTypePtr Data, LayerTypePtr Layer, PourType * pour,
+               const BoxType * here, BDimension expand)
 {
   int r = 0;
   BoxType region;
@@ -656,7 +627,6 @@ ClearPour (DataTypePtr Data, LayerTypePtr Layer, PourType * pour,
   info.other = here;
   info.layer = Layer;
   info.pour = pour;
-  info.pg = *pg;
   if (here)
     region = clip_box (here, &pour->BoundingBox);
   else
@@ -673,6 +643,7 @@ ClearPour (DataTypePtr Data, LayerTypePtr Layer, PourType * pour,
         r += r_search (Data->pad_tree, &region, NULL, pad_sub_callback, &info);
       GROUP_LOOP (Data, group);
       {
+<<<<<<< current
         r += r_search (layer->line_tree, &region, NULL, line_sub_callback, &info);
         subtract_accumulated (&info);
         r += r_search (layer->arc_tree,  &region, NULL, arc_sub_callback,  &info);
@@ -683,10 +654,29 @@ ClearPour (DataTypePtr Data, LayerTypePtr Layer, PourType * pour,
       r += r_search (Data->via_tree, &region, NULL, pin_sub_callback, &info);
       r += r_search (Data->pin_tree, &region, NULL, pin_sub_callback, &info);
       subtract_accumulated (&info);
+=======
+        info.layer = layer;
+        info.type = POUR_TYPE;
+        r += r_search (layer->pour_tree, &region, NULL, clear_callback, &info);
+        info.type = LINE_TYPE;
+        r += r_search (layer->line_tree, &region, NULL, clear_callback, &info);
+        info.type = ARC_TYPE;
+        r += r_search (layer->arc_tree,  &region, NULL, clear_callback, &info);
+        info.type = TEXT_TYPE;
+        r += r_search (layer->text_tree, &region, NULL, clear_callback, &info);
+      }
+      END_LOOP;
+      info.layer = Layer;
+      info.type = VIA_TYPE;
+      r += r_search (Data->via_tree, &region, NULL, clear_callback, &info);
+      info.type = PIN_TYPE;
+      r += r_search (Data->pin_tree, &region, NULL, clear_callback, &info);
+      info.type = PAD_TYPE;
+      if (info.solder || group == Group (Data, max_layer + COMPONENT_LAYER))
+        r += r_search (Data->pad_tree, &region, NULL, clear_callback, &info);
+>>>>>>> patched
     }
 
-  *pg = info.pg;
-
   return r;
 }
 
@@ -807,8 +797,12 @@ subtract_plow (DataTypePtr Data, LayerTypePtr layer, PourTypePtr pour,
 
   if (np == NULL)
     {
+<<<<<<< current
       mark_islands (Data, layer, pour, type, ptr1, ptr2);
       // printf ("Didn't get a POLYAREA to subtract, so bailing\n");
+=======
+//      printf ("Didn't get a POLYAREA to subtract, so bailing\n");
+>>>>>>> patched
       return 0;
     }
 
@@ -857,7 +851,7 @@ subtract_plow (DataTypePtr Data, LayerTypePtr layer, PourTypePtr pour,
 
   if (pg == NULL)
     {
-      printf ("Hmm, got pg == NULL in subtract_plow\n");
+//      printf ("Hmm, got pg == NULL in subtract_plow\n");
       poly_Free (&np);
       mark_islands (Data, layer, pour, type, ptr1, ptr2);
       return -1;
@@ -872,21 +866,10 @@ subtract_plow (DataTypePtr Data, LayerTypePtr layer, PourTypePtr pour,
 
   if (pg == NULL)
     {
-      printf ("Poly killed to death by subtracting\n");
+//      printf ("Poly killed to death by subtracting\n");
       return -1;
     }
 
-#if 0
-  count = 0;
-  { POLYAREA *pg_start;
-  pg_start = pg;
-  do {
-    count++;
-  } while ((pg = pg->f) != pg_start);
-  }
-  printf ("After subtract, counted %i polygon pieces\n", count);
-#endif
-
   count_all = count_added = 0;
   /* For each piece of the clipped up polygon, create a new child */
   start_pg = pg;
@@ -920,7 +903,7 @@ subtract_plow (DataTypePtr Data, LayerTypePtr layer, PourTypePtr pour,
     }
   while ((pg = tmp) != start_pg);
 
-  mark_islands (Data, layer, pour, type, ptr1, ptr2);
+//  mark_islands (Data, layer, pour, type, ptr1, ptr2);
 
   return 0;
 }
@@ -1135,19 +1118,6 @@ add_plow (DataTypePtr Data, LayerTypePtr layer, PourTypePtr pour,
   unite_poly (np, &pg);
 
 
-#if 0
-  count = 0;
-  { POLYAREA *pg_start;
-  pg_start = pg;
-  do {
-    count++;
-  } while ((pg = pg->f) != pg_start);
-  }
-  printf ("After unsubtract, counted %i polygon pieces\n", count);
-#endif
-
-  ClearPour (PCB->Data, layer, pour, &pg, (const BoxType *) ptr2, 2 * UNSUBTRACT_BLOAT);
-
   if (pg == NULL)
     {
       printf ("Poly killed to death somehow\n");
@@ -1187,9 +1157,9 @@ add_plow (DataTypePtr Data, LayerTypePtr layer, PourTypePtr pour,
     }
   while ((pg = tmp) != start_pg);
 
-  mark_islands (Data, layer, pour, type, ptr1, ptr2);
+  InitClearPour (Data, layer, pour, (const BoxType *) ptr2, 2 * UNSUBTRACT_BLOAT);
 
-//  printf ("ClearPour counted %i polygon pieces, and added the biggest %i\n", count_all, count_added);
+  mark_islands (Data, layer, pour, type, ptr1, ptr2);
 
   return 0;
 }
@@ -1199,8 +1169,7 @@ add_plow (DataTypePtr Data, LayerTypePtr layer, PourTypePtr pour,
 int
 InitPourClip (DataTypePtr Data, LayerTypePtr layer, PourType * pour)
 {
-  POLYAREA *pg, *tmp, *start_pg;
-  int count_all, count_added;
+  POLYAREA *pg;
 
   /* Free any children we might have */
   if (pour->PolygonN)
@@ -1220,51 +1189,38 @@ InitPourClip (DataTypePtr Data, LayerTypePtr layer, PourType * pour)
       printf ("Clipping returned NULL - can that be good?\n");
       return 0;
     }
-//  assert (poly_Valid (clipped));
-  if (TEST_FLAG (CLEARPOLYFLAG, pour))
-    {
-      /* Clip the pour against anything we can find in this layer */
-      ClearPour (Data, layer, pour, &pg, NULL, UNSUBTRACT_BLOAT);
-    }
+  assert (poly_Valid (clipped));
 
+<<<<<<< current
   if (pg == NULL)
     {
       printf ("Got pg == NULL for some reason\n");
       return 0;
     }
+=======
+  {
+    PolygonType *poly;
+>>>>>>> patched
 
-  count_all = count_added = 0;
-  /* For each piece of the clipped up polygon, create a new child */
-  start_pg = pg;
-  do
-    {
-      PolygonType *poly;
+    pg->f = pg;
+    pg->b = pg;
 
-      tmp = pg->f;
-      pg->f = pg;
-      pg->b = pg;
+    poly = CreateNewPolygonInPour (pour, pour->Flags);
+    poly->Clipped = pg;
+    CLEAR_FLAG (SELECTEDFLAG, poly);
 
-      count_all++;
-//      if (pg->contours->area > PCB->IsleArea)
-      if (1) // Breaks incremental updates otherwise
-        {
-          count_added++;
-          poly = CreateNewPolygonInPour (pour, pour->Flags);
-          poly->Clipped = pg;
-          CLEAR_FLAG (SELECTEDFLAG, poly);
+    SetPolygonBoundingBox (poly);
 
-          SetPolygonBoundingBox (poly);
+    if (pour->polygon_tree == NULL)
+      pour->polygon_tree = r_create_tree (NULL, 0, 0);
+    r_insert_entry (pour->polygon_tree, (BoxType *) poly, 0);
+  }
 
-          if (pour->polygon_tree == NULL)
-            pour->polygon_tree = r_create_tree (NULL, 0, 0);
-          r_insert_entry (pour->polygon_tree, (BoxType *) poly, 0);
-        }
-      else
-        {
-          poly_Free (&pg);
-        }
+  if (TEST_FLAG (CLEARPOLYFLAG, pour))
+    {
+      /* Clip the pour against anything we can find in this layer */
+      InitClearPour (Data, layer, pour, NULL, UNSUBTRACT_BLOAT);
     }
-  while ((pg = tmp) != start_pg);
 
   POURPOLYGON_LOOP (pour);
   {
@@ -1418,6 +1374,7 @@ ClearFromPours (DataType * Data, int type, void *ptr1, void *ptr2)
       InitPourClip (PCB->Data, (LayerTypePtr) ptr1, (PourTypePtr) ptr2);
     }
   PlowPours (Data, type, ptr1, ptr2, subtract_plow, False);
+  MarkPourIslands (Data, type, ptr1, ptr2);
 }
 
 #warning FIXME Later: We could perhaps reduce un-necessary computation by using this function
