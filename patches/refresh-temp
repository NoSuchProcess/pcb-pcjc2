Bottom: aa33cdd786d8034068f4e9b6749b9f2622474ebd
Top:    b8030400ee36fbc2a8db046f0a5cf6163f0ad15f
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-07-24 01:27:38 +0100

Refresh of bentley-ottann-test-implementa

---

diff --git a/src/borast/borast-bentley-ottmann.c b/src/borast/borast-bentley-ottmann.c
index 76f8e87..5cccfbc 100644
--- a/src/borast/borast-bentley-ottmann.c
+++ b/src/borast/borast-bentley-ottmann.c
@@ -1152,7 +1152,7 @@ _borast_bentley_ottmann_tessellate_bo_edges (borast_bo_event_t   **start_events,
     borast_bo_event_queue_t event_queue;
     borast_bo_sweep_line_t sweep_line;
     borast_bo_event_t *event;
-    borast_bo_edge_t *left, *right;
+    borast_bo_edge_t *left; /* , *right; */
     borast_bo_edge_t *e1;
 
 #if DEBUG_EVENTS
@@ -1242,7 +1242,7 @@ _borast_bentley_ottmann_tessellate_bo_edges (borast_bo_event_t   **start_events,
             }
 
             left = e1->prev;
-            right = e1->next;
+            /* right = e1->next */;
 
             break;
 
@@ -1251,7 +1251,7 @@ _borast_bentley_ottmann_tessellate_bo_edges (borast_bo_event_t   **start_events,
             _borast_bo_event_queue_delete (&event_queue, event);
 
             left = e1->prev;
-            right = e1->next;
+            /* right = e1->next; */
 
             _borast_bo_sweep_line_delete (&sweep_line, e1);
 
@@ -1385,7 +1385,6 @@ borast_status_t
 bo_poly_to_traps (POLYAREA *poly, borast_traps_t *traps)
 {
   int intersections;
-  borast_status_t status;
   borast_bo_start_event_t stack_events[BORAST_STACK_ARRAY_LENGTH (borast_bo_start_event_t)];
   borast_bo_start_event_t *events;
   borast_bo_event_t *stack_event_ptrs[ARRAY_LENGTH (stack_events) + 1];
@@ -1427,10 +1426,10 @@ bo_poly_to_traps (POLYAREA *poly, borast_traps_t *traps)
    * passes of the Bentley-Ottmann algorithm. It would merely
    * require storing the results of each pass into a temporary
    * borast_traps_t. */
-  status = _borast_bentley_ottmann_tessellate_bo_edges (event_ptrs,
-                                                       num_events,
-                                                       traps,
-                                                       &intersections);
+  _borast_bentley_ottmann_tessellate_bo_edges (event_ptrs,
+                                               num_events,
+                                               traps,
+                                               &intersections);
 
   for (n = 0; n < traps->num_traps; n++) {
     int x1, y1, x2, y2, x3, y3, x4, y4;
@@ -1483,7 +1482,6 @@ borast_status_t
 bo_contour_to_traps (PLINE *contour, borast_traps_t *traps)
 {
   int intersections;
-  borast_status_t status;
   borast_bo_start_event_t stack_events[BORAST_STACK_ARRAY_LENGTH (borast_bo_start_event_t)];
   borast_bo_start_event_t *events;
   borast_bo_event_t *stack_event_ptrs[ARRAY_LENGTH (stack_events) + 1];
@@ -1518,10 +1516,10 @@ bo_contour_to_traps (PLINE *contour, borast_traps_t *traps)
    * passes of the Bentley-Ottmann algorithm. It would merely
    * require storing the results of each pass into a temporary
    * borast_traps_t. */
-  status = _borast_bentley_ottmann_tessellate_bo_edges (event_ptrs,
-                                                       num_events,
-                                                       traps,
-                                                       &intersections);
+  _borast_bentley_ottmann_tessellate_bo_edges (event_ptrs,
+                                              num_events,
+                                              traps,
+                                              &intersections);
 
   for (n = 0; n < traps->num_traps; n++) {
     int x1, y1, x2, y2, x3, y3, x4, y4;
