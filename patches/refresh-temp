Bottom: 3359edb97d99f895d6b40a10b36ed7073de158c7
Top:    b56fd19d8ad1f93502ff2f417a7d443c768ea473
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2009-02-10 13:36:21 +0000

Refresh of add_pours

---

diff --git a/src/pour.c b/src/pour.c
index b27b0fd..0a4a1f7 100644
--- a/src/pour.c
+++ b/src/pour.c
@@ -318,6 +318,7 @@ subtract_poly (POLYAREA * np1, POLYAREA **pg)
     {
       fprintf (stderr, "Error while clipping PBO_SUB: %d\n", x);
       poly_Free (&merged);
+      *pg = NULL
       return -1;
     }
 
@@ -340,6 +341,7 @@ unite_poly (POLYAREA * np, POLYAREA ** pg)
     {
       fprintf (stderr, "Error while clipping PBO_UNITE: %d\n", x);
       poly_Free (&merged);
+      *pg = NULL;
       return 0;
     }
   assert (!merged || poly_Valid (merged));
@@ -360,6 +362,7 @@ intersect_poly (POLYAREA * np, POLYAREA ** pg)
     {
       fprintf (stderr, "Error while clipping PBO_ISECT: %d\n", x);
       poly_Free (&merged);
+      *pg = NULL;
       return 0;
     }
   assert (!merged || poly_Valid (merged));
@@ -1078,13 +1081,19 @@ InitPourClip (DataTypePtr Data, LayerTypePtr layer, PourType * pour)
       printf ("Clipping returned NULL - can that be good?\n");
       return 0;
     }
-  assert (poly_Valid (clipped));
+//  assert (poly_Valid (clipped));
   if (TEST_FLAG (CLEARPOLYFLAG, pour))
     {
       /* Clip the pour against anything we can find in this layer */
       ClearPour (Data, layer, pour, &pg, NULL, UNSUBTRACT_BLOAT);
     }
 
+  if (pg == NULL)
+    {
+      printf ("Got pg == NULL for some reason\n");
+      return;
+    }
+
   count_all = count_added = 0;
   /* For each piece of the clipped up polygon, create a new child */
   start_pg = pg;
