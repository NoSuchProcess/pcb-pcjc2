Bottom: 530d1268fb674d1698c9ce74782064e5b98d49bb
Top:    69a4482067e08f6a2fe02f5db89e5248e743b8df
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-08-28 14:48:56 +0100

Refresh of demo-of-exporter-specific-expo

---

diff --git a/src/hid/gerber/gerber.c b/src/hid/gerber/gerber.c
index a312aa3..e0f7096 100644
--- a/src/hid/gerber/gerber.c
+++ b/src/hid/gerber/gerber.c
@@ -52,7 +52,7 @@ RCSID ("$Id$");
 static HID_Attribute * gerber_get_export_options (int *n);
 static void gerber_do_export (HID_Attr_Val * options);
 static void gerber_parse_arguments (int *argc, char ***argv);
-static int gerber_set_layer (const char *name, int group, int empty);
+static int set_layer (const char *name, int group, int empty);
 static hidGC gerber_make_gc (void);
 static void gerber_destroy_gc (hidGC gc);
 static void gerber_use_mask (int use_it);
@@ -538,9 +538,6 @@ gerber_expose (HID * hid, BoxType *drawn_area, void *item)
   hid->set_color (Output.pmGC, "erase");
   hid->set_color (Output.bgGC, "drill");
 
-  PCB->Data->SILKLAYER.Color = PCB->ElementColor;
-  PCB->Data->BACKSILKLAYER.Color = PCB->InvisibleObjectsColor;
-
   memset (print_group, 0, sizeof (print_group));
   for (i = 0; i < max_copper_layer; i++)
     {
@@ -557,39 +554,39 @@ gerber_expose (HID * hid, BoxType *drawn_area, void *item)
       if (!print_group[group])
         continue;
 
-      if (gui->set_layer (0, group, 0))
+      if (set_layer (0, group, 0))
         if (DrawLayerGroup (group, drawn_area))
           DrawPPV (group, drawn_area);
     }
 
   count_holes (drawn_area, &nplated, &nunplated);
 
-  if (nplated && gui->set_layer ("plated-drill", SL (PDRILL, 0), 0))
-    DrawHoles (true, drawn_area);
+  if (nplated && set_layer ("plated-drill", SL (PDRILL, 0), 0))
+    DrawHoles (true, drawn_area, priv);
 
-  if (nunplated && gui->set_layer ("unplated-drill", SL (UDRILL, 0), 0))
-    DrawHoles (false, drawn_area);
+  if (nunplated && set_layer ("unplated-drill", SL (UDRILL, 0), 0))
+    DrawHoles (false, drawn_area, priv);
 
-  if (gui->set_layer ("componentmask", SL (MASK, TOP), 0))
-    DrawMask (COMPONENT_LAYER, drawn_area);
+  if (set_layer ("componentmask", SL (MASK, TOP), 0))
+    DrawMask (COMPONENT_LAYER, drawn_area, priv);
 
-  if (gui->set_layer ("soldermask", SL (MASK, BOTTOM), 0))
-    DrawMask (SOLDER_LAYER, drawn_area);
+  if (set_layer ("soldermask", SL (MASK, BOTTOM), 0))
+    DrawMask (SOLDER_LAYER, drawn_area, priv);
 
-  if (gui->set_layer ("topsilk", SL (SILK, TOP), 0))
-    DrawSilk (COMPONENT_LAYER, drawn_area);
+  if (set_layer ("topsilk", SL (SILK, TOP), 0))
+    DrawSilk (COMPONENT_LAYER, drawn_area, priv);
 
-  if (gui->set_layer ("bottomsilk", SL (SILK, BOTTOM), 0))
-    DrawSilk (SOLDER_LAYER, drawn_area);
+  if (set_layer ("bottomsilk", SL (SILK, BOTTOM), 0))
+    DrawSilk (SOLDER_LAYER, drawn_area, priv);
 
-  if (gui->set_layer ("toppaste", SL (PASTE, TOP), 0))
-    DrawPaste (COMPONENT_LAYER, drawn_area);
+  if (set_layer ("toppaste", SL (PASTE, TOP), 0))
+    DrawPaste (COMPONENT_LAYER, drawn_area, priv);
 
-  if (gui->set_layer ("bottompaste", SL (PASTE, BOTTOM), 0))
-    DrawPaste (SOLDER_LAYER, drawn_area);
+  if (set_layer ("bottompaste", SL (PASTE, BOTTOM), 0))
+    DrawPaste (SOLDER_LAYER, drawn_area, priv);
 
-  if (gui->set_layer ("fab", SL (FAB, 0), 0))
-    PrintFab (Output.fgGC);
+  if (set_layer ("fab", SL (FAB, 0), 0))
+    PrintFab (priv);
 
   gui->destroy_gc (Output.fgGC);
   gui->destroy_gc (Output.bgGC);
@@ -710,13 +707,13 @@ drill_sort (const void *va, const void *vb)
 }
 
 static int
-gerber_set_layer (const char *name, int group, int empty)
+set_layer (const char *name, int group, int empty)
 {
   int want_outline;
   char *cp;
   int idx = (group >= 0
-	     && group <
-	     max_group) ? PCB->LayerGroups.Entries[group][0] : group;
+             && group <
+             max_group) ? PCB->LayerGroups.Entries[group][0] : group;
 
   if (name == NULL)
     name = PCB->Data->Layer[idx].Name;
@@ -731,18 +728,18 @@ gerber_set_layer (const char *name, int group, int empty)
       int i;
       /* dump pending drills in sequence */
       qsort (pending_drills, n_pending_drills, sizeof (pending_drills[0]),
-	     drill_sort);
+             drill_sort);
       for (i = 0; i < n_pending_drills; i++)
-	{
-	  if (i == 0 || pending_drills[i].diam != pending_drills[i - 1].diam)
-	    {
-	      Aperture *ap = findAperture (curr_aptr_list, pending_drills[i].diam, ROUND);
-	      fprintf (f, "T%02d\r\n", ap->dCode);
-	    }
-	  pcb_fprintf (f, "X%06.0mlY%06.0ml\r\n",
-		   gerberDrX (PCB, pending_drills[i].x),
-		   gerberDrY (PCB, pending_drills[i].y));
-	}
+        {
+          if (i == 0 || pending_drills[i].diam != pending_drills[i - 1].diam)
+            {
+              Aperture *ap = findAperture (curr_aptr_list, pending_drills[i].diam, ROUND);
+              fprintf (f, "T%02d\r\n", ap->dCode);
+            }
+          pcb_fprintf (f, "X%06.0mlY%06.0ml\r\n",
+                   gerberDrX (PCB, pending_drills[i].x),
+                   gerberDrY (PCB, pending_drills[i].y));
+        }
       free (pending_drills);
       n_pending_drills = max_pending_drills = 0;
       pending_drills = NULL;
@@ -753,7 +750,7 @@ gerber_set_layer (const char *name, int group, int empty)
   current_mask = 0;
 #if 0
   printf ("Layer %s group %d drill %d mask %d\n", name, group, is_drill,
-	  is_mask);
+          is_mask);
 #endif
 
   if (group < 0 || group != lastgroup)
@@ -776,10 +773,10 @@ gerber_set_layer (const char *name, int group, int empty)
       aptr_list = setLayerApertureList (layer_list_idx++);
 
       if (finding_apertures)
-	goto emit_outline;
+        goto emit_outline;
 
       if (aptr_list->count == 0 && !all_layers)
-	return 0;
+        return 0;
 
       maybe_close_f (f);
       f = NULL;
@@ -788,45 +785,45 @@ gerber_set_layer (const char *name, int group, int empty)
       assign_file_suffix (filesuff, idx);
       f = fopen (filename, "wb");   /* Binary needed to force CR-LF */
       if (f == NULL) 
-	{
-	  Message ( "Error:  Could not open %s for writing.\n", filename);
-	  return 1;
-	}
+        {
+          Message ( "Error:  Could not open %s for writing.\n", filename);
+          return 1;
+        }
 
       was_drill = is_drill;
 
       if (verbose)
-	{
-	  int c = aptr_list->count;
-	  printf ("Gerber: %d aperture%s in %s\n", c,
-		  c == 1 ? "" : "s", filename);
-	}
+        {
+          int c = aptr_list->count;
+          printf ("Gerber: %d aperture%s in %s\n", c,
+                  c == 1 ? "" : "s", filename);
+        }
 
       if (is_drill)
-	{
-	  /* We omit the ,TZ here because we are not omitting trailing zeros.  Our format is
-	     always six-digit 0.1 mil resolution (i.e. 001100 = 0.11")*/
-	  fprintf (f, "M48\r\n" "INCH\r\n");
-	  for (search = aptr_list->data; search; search = search->next)
-	    pcb_fprintf (f, "T%02dC%.3mi\r\n", search->dCode, search->width);
-	  fprintf (f, "%%\r\n");
-	  /* FIXME */
-	  return 1;
-	}
+        {
+          /* We omit the ,TZ here because we are not omitting trailing zeros.  Our format is
+             always six-digit 0.1 mil resolution (i.e. 001100 = 0.11")*/
+          fprintf (f, "M48\r\n" "INCH\r\n");
+          for (search = aptr_list->data; search; search = search->next)
+            pcb_fprintf (f, "T%02dC%.3mi\r\n", search->dCode, search->width);
+          fprintf (f, "%%\r\n");
+          /* FIXME */
+          return 1;
+        }
 
       fprintf (f, "G04 start of page %d for group %d idx %d *\r\n",
-	       pagecount, group, idx);
+               pagecount, group, idx);
 
       /* Create a portable timestamp. */
       currenttime = time (NULL);
       {
-	/* avoid gcc complaints */
-	const char *fmt = "%c UTC";
-	strftime (utcTime, sizeof utcTime, fmt, gmtime (&currenttime));
+        /* avoid gcc complaints */
+        const char *fmt = "%c UTC";
+        strftime (utcTime, sizeof utcTime, fmt, gmtime (&currenttime));
       }
       /* Print a cute file header at the beginning of each file. */
       fprintf (f, "G04 Title: %s, %s *\r\n", UNKNOWN (PCB->Name),
-	       UNKNOWN (name));
+               UNKNOWN (name));
       fprintf (f, "G04 Creator: %s " VERSION " *\r\n", Progname);
       fprintf (f, "G04 CreationDate: %s *\r\n", utcTime);
 
@@ -838,7 +835,7 @@ gerber_set_layer (const char *name, int group, int empty)
 
       fprintf (f, "G04 Format: Gerber/RS-274X *\r\n");
       pcb_fprintf (f, "G04 PCB-Dimensions: %.0mc %.0mc *\r\n",
-	       PCB->MaxWidth, PCB->MaxHeight);
+               PCB->MaxWidth, PCB->MaxHeight);
       fprintf (f, "G04 PCB-Coordinate-Origin: lower left *\r\n");
 
       /* Signal data in inches. */
@@ -849,27 +846,27 @@ gerber_set_layer (const char *name, int group, int empty)
 
       /* build a legal identifier. */
       if (layername)
-	free (layername);
+        free (layername);
       layername = strdup (filesuff);
       if (strrchr (layername, '.'))
-	* strrchr (layername, '.') = 0;
+        * strrchr (layername, '.') = 0;
 
       for (cp=layername; *cp; cp++)
-	{
-	  if (isalnum((int) *cp))
-	    *cp = toupper((int) *cp);
-	  else
-	    *cp = '_';
-	}
+        {
+          if (isalnum((int) *cp))
+            *cp = toupper((int) *cp);
+          else
+            *cp = '_';
+        }
       fprintf (f, "%%LN%s*%%\r\n", layername);
       lncount = 1;
 
       for (search = aptr_list->data; search; search = search->next)
         fprintAperture(f, search);
       if (aptr_list->count == 0)
-	/* We need to put *something* in the file to make it be parsed
-	   as RS-274X instead of RS-274D. */
-	fprintf (f, "%%ADD11C,0.0100*%%\r\n");
+        /* We need to put *something* in the file to make it be parsed
+           as RS-274X instead of RS-274D. */
+        fprintf (f, "%%ADD11C,0.0100*%%\r\n");
     }
 
  emit_outline:
@@ -885,10 +882,10 @@ gerber_set_layer (const char *name, int group, int empty)
     want_outline = 1;
   if (copy_outline_mode == COPY_OUTLINE_ALL
       && (SL_TYPE (idx) == SL_SILK
-	  || SL_TYPE (idx) == SL_MASK
-	  || SL_TYPE (idx) == SL_FAB
-	  || SL_TYPE (idx) == SL_ASSY
-	  || SL_TYPE (idx) == 0))
+          || SL_TYPE (idx) == SL_MASK
+          || SL_TYPE (idx) == SL_FAB
+          || SL_TYPE (idx) == SL_ASSY
+          || SL_TYPE (idx) == 0))
     want_outline = 1;
 
   if (want_outline
@@ -896,24 +893,24 @@ gerber_set_layer (const char *name, int group, int empty)
       && strcmp (name, "route"))
     {
       if (outline_layer
-	  && outline_layer != PCB->Data->Layer+idx)
-	dapi->draw_layer (outline_layer, &region, NULL);
+          && outline_layer != PCB->Data->Layer+idx)
+        dapi->draw_layer (outline_layer, &region, NULL);
       else if (!outline_layer)
-	{
-	  hidGC gc = gui->make_gc ();
-	  printf("name %s idx %d\n", name, idx);
-	  if (SL_TYPE (idx) == SL_SILK)
-	    gui->set_line_width (gc, PCB->minSlk);
-	  else if (group >= 0)
-	    gui->set_line_width (gc, PCB->minWid);
-	  else
-	    gui->set_line_width (gc, AUTO_OUTLINE_WIDTH);
-	  gui->draw_line (gc, 0, 0, PCB->MaxWidth, 0);
-	  gui->draw_line (gc, 0, 0, 0, PCB->MaxHeight);
-	  gui->draw_line (gc, PCB->MaxWidth, 0, PCB->MaxWidth, PCB->MaxHeight);
-	  gui->draw_line (gc, 0, PCB->MaxHeight, PCB->MaxWidth, PCB->MaxHeight);
-	  gui->destroy_gc (gc);
-	}
+        {
+          hidGC gc = gui->make_gc ();
+          printf("name %s idx %d\n", name, idx);
+          if (SL_TYPE (idx) == SL_SILK)
+            gui->set_line_width (gc, PCB->minSlk);
+          else if (group >= 0)
+            gui->set_line_width (gc, PCB->minWid);
+          else
+            gui->set_line_width (gc, AUTO_OUTLINE_WIDTH);
+          gui->draw_line (gc, 0, 0, PCB->MaxWidth, 0);
+          gui->draw_line (gc, 0, 0, 0, PCB->MaxHeight);
+          gui->draw_line (gc, PCB->MaxWidth, 0, PCB->MaxWidth, PCB->MaxHeight);
+          gui->draw_line (gc, 0, PCB->MaxHeight, PCB->MaxWidth, PCB->MaxHeight);
+          gui->destroy_gc (gc);
+        }
     }
 
   return 1;
@@ -1344,7 +1341,6 @@ hid_gerber_init ()
   gerber_hid.get_export_options  = gerber_get_export_options;
   gerber_hid.do_export           = gerber_do_export;
   gerber_hid.parse_arguments     = gerber_parse_arguments;
-  gerber_hid.set_layer           = gerber_set_layer;
   gerber_hid.make_gc             = gerber_make_gc;
   gerber_hid.destroy_gc          = gerber_destroy_gc;
   gerber_hid.use_mask            = gerber_use_mask;
diff --git a/src/hid/ps/ps.c b/src/hid/ps/ps.c
index dbfc19e..01150f6 100644
--- a/src/hid/ps/ps.c
+++ b/src/hid/ps/ps.c
@@ -35,7 +35,7 @@ RCSID ("$Id$");
 
 #define CRASH fprintf(stderr, "HID error: pcb called unimplemented PS function %s.\n", __FUNCTION__); abort()
 
-static int ps_set_layer (const char *name, int group, int empty);
+static int set_layer (const char *name, int group, int empty);
 static void use_gc (hidGC gc);
 
 typedef struct hid_gc_struct
@@ -214,7 +214,6 @@ static struct {
   int pagecount;
   Coord linewidth;
   bool print_group[MAX_LAYER];
-  bool print_layer[MAX_LAYER];
   double fade_ratio;
   bool multi_file;
   Coord media_width, media_height, ps_width, ps_height;
@@ -238,8 +237,6 @@ static struct {
 
   double scale_factor;
 
-  BoxType region;
-
   HID_Attr_Val ps_values[NUM_OPTIONS];
 
   bool is_mask;
@@ -261,26 +258,6 @@ ps_get_export_options (int *n)
   return ps_attribute_list;
 }
 
-static int
-group_for_layer (int l)
-{
-  if (l < max_copper_layer + 2 && l >= 0)
-    return GetLayerGroupNumberByNumber (l);
-  /* else something unique */
-  return max_group + 3 + l;
-}
-
-static int
-layer_sort (const void *va, const void *vb)
-{
-  int a = *(int *) va;
-  int b = *(int *) vb;
-  int d = group_for_layer (b) - group_for_layer (a);
-  if (d)
-    return d;
-  return b - a;
-}
-
 void
 ps_start_file (FILE *f)
 {
@@ -435,6 +412,83 @@ psopen (const char *base, const char *which)
   return ps_open_file;
 }
 
+void
+ps_expose (void)
+{
+  HID *old_gui = gui;
+  int group;
+  int nplated, nunplated;
+  bool paste_empty;
+
+  gui = &ps_hid;
+  Output.fgGC = gui->make_gc ();
+  Output.bgGC = gui->make_gc ();
+  Output.pmGC = gui->make_gc ();
+
+  gui->set_color (Output.pmGC, "erase");
+  gui->set_color (Output.bgGC, "drill");
+
+  PCB->Data->SILKLAYER.Color = PCB->ElementColor;
+  PCB->Data->BACKSILKLAYER.Color = PCB->InvisibleObjectsColor;
+
+  /* draw all copper layers in group order */
+  for (group = 0; group < max_copper_layer; group++)
+    {
+      if (!global.print_group[group])
+        continue;
+
+      if (set_layer (0, group, 0))
+        if (DrawLayerGroup (group, NULL))
+          DrawPPV (group, NULL);
+    }
+
+  CountHoles (&nplated, &nunplated, NULL);
+
+  if (nplated && set_layer ("plated-drill", SL (PDRILL, 0), 0))
+    DrawHoles (true, false, NULL);
+
+  if (nunplated && set_layer ("unplated-drill", SL (UDRILL, 0), 0))
+    DrawHoles (false, true, NULL);
+
+  if (set_layer ("componentmask", SL (MASK, TOP), 0))
+    DrawMask (COMPONENT_LAYER, NULL);
+
+  if (set_layer ("soldermask", SL (MASK, BOTTOM), 0))
+    DrawMask (SOLDER_LAYER, NULL);
+
+  if (set_layer ("topsilk", SL (SILK, TOP), 0))
+    DrawSilk (COMPONENT_LAYER, NULL);
+
+  if (set_layer ("bottomsilk", SL (SILK, BOTTOM), 0))
+    DrawSilk (SOLDER_LAYER, NULL);
+
+  paste_empty = IsPasteEmpty (COMPONENT_LAYER);
+  if (set_layer ("toppaste", SL (PASTE, TOP), paste_empty))
+    DrawPaste (COMPONENT_LAYER, NULL);
+
+  paste_empty = IsPasteEmpty (SOLDER_LAYER);
+  if (set_layer ("bottompaste", SL (PASTE, BOTTOM), paste_empty))
+    DrawPaste (SOLDER_LAYER, NULL);
+
+  doing_assy = true;
+
+  if (set_layer ("topassembly", SL (ASSY, TOP), 0))
+    PrintAssembly (COMPONENT_LAYER, NULL);
+
+  if (set_layer ("bottomassembly", SL (ASSY, BOTTOM), 0))
+    PrintAssembly (SOLDER_LAYER, NULL);
+
+  doing_assy = false;
+
+  if (set_layer ("fab", SL (FAB, 0), 0))
+    PrintFab (Output.fgGC);
+
+  gui->destroy_gc (Output.fgGC);
+  gui->destroy_gc (Output.bgGC);
+  gui->destroy_gc (Output.pmGC);
+  gui = old_gui;
+}
+
 /* This is used by other HIDs that use a postscript format, like lpr
    or eps.  */
 void
@@ -492,41 +546,24 @@ ps_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
     }
 
   memset (global.print_group, 0, sizeof (global.print_group));
-  memset (global.print_layer, 0, sizeof (global.print_layer));
-
   global.outline_layer = NULL;
-
   for (i = 0; i < max_copper_layer; i++)
     {
       LayerType *layer = PCB->Data->Layer + i;
-      if (layer->LineN || layer->TextN || layer->ArcN || layer->PolygonN)
-	global.print_group[GetLayerGroupNumberByNumber (i)] = 1;
+      global.print_group[GetLayerGroupNumberByNumber (i)] = !IsLayerEmpty (layer);
 
       if (strcmp (layer->Name, "outline") == 0 ||
-	  strcmp (layer->Name, "route") == 0)
-	{
-	  global.outline_layer = layer;
-	}
+          strcmp (layer->Name, "route") == 0)
+        global.outline_layer = layer;
     }
   global.print_group[GetLayerGroupNumberByNumber (solder_silk_layer)] = 1;
   global.print_group[GetLayerGroupNumberByNumber (component_silk_layer)] = 1;
-  for (i = 0; i < max_copper_layer; i++)
-    if (global.print_group[GetLayerGroupNumberByNumber (i)])
-      global.print_layer[i] = 1;
-
-  memcpy (saved_layer_stack, LayerStack, sizeof (LayerStack));
-  qsort (LayerStack, max_copper_layer, sizeof (LayerStack[0]), layer_sort);
 
   global.linewidth = -1;
   /* reset static vars */
-  ps_set_layer (NULL, 0, -1);
+  set_layer (NULL, 0, -1);
   use_gc (NULL);
 
-  global.region.X1 = 0;
-  global.region.Y1 = 0;
-  global.region.X2 = PCB->MaxWidth;
-  global.region.Y2 = PCB->MaxHeight;
-
   if (!global.multi_file)
     {
       /* %%Page DSC requires both a label and an ordinal */
@@ -538,13 +575,13 @@ ps_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
 
       global.doing_toc = 1;
       global.pagecount = 1;  /* 'pagecount' is modified by hid_expose_callback() call */
-      hid_expose_callback (&ps_hid, &global.region, 0);
+      ps_expose ();
     }
 
   global.pagecount = 1; /* Reset 'pagecount' if single file */
   global.doing_toc = 0;
-  ps_set_layer (NULL, 0, -1);  /* reset static vars */
-  hid_expose_callback (&ps_hid, &global.region, 0);
+  set_layer (NULL, 0, -1);  /* reset static vars */
+  ps_expose ();
 
   if (the_file)
     fprintf (the_file, "showpage\n");
@@ -630,7 +667,7 @@ corner (FILE *fh, Coord x, Coord y, Coord dx, Coord dy)
 }
 
 static int
-ps_set_layer (const char *name, int group, int empty)
+set_layer (const char *name, int group, int empty)
 {
   static int lastgroup = -1;
   time_t currenttime;
@@ -645,21 +682,11 @@ ps_set_layer (const char *name, int group, int empty)
   if (empty)
     return 0;
 
-  if (idx >= 0 && idx < max_copper_layer && !global.print_layer[idx])
-    return 0;
-
-  if (strcmp (name, "invisible") == 0)
-    return 0;
-
   global.is_drill = (SL_TYPE (idx) == SL_PDRILL || SL_TYPE (idx) == SL_UDRILL);
   global.is_mask  = (SL_TYPE (idx) == SL_MASK);
   global.is_assy  = (SL_TYPE (idx) == SL_ASSY);
   global.is_copper = (SL_TYPE (idx) == 0);
   global.is_paste  = (SL_TYPE (idx) == SL_PASTE);
-#if 0
-  printf ("Layer %s group %d drill %d mask %d\n", name, group, global.is_drill,
-	  global.is_mask);
-#endif
 
   if (global.doing_toc)
     {
@@ -851,7 +878,7 @@ ps_set_layer (const char *name, int group, int empty)
       strcmp (name, "route") != 0
       )
     {
-      dapi->draw_layer (global.outline_layer, &global.region, NULL);
+      dapi->draw_layer (global.outline_layer, NULL, NULL);
     }
 
   return 1;
@@ -1342,7 +1369,6 @@ void ps_ps_init (HID *hid)
   hid->get_export_options = ps_get_export_options;
   hid->do_export          = ps_do_export;
   hid->parse_arguments    = ps_parse_arguments;
-  hid->set_layer          = ps_set_layer;
   hid->make_gc            = ps_make_gc;
   hid->destroy_gc         = ps_destroy_gc;
   hid->use_mask           = ps_use_mask;
@@ -1356,7 +1382,6 @@ void ps_ps_init (HID *hid)
   hid->draw_rect          = ps_draw_rect;
   hid->fill_circle        = ps_fill_circle;
   hid->fill_polygon       = ps_fill_polygon;
-  hid->fill_pcb_polygon   = ps_fill_pcb_polygon;
   hid->fill_rect          = ps_fill_rect;
   hid->calibrate          = ps_calibrate;
   hid->set_crosshair      = ps_set_crosshair;
