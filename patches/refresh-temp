Bottom: 81f7977a97c6b04cef9b72875f28cbdffc780bb1
Top:    bd829017325241c8e5810e497dd88c1df4c7ba21
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-07-23 23:42:48 +0100

Refresh of fixup-warnings-due-to-assigned

---

diff --git a/src/hid/gtk/gtkhid-main.c b/src/hid/gtk/gtkhid-main.c
index 2fcb37b..6a8d904 100644
--- a/src/hid/gtk/gtkhid-main.c
+++ b/src/hid/gtk/gtkhid-main.c
@@ -127,7 +127,6 @@ Note that zoom factors of zero are silently ignored.
 static int
 Zoom (int argc, char **argv, int x, int y)
 {
-  double factor;
   const char *vp;
   double v;
 
@@ -161,17 +160,14 @@ Zoom (int argc, char **argv, int x, int y)
   switch (argv[0][0])
     {
     case '-':
-      factor = 1 / v;
       zoom_by (1 / v, x, y);
       break;
     default:
     case '+':
-      factor = v;
       zoom_by (v, x, y);
       break;
     case '=':
       /* this needs to set the scale factor absolutely*/
-      factor = 1.0;
       zoom_to (v, x, y);
       break;
     }
@@ -184,7 +180,9 @@ static void
 zoom_to (double new_zoom, int x, int y)
 {
   double max_zoom, xfrac, yfrac;
+#ifdef DEBUG
   int cx, cy;
+#endif
 
   /* gport->zoom:
    * zoom value is PCB units per screen pixel.  Larger numbers mean zooming
@@ -229,13 +227,11 @@ zoom_to (double new_zoom, int x, int y)
 #ifdef DEBUG
   printf ("max_zoom = %g, xfrac = %g, yfrac = %g, new_zoom = %g\n", 
 	  max_zoom, xfrac, yfrac, new_zoom);
-#endif
 
   /* find center x and y */
   cx = gport->view_x0 + gport->view_width * xfrac * gport->zoom;
   cy = gport->view_y0 + gport->view_height * yfrac * gport->zoom;
 
-#ifdef DEBUG
   pcb_printf ("zoom_to():  x0 = %#mS, cx = %#mS\n", gport->view_x0, cx);
   pcb_printf ("zoom_to():  y0 = %#mS, cy = %#mS\n", gport->view_y0, cy);
 #endif
@@ -376,11 +372,9 @@ ghid_set_crosshair (int x, int y, int action)
   if (action == HID_SC_PAN_VIEWPORT)
     {
       GdkDisplay *display;
-      GdkScreen *screen;
       gint pos_x, pos_y, xofs, yofs;
       
       display = gdk_display_get_default ();
-      screen = gdk_display_get_default_screen (display); 
       
       /* figure out where the pointer is relative to the display */ 
       gdk_display_get_pointer (display, NULL, &pos_x, &pos_y, NULL); 
@@ -1648,16 +1642,10 @@ Benchmark (int argc, char **argv, int x, int y)
 {
   int i = 0;
   time_t start, end;
-  BoxType region;
   GdkDisplay *display;
 
   display = gdk_drawable_get_display (gport->drawable);
 
-  region.X1 = 0;
-  region.Y1 = 0;
-  region.X2 = PCB->MaxWidth;
-  region.Y2 = PCB->MaxHeight;
-
   gdk_display_sync (display);
   time (&start);
   do
diff --git a/src/hid/gtk/gui-library-window.c b/src/hid/gtk/gui-library-window.c
index 3c0c077..0339cf0 100644
--- a/src/hid/gtk/gui-library-window.c
+++ b/src/hid/gtk/gui-library-window.c
@@ -364,7 +364,6 @@ static void
 library_window_callback_tree_selection_changed (GtkTreeSelection * selection,
 						gpointer user_data)
 {
-  GtkTreeView *view;
   GtkTreeModel *model;
   GtkTreeIter iter;
   GhidLibraryWindow *library_window = (GhidLibraryWindow *) user_data;
@@ -374,7 +373,6 @@ library_window_callback_tree_selection_changed (GtkTreeSelection * selection,
   if (!gtk_tree_selection_get_selected (selection, &model, &iter))
     return;
 
-  view = gtk_tree_selection_get_tree_view (selection);
   gtk_tree_model_get (model, &iter, MENU_ENTRY_COLUMN, &entry, -1);
 
   if (entry == NULL)
diff --git a/src/hid/gtk/gui-top-window.c b/src/hid/gtk/gui-top-window.c
index b5caff9..b11d32c 100644
--- a/src/hid/gtk/gui-top-window.c
+++ b/src/hid/gtk/gui-top-window.c
@@ -1073,7 +1073,6 @@ layer_select_button_cb (GtkWidget * widget, LayerButtonSet * lb)
 static void
 layer_enable_button_cb (GtkWidget * widget, gpointer data)
 {
-  LayerButtonSet *lb;
   gint i, group, layer = GPOINTER_TO_INT (data);
   gboolean active, redraw = FALSE;
 
@@ -1082,7 +1081,6 @@ layer_enable_button_cb (GtkWidget * widget, gpointer data)
   if (layer_enable_button_cb_hold_off)
     return;
 
-  lb = &layer_buttons[layer];
   switch (layer)
     {
     case LAYER_BUTTON_SILK:
@@ -2292,12 +2290,11 @@ ghid_listener_cb (GIOChannel *source,
 static void
 ghid_create_listener (void)
 {
-  guint tag;
   GIOChannel *channel;
   int fd = fileno (stdin);
 
   channel = g_io_channel_unix_new (fd);
-  tag = g_io_add_watch (channel, G_IO_IN, ghid_listener_cb, NULL);
+  g_io_add_watch (channel, G_IO_IN, ghid_listener_cb, NULL);
 }
