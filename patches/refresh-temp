Bottom: 6b5713d6b293ef1dd5778d13c30e29861775f9b8
Top:    eeae336ac163dccf3fadc604422cc7df72d118c3
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-07-24 15:18:51 +0100

Refresh of hid-gtk-gtkhid-gl-c-convert-cr

---

diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index 3f7a77f..51c788d 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -756,14 +756,16 @@ draw_crosshair (gint x, gint y, gint z)
   prev = Crosshair.shape;
 }
 
-#define VCW 16
-#define VCD 8
+#define VCW 16 /* Crosshair pan-marker width in pixels */
+#define VCD 8  /* Crosshair pan-marker depth in pixels */
 
 void
 ghid_show_crosshair (gboolean paint_new_location)
 {
   gint x, y, z;
   gboolean draw_markers;
+  int vcw = VCW * gport->zoom;
+  int vcd = VCD * gport->zoom;
   static int done_once = 0;
   static GdkColor cross_color;
   extern float global_depth;
@@ -801,22 +803,26 @@ ghid_show_crosshair (gboolean paint_new_location)
   if (x >= 0 && paint_new_location && draw_markers)
     {
       glBegin (GL_QUADS);
-      glVertex3i (0,                       y - VCD,                  z);
-      glVertex3i (0,                       y - VCD + VCW,            z);
-      glVertex3i (VCD,                     y - VCD + VCW,            z);
-      glVertex3i (VCD,                     y - VCD,                  z);
-      glVertex3i (gport->view_width,       y - VCD,                  z);
-      glVertex3i (gport->view_width,       y - VCD + VCW,            z);
-      glVertex3i (gport->view_width - VCD, y - VCD + VCW,            z);
-      glVertex3i (gport->view_width - VCD, y - VCD,                  z);
-      glVertex3i (x - VCD,                 0,                        z);
-      glVertex3i (x - VCD,                 VCD,                      z);
-      glVertex3i (x - VCD + VCW,           VCD,                      z);
-      glVertex3i (x - VCD + VCW,           0,                        z);
-      glVertex3i (x - VCD,                 gport->view_height - VCD, z);
-      glVertex3i (x - VCD,                 gport->view_height,       z);
-      glVertex3i (x - VCD + VCW,           gport->view_height,       z);
-      glVertex3i (x - VCD + VCW,           gport->view_height - VCD, z);
+      glVertex3i (SIDE_X (gport->view_x0),                            y - vcd,       z);
+      glVertex3i (SIDE_X (gport->view_x0),                            y - vcd + vcw, z);
+      glVertex3i (SIDE_X (gport->view_x0 + vcd),                      y - vcd + vcw, z);
+      glVertex3i (SIDE_X (gport->view_x0 + vcd),                      y - vcd,       z);
+
+      glVertex3i (SIDE_X (gport->view_x0 + gport->view_width),        y - vcd,       z);
+      glVertex3i (SIDE_X (gport->view_x0 + gport->view_width),        y - vcd + vcw, z);
+      glVertex3i (SIDE_X (gport->view_x0 + gport->view_width - vcd),  y - vcd + vcw, z);
+      glVertex3i (SIDE_X (gport->view_x0 + gport->view_width - vcd),  y - vcd,       z);
+
+      glVertex3i (x - vcd,       SIDE_Y (gport->view_y0),                            z);
+      glVertex3i (x - vcd,       SIDE_Y (gport->view_y0 + vcd),                      z);
+      glVertex3i (x - vcd + vcw, SIDE_Y (gport->view_y0 + vcd),                      z);
+      glVertex3i (x - vcd + vcw, SIDE_Y (gport->view_y0),                            z);
+
+      glVertex3i (x - vcd,       SIDE_Y (gport->view_y0 + gport->view_height - vcd), z);
+      glVertex3i (x - vcd,       SIDE_Y (gport->view_y0 + gport->view_height),       z);
+      glVertex3i (x - vcd + vcw, SIDE_Y (gport->view_y0 + gport->view_height),       z);
+      glVertex3i (x - vcd + vcw, SIDE_Y (gport->view_y0 + gport->view_height - vcd), z);
+
       glEnd ();
     }
 
diff --git a/src/hid/gtk/gui.h b/src/hid/gtk/gui.h
index d033682..b7a67dd 100644
--- a/src/hid/gtk/gui.h
+++ b/src/hid/gtk/gui.h
@@ -62,6 +62,9 @@
 #define	TO_PCB_UNITS(v)		(Settings.grid_units_mm ? MM_TO_COORD(v) : MIL_TO_COORD(v))
 
 extern int ghid_flip_x, ghid_flip_y;
+#define FLIP_X(x)   ((ghid_flip_x ? -(x) : (x)))
+#define FLIP_Y(y)   ((ghid_flip_y ? -(y) : (y)))
+
 #define SIDE_X(x)   ((ghid_flip_x ? PCB->MaxWidth - (x) : (x)))
 #define SIDE_Y(y)   ((ghid_flip_y ? PCB->MaxHeight - (y) : (y)))
