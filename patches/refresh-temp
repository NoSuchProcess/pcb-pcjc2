Bottom: eb5c1822ba34dacdd842d701de2bcb6dfa215270
Top:    1f5639b83681bd2ec4c3eff6a179b30e387861ff
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-08-28 16:36:28 +0100

Refresh of hid-gerber-don-t-use-the-core-

---

diff --git a/src/hid/gerber/gerber.c b/src/hid/gerber/gerber.c
index dd151aa..a5405ce 100644
--- a/src/hid/gerber/gerber.c
+++ b/src/hid/gerber/gerber.c
@@ -303,7 +303,6 @@ static int lncount = 0;
 static int finding_apertures = 0;
 static int pagecount = 0;
 static int linewidth = -1;
-static int lastgroup = -1;
 static int lastcap = -1;
 static int lastcolor = -1;
 static int print_group[MAX_LAYER];
@@ -611,7 +610,6 @@ gerber_do_export (HID_Attr_Val * options)
 
   linewidth = -1;
   lastcap = -1;
-  lastgroup = -1;
   lastcolor = -1;
 
   region.X1 = 0;
@@ -622,7 +620,6 @@ gerber_do_export (HID_Attr_Val * options)
   pagecount = 1;
   resetApertures ();
 
-  lastgroup = -1;
   layer_list_idx = 0;
   finding_apertures = 1;
   gerber_expose (&gerber_hid, &region, 0);
@@ -701,121 +698,117 @@ set_layer (const char *name, int group, int empty)
           is_mask);
 #endif
 
-  if (group < 0 || group != lastgroup)
-    {
-      time_t currenttime;
-      char utcTime[64];
+  time_t currenttime;
+  char utcTime[64];
 #ifdef HAVE_GETPWUID
-      struct passwd *pwentry;
+  struct passwd *pwentry;
 #endif
-      ApertureList *aptr_list;
-      Aperture *search;
+  ApertureList *aptr_list;
+  Aperture *search;
 
-      lastgroup = group;
-      lastX = -1;
-      lastY = -1;
-      lastcolor = 0;
-      linewidth = -1;
-      lastcap = -1;
+  lastX = -1;
+  lastY = -1;
+  lastcolor = 0;
+  linewidth = -1;
+  lastcap = -1;
 
-      aptr_list = setLayerApertureList (layer_list_idx++);
+  aptr_list = setLayerApertureList (layer_list_idx++);
 
-      if (finding_apertures)
-        goto emit_outline;
+  if (finding_apertures)
+    goto emit_outline;
 
-      if (aptr_list->count == 0 && !all_layers)
-        return 0;
+  if (aptr_list->count == 0 && !all_layers)
+    return 0;
 
-      maybe_close_f (f);
-      f = NULL;
+  maybe_close_f (f);
+  f = NULL;
 
-      pagecount++;
-      assign_file_suffix (filesuff, idx);
-      f = fopen (filename, "wb");   /* Binary needed to force CR-LF */
-      if (f == NULL) 
-        {
-          Message ( "Error:  Could not open %s for writing.\n", filename);
-          return 1;
-        }
+  pagecount++;
+  assign_file_suffix (filesuff, idx);
+  f = fopen (filename, "wb");   /* Binary needed to force CR-LF */
+  if (f == NULL) 
+    {
+      Message ( "Error:  Could not open %s for writing.\n", filename);
+      return 1;
+    }
 
-      was_drill = is_drill;
+  was_drill = is_drill;
 
-      if (verbose)
-        {
-          int c = aptr_list->count;
-          printf ("Gerber: %d aperture%s in %s\n", c,
-                  c == 1 ? "" : "s", filename);
-        }
+  if (verbose)
+    {
+      int c = aptr_list->count;
+      printf ("Gerber: %d aperture%s in %s\n", c,
+              c == 1 ? "" : "s", filename);
+    }
 
-      if (is_drill)
-        {
-          /* We omit the ,TZ here because we are not omitting trailing zeros.  Our format is
-             always six-digit 0.1 mil resolution (i.e. 001100 = 0.11")*/
-          fprintf (f, "M48\r\n" "INCH\r\n");
-          for (search = aptr_list->data; search; search = search->next)
-            pcb_fprintf (f, "T%02dC%.3mi\r\n", search->dCode, search->width);
-          fprintf (f, "%%\r\n");
-          /* FIXME */
-          return 1;
-        }
+  if (is_drill)
+    {
+      /* We omit the ,TZ here because we are not omitting trailing zeros.  Our format is
+         always six-digit 0.1 mil resolution (i.e. 001100 = 0.11")*/
+      fprintf (f, "M48\r\n" "INCH\r\n");
+      for (search = aptr_list->data; search; search = search->next)
+        pcb_fprintf (f, "T%02dC%.3mi\r\n", search->dCode, search->width);
+      fprintf (f, "%%\r\n");
+      /* FIXME */
+      return 1;
+    }
 
-      fprintf (f, "G04 start of page %d for group %d idx %d *\r\n",
-               pagecount, group, idx);
-
-      /* Create a portable timestamp. */
-      currenttime = time (NULL);
-      {
-        /* avoid gcc complaints */
-        const char *fmt = "%c UTC";
-        strftime (utcTime, sizeof utcTime, fmt, gmtime (&currenttime));
-      }
-      /* Print a cute file header at the beginning of each file. */
-      fprintf (f, "G04 Title: %s, %s *\r\n", UNKNOWN (PCB->Name),
-               UNKNOWN (name));
-      fprintf (f, "G04 Creator: %s " VERSION " *\r\n", Progname);
-      fprintf (f, "G04 CreationDate: %s *\r\n", utcTime);
+  fprintf (f, "G04 start of page %d for group %d idx %d *\r\n",
+           pagecount, group, idx);
+
+  /* Create a portable timestamp. */
+  currenttime = time (NULL);
+  {
+    /* avoid gcc complaints */
+    const char *fmt = "%c UTC";
+    strftime (utcTime, sizeof utcTime, fmt, gmtime (&currenttime));
+  }
+  /* Print a cute file header at the beginning of each file. */
+  fprintf (f, "G04 Title: %s, %s *\r\n", UNKNOWN (PCB->Name),
+           UNKNOWN (name));
+  fprintf (f, "G04 Creator: %s " VERSION " *\r\n", Progname);
+  fprintf (f, "G04 CreationDate: %s *\r\n", utcTime);
 
 #ifdef HAVE_GETPWUID
-      /* ID the user. */
-      pwentry = getpwuid (getuid ());
-      fprintf (f, "G04 For: %s *\r\n", pwentry->pw_name);
+  /* ID the user. */
+  pwentry = getpwuid (getuid ());
+  fprintf (f, "G04 For: %s *\r\n", pwentry->pw_name);
 #endif
 
-      fprintf (f, "G04 Format: Gerber/RS-274X *\r\n");
-      pcb_fprintf (f, "G04 PCB-Dimensions: %.0mc %.0mc *\r\n",
-               PCB->MaxWidth, PCB->MaxHeight);
-      fprintf (f, "G04 PCB-Coordinate-Origin: lower left *\r\n");
+  fprintf (f, "G04 Format: Gerber/RS-274X *\r\n");
+  pcb_fprintf (f, "G04 PCB-Dimensions: %.0mc %.0mc *\r\n",
+           PCB->MaxWidth, PCB->MaxHeight);
+  fprintf (f, "G04 PCB-Coordinate-Origin: lower left *\r\n");
 
-      /* Signal data in inches. */
-      fprintf (f, "%%MOIN*%%\r\n");
+  /* Signal data in inches. */
+  fprintf (f, "%%MOIN*%%\r\n");
 
-      /* Signal Leading zero suppression, Absolute Data, 2.5 format */
-      fprintf (f, "%%FSLAX25Y25*%%\r\n");
+  /* Signal Leading zero suppression, Absolute Data, 2.5 format */
+  fprintf (f, "%%FSLAX25Y25*%%\r\n");
 
-      /* build a legal identifier. */
-      if (layername)
-        free (layername);
-      layername = strdup (filesuff);
-      if (strrchr (layername, '.'))
-        * strrchr (layername, '.') = 0;
+  /* build a legal identifier. */
+  if (layername)
+    free (layername);
+  layername = strdup (filesuff);
+  if (strrchr (layername, '.'))
+    * strrchr (layername, '.') = 0;
 
-      for (cp=layername; *cp; cp++)
-        {
-          if (isalnum((int) *cp))
-            *cp = toupper((int) *cp);
-          else
-            *cp = '_';
-        }
-      fprintf (f, "%%LN%s*%%\r\n", layername);
-      lncount = 1;
-
-      for (search = aptr_list->data; search; search = search->next)
-        fprintAperture(f, search);
-      if (aptr_list->count == 0)
-        /* We need to put *something* in the file to make it be parsed
-           as RS-274X instead of RS-274D. */
-        fprintf (f, "%%ADD11C,0.0100*%%\r\n");
+  for (cp=layername; *cp; cp++)
+    {
+      if (isalnum((int) *cp))
+        *cp = toupper((int) *cp);
+      else
+        *cp = '_';
     }
+  fprintf (f, "%%LN%s*%%\r\n", layername);
+  lncount = 1;
+
+  for (search = aptr_list->data; search; search = search->next)
+    fprintAperture(f, search);
+  if (aptr_list->count == 0)
+    /* We need to put *something* in the file to make it be parsed
+       as RS-274X instead of RS-274D. */
+    fprintf (f, "%%ADD11C,0.0100*%%\r\n");
 
  emit_outline:
   /* If we're printing a copper layer other than the outline layer,
