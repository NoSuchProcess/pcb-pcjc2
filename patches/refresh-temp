Bottom: 6d15870f09a26312e1164e60a5e708cf95e0b12a
Top:    2451e6090da9ab68b1a32fa9b03ef136f8d1651c
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2010-06-05 15:22:46 +0100

Refresh of support-holes-in-input-polygon

---

diff --git a/src/create.c b/src/create.c
index 3022db0..cb0fb2c 100644
--- a/src/create.c
+++ b/src/create.c
@@ -643,7 +643,7 @@ CreateNewPointInPolygon (PolygonTypePtr Polygon, LocationType X,
 PolygonType *
 CreateNewHoleInPolygon (PolygonType *Polygon)
 {
-  int *holeindex = GetHoleIndexMemoryInPolygon (Polygon);
+  Cardinal *holeindex = GetHoleIndexMemoryInPolygon (Polygon);
   *holeindex = Polygon->PointN;
   return Polygon;
 }
diff --git a/src/crosshair.c b/src/crosshair.c
index 75a29f8..d1aa847 100644
--- a/src/crosshair.c
+++ b/src/crosshair.c
@@ -48,6 +48,7 @@
 #include "misc.h"
 #include "mymem.h"
 #include "search.h"
+#include "polygon.h"
 
 #ifdef HAVE_LIBDMALLOC
 #include <dmalloc.h>
@@ -479,8 +480,7 @@ XORDrawMoveOrCopyObject (void)
 
 	polygon = (PolygonTypePtr) Crosshair.AttachedObject.Ptr2;
 	point = (PointTypePtr) Crosshair.AttachedObject.Ptr3;
-	point_idx = ((char *)point - (char *)polygon->Points) /
-		    sizeof (PointType);
+        point_idx = polygon_point_idx (polygon, point);
 
 	/* get previous and following point */
 	prev = prev_contour_point (polygon, point_idx);
diff --git a/src/mymem.c b/src/mymem.c
index 8117400..bed0f9b 100644
--- a/src/mymem.c
+++ b/src/mymem.c
@@ -462,10 +462,10 @@ GetPointMemoryInPolygon (PolygonTypePtr Polygon)
  * gets the next slot for a point in a polygon struct, allocates memory
  * if necessary
  */
-int *
+Cardinal *
 GetHoleIndexMemoryInPolygon (PolygonTypePtr Polygon)
 {
-  int *holeindex = Polygon->HoleIndex;
+  Cardinal *holeindex = Polygon->HoleIndex;
 
   /* realloc new memory if necessary and clear it */
   if (Polygon->HoleIndexN >= Polygon->HoleIndexMax)
diff --git a/src/mymem.h b/src/mymem.h
index d3ac668..81dff7a 100644
--- a/src/mymem.h
+++ b/src/mymem.h
@@ -83,7 +83,7 @@ RatTypePtr GetRatMemory (DataTypePtr);
 TextTypePtr GetTextMemory (LayerTypePtr);
 PolygonTypePtr GetPolygonMemory (LayerTypePtr);
 PointTypePtr GetPointMemoryInPolygon (PolygonTypePtr);
-int *GetHoleIndexMemoryInPolygon (PolygonTypePtr);
+Cardinal *GetHoleIndexMemoryInPolygon (PolygonTypePtr);
 ElementTypePtr GetElementMemory (DataTypePtr);
 BoxTypePtr GetBoxMemory (BoxListTypePtr);
 ConnectionTypePtr GetConnectionMemory (NetTypePtr);
diff --git a/src/polygon.c b/src/polygon.c
index dcf8978..0b34842 100644
--- a/src/polygon.c
+++ b/src/polygon.c
@@ -125,6 +125,14 @@ static double circleVerticies[] = {
 };
 
 Cardinal
+polygon_point_idx (PolygonTypePtr polygon, PointTypePtr point)
+{
+  assert (point >= polygon->Points);
+  assert (point <= polygon->Points + polygon->PointN);
+  return ((char *)point - (char *)polygon->Points) / sizeof (PointType);
+}
+
+Cardinal
 next_contour_point (PolygonTypePtr polygon, Cardinal point)
 {
   int hole; /* Must be a signed type */
diff --git a/src/polygon.h b/src/polygon.h
index 444c061..38777b1 100644
--- a/src/polygon.h
+++ b/src/polygon.h
@@ -33,6 +33,7 @@
 
 #include "global.h"
 
+Cardinal polygon_point_idx (PolygonTypePtr polygon, PointTypePtr point);
 Cardinal prev_contour_point (PolygonTypePtr polygon, Cardinal point);
 Cardinal next_contour_point (PolygonTypePtr polygon, Cardinal point);
 Cardinal GetLowestDistancePolygonPoint (PolygonTypePtr,
diff --git a/src/remove.c b/src/remove.c
index 83efc06..1964dfb 100644
--- a/src/remove.c
+++ b/src/remove.c
@@ -496,15 +496,7 @@ RemovePolygonPoint (LayerTypePtr Layer,
   if (Layer->On)
     ErasePolygon (Polygon);
   /* insert the polygon-point into the undo list */
-  POLYGONPOINT_LOOP (Polygon);
-  {
-    if (point == Point)
-      {
-	index = n;
-	break;
-      }
-  }
-  END_LOOP;
+  index = polygon_point_idx (Polygon, Point);
   AddObjectToRemovePointUndoList (POLYGONPOINT_TYPE, Layer, Polygon, index);
   r_delete_entry (Layer->polygon_tree, (BoxType *) Polygon);
   /* remove point from list, keep point order */
diff --git a/src/undo.c b/src/undo.c
index d10b4b9..1117c7d 100644
--- a/src/undo.c
+++ b/src/undo.c
@@ -779,15 +779,7 @@ UndoInsertPoint (UndoListTypePtr Entry)
 	Entry->Kind = POLYGON_TYPE;
 	Entry->Type = UNDO_REMOVE_POINT;
 #warning Any implication for holes? Do we need to store which contour the insert was in?
-	POLYGONPOINT_LOOP (polygon);
-	{
-	  if (pnt == point)
-	    {
-	      Entry->Data.RemovedPoint.Index = n;
-	      break;
-	    }
-	}
-	END_LOOP;
+	Entry->Data.RemovedPoint.Index = polygon_point_idx (polygon, pnt);
 	DestroyObject (PCB->Data, POLYGONPOINT_TYPE, layer, polygon, pnt);
 	if (andDraw && layer->On)
 	  DrawPolygon (layer, polygon, 0);
