Bottom: 4a6c3ec4e6780abe731323c17920230bd2ca63d4
Top:    c69a92bb1f37ef17085f795852ec3bd3feede3f5
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-09-14 08:50:19 +0100

Refresh of debug-drc-revert-issue

---

diff --git a/src/find.c b/src/find.c
index 753180d..c9fd784 100644
--- a/src/find.c
+++ b/src/find.c
@@ -224,6 +224,8 @@ static void GotoError (void);
 static void
 append_drc_violation (DrcViolationType *violation)
 {
+  printf ("append drc violation ------\n");
+#if 1
   if (gui->drc_gui != NULL)
     {
       gui->drc_gui->append_drc_violation (violation);
@@ -235,7 +237,7 @@ append_drc_violation (DrcViolationType *violation)
       append_drc_dialog_message (_("%m+near %$mD\n"),
                                  Settings.grid_unit->allow,
                                  violation->x, violation->y);
-      GotoError ();
+//      GotoError ();
     }
 
   if (gui->drc_gui == NULL || gui->drc_gui->log_drc_violations )
@@ -245,6 +247,8 @@ append_drc_violation (DrcViolationType *violation)
                Settings.grid_unit->allow,
                violation->x, violation->y);
     }
+#endif
+  printf ("append drc violation ------\n");
 }
 /*
  * message when asked about continuing DRC checks after next 
@@ -267,8 +271,9 @@ throw_drc_dialog(void)
     {
       /* Fallback to formatting the violation message as text */
       append_drc_dialog_message (DRC_CONTINUE);
-      r = gui->confirm_dialog (drc_dialog_message->str, DRC_CANCEL, DRC_NEXT);
+//      r = gui->confirm_dialog (drc_dialog_message->str, DRC_CANCEL, DRC_NEXT);
       reset_drc_dialog_message();
+      r = 1;
     }
   return r;
 }
diff --git a/src/undo.c b/src/undo.c
index 02333cf..9c992c8 100644
--- a/src/undo.c
+++ b/src/undo.c
@@ -260,6 +260,7 @@ GetUndoSlot (int CommandType, int ID, int Kind)
   ptr->Kind = Kind;
   ptr->ID = ID;
   ptr->Serial = Serial;
+  printf ("Got undo slot - new UndoN is %li, serial is %i\n", UndoN, Serial);
   return (ptr);
 }
 
@@ -537,8 +538,10 @@ UndoFlag (UndoListTypePtr Entry)
       FlagType f1, f2;
       PinTypePtr pin = (PinTypePtr) ptr2;
 
-      if (TEST_FLAG (LOCKFLAG, pin))
+      if (TEST_FLAG (LOCKFLAG, pin)) {
+        printf ("OBJECT IS LOCKED.. FAIL\n");
 	return (false);
+      }
 
       swap = pin->Flags;
 
@@ -961,7 +964,7 @@ Undo (bool draw)
   UndoListTypePtr ptr;
   int Types = 0;
   int unique;
-  printf("undo: %d\n", draw);
+  printf("undo: %d - current serial is %i, UndoN is %li\n", draw, Serial, UndoN);
 
   unique = TEST_FLAG (UNIQUENAMEFLAG, PCB);
   CLEAR_FLAG (UNIQUENAMEFLAG, PCB);
@@ -972,6 +975,7 @@ Undo (bool draw)
     {
       if (!UndoN)
 	{
+          printf ("FOOBAR\n");
 	  if (!Serial)
 	    Message (_("Nothing to undo - buffer is empty\n"));
 	  else
@@ -985,6 +989,7 @@ Undo (bool draw)
       ptr = &UndoList[UndoN - 1];
       if (ptr->Serial != Serial - 1)
 	{
+          printf ("******************************************\n");
 	  Message (_("Undo bad serial number %d expecting %d\n"),
 		   ptr->Serial, Serial - 1);
 	  Serial = ptr->Serial + 1;
@@ -1112,7 +1117,11 @@ PerformUndo (UndoListTypePtr ptr)
       if (UndoMirror (ptr))
 	return (UNDO_MIRROR);
       break;
+
+    default:
+      printf ("WTF - unhandled undo case: %i\n", ptr->Type);
     }
+  printf ("OK - some undo failed -> FAIL\n");
   return 0;
 }
