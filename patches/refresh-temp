Bottom: d79519e6305918f5af5050a31018916e83944138
Top:    44cffb5c43275e2d34befa2d99100af973b990ce
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2010-08-26 02:12:41 +0100

Refresh of major-re-write-to-drawing-rout

---

diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index 2bf84e7..4b902dc 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -38,7 +38,13 @@ RCSID ("$Id$");
 extern HID ghid_hid;
 extern int ghid_gui_is_up;
 
+static void ghid_global_alpha_mult (hidGC, double);
+
 static hidGC current_gc = NULL;
+static char *current_color = NULL;
+static double global_alpha_mult = 1.0;
+static int alpha_changed = 0;
+
 
 /* Sets gport->u_gc to the "right" GC to use (wrt mask or window)
 */
@@ -628,7 +634,6 @@ ghid_draw_everything (BoxTypePtr drawn_area)
   int reverse_layers;
   int save_show_solder;
 
-  extern char *current_color;
   extern bool Gathering;
 
   current_color = NULL;
@@ -777,7 +782,6 @@ ghid_drawing_area_expose_cb (GtkWidget *widget,
 {
   BoxType region;
   int eleft, eright, etop, ebottom;
-  extern HID ghid_hid;
   int min_x, min_y;
   int max_x, max_y;
   int new_x, new_y;
@@ -998,7 +1002,6 @@ gboolean
 ghid_pinout_preview_expose (GtkWidget *widget,
                             GdkEventExpose *ev)
 {
-  extern HID ghid_hid;
   GdkGLContext* pGlContext = gtk_widget_get_gl_context (widget);
   GdkGLDrawable* pGlDrawable = gtk_widget_get_gl_drawable (widget);
   GhidPinoutPreview *pinout = GHID_PINOUT_PREVIEW (widget);
@@ -1103,7 +1106,6 @@ ghid_pinout_preview_expose (GtkWidget *widget,
 GdkPixmap *
 ghid_render_pixmap (int cx, int cy, double zoom, int width, int height, int depth)
 {
-  extern HID ghid_hid;
   GdkGLConfig *glconfig;
   GdkPixmap *pixmap;
   GdkGLPixmap *glpixmap;
@@ -1500,10 +1502,6 @@ typedef struct
   double blue;
 } ColorCache;
 
-/* static */ char *current_color = NULL;
-/* static */ double global_alpha_mult = 1.0;
-/* static */ int alpha_changed = 0;
-
 void
 ghid_set_color (hidGC gc, const char *name)
 {
@@ -1618,7 +1616,7 @@ ghid_set_color (hidGC gc, const char *name)
   glColor4d (r, g, b, a);
 }
 
-void
+static void
 ghid_global_alpha_mult (hidGC gc, double alpha_mult)
 {
   if (alpha_mult != global_alpha_mult) {
