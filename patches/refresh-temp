Bottom: 0822574bc5c50994bb003a6dc3dd77b57003406e
Top:    149e292df5b6043f8605fe31555a7436e2070dc5
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-09-05 13:50:54 +0100

Refresh of hid-gtk-use-gtk_widget_get_win

---

diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index 21a22e8..13c45b0 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -1028,7 +1028,7 @@ ghid_pinout_preview_expose (GtkWidget *widget,
   GdkGLContext* pGlContext = gtk_widget_get_gl_context (widget);
   GdkGLDrawable* pGlDrawable = gtk_widget_get_gl_drawable (widget);
   GhidPinoutPreview *pinout = GHID_PINOUT_PREVIEW (widget);
-  int da_w, da_h;
+  GtkAllocation allocation;
   view_data save_view;
   int save_width, save_height;
   double xz, yz;
@@ -1039,18 +1039,18 @@ ghid_pinout_preview_expose (GtkWidget *widget,
 
   /* Setup zoom factor for drawing routines */
 
-  gdk_window_get_geometry (widget->window, 0, 0, &da_w, &da_h, 0);
-  xz = (double) pinout->x_max / da_w;
-  yz = (double) pinout->y_max / da_h;
+  gtk_widget_get_allocation (widget, &allocation);
+  xz = (double) pinout->x_max / allocation.width;
+  yz = (double) pinout->y_max / allocation.height;
   if (xz > yz)
     gport->view.coord_per_px = xz;
   else
     gport->view.coord_per_px = yz;
 
-  gport->width = da_w;
-  gport->height = da_h;
-  gport->view.width = da_w * gport->view.coord_per_px;
-  gport->view.height = da_h * gport->view.coord_per_px;
+  gport->width = allocation.width;
+  gport->height = allocation.height;
+  gport->view.width = allocation.width * gport->view.coord_per_px;
+  gport->view.height = allocation.height * gport->view.coord_per_px;
   gport->view.x0 = (pinout->x_max - gport->view.width) / 2;
   gport->view.y0 = (pinout->y_max - gport->view.height) / 2;
 
diff --git a/src/hid/gtk/gui-misc.c b/src/hid/gtk/gui-misc.c
index dbed88e..0f8daf7 100644
--- a/src/hid/gtk/gui-misc.c
+++ b/src/hid/gtk/gui-misc.c
@@ -382,7 +382,8 @@ ghid_get_pointer (int *x, int *y)
 {
   gint xp, yp;
 
-  gdk_window_get_pointer (gport->drawing_area->window, &xp, &yp, NULL);
+  gdk_window_get_pointer (gtk_widget_get_window (gport->drawing_area),
+                          &xp, &yp, NULL);
   if (x)
     *x = xp;
   if (y)
diff --git a/src/hid/gtk/gui-output-events.c b/src/hid/gtk/gui-output-events.c
index b9c5ab3..22dd54e 100644
--- a/src/hid/gtk/gui-output-events.c
+++ b/src/hid/gtk/gui-output-events.c
@@ -121,7 +121,7 @@ ghid_note_event_location (GdkEventButton * ev)
 
   if (!ev)
     {
-      gdk_window_get_pointer (ghid_port.drawing_area->window,
+      gdk_window_get_pointer (gtk_widget_get_window (ghid_port.drawing_area),
                               &event_x, &event_y, NULL);
     }
   else
@@ -391,7 +391,7 @@ ghid_port_drawing_area_configure_event_cb (GtkWidget * widget,
   if (gport->pixmap)
     gdk_pixmap_unref (gport->pixmap);
 
-  gport->pixmap = gdk_pixmap_new (widget->window,
+  gport->pixmap = gdk_pixmap_new (gtk_widget_get_window (widget),
 				  gport->width, gport->height, -1);
   gport->drawable = gport->pixmap;
 
diff --git a/src/hid/gtk/gui-pinout-preview.c b/src/hid/gtk/gui-pinout-preview.c
index 88576a1..c4bef20 100644
--- a/src/hid/gtk/gui-pinout-preview.c
+++ b/src/hid/gtk/gui-pinout-preview.c
@@ -197,7 +197,8 @@ ghid_pinout_preview_set_property (GObject * object, guint property_id,
     case PROP_ELEMENT_DATA:
       pinout_set_data (pinout, (ElementType *)g_value_get_pointer (value));
       if (GTK_WIDGET_REALIZED (GTK_WIDGET (pinout)))
-	gdk_window_invalidate_rect (GTK_WIDGET (pinout)->window, NULL, FALSE);
+        gdk_window_invalidate_rect (
+            gtk_widget_get_window (GTK_WIDGET (pinout)), NULL, FALSE);
       break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
diff --git a/src/hid/gtk/gui-top-window.c b/src/hid/gtk/gui-top-window.c
index f3e95e7..7dfeb64 100644
--- a/src/hid/gtk/gui-top-window.c
+++ b/src/hid/gtk/gui-top-window.c
@@ -1351,7 +1351,8 @@ ghid_build_pcb_top_window (void)
 
   gtk_widget_show_all (gport->top_window);
   ghid_pack_mode_buttons ();
-  gdk_window_set_back_pixmap (gport->drawing_area->window, NULL, FALSE);
+  gdk_window_set_back_pixmap (gtk_widget_get_window (gport->drawing_area),
+                              NULL, FALSE);
 }
 
 
@@ -1425,28 +1426,30 @@ ghid_interface_set_sensitive (gboolean sensitive)
 static void
 ghid_init_icons (GHidPort * port)
 {
-  XC_clock_source = gdk_bitmap_create_from_data (gport->top_window->window,
+  GdkWindow *window = gtk_widget_get_window (gport->top_window);
+
+  XC_clock_source = gdk_bitmap_create_from_data (window,
 						 (char *) rotateIcon_bits,
 						 rotateIcon_width,
 						 rotateIcon_height);
   XC_clock_mask =
-    gdk_bitmap_create_from_data (gport->top_window->window, (char *) rotateMask_bits,
+    gdk_bitmap_create_from_data (window, (char *) rotateMask_bits,
 				 rotateMask_width, rotateMask_height);
 
-  XC_hand_source = gdk_bitmap_create_from_data (gport->top_window->window,
+  XC_hand_source = gdk_bitmap_create_from_data (window,
 						(char *) handIcon_bits,
 						handIcon_width,
 						handIcon_height);
   XC_hand_mask =
-    gdk_bitmap_create_from_data (gport->top_window->window, (char *) handMask_bits,
+    gdk_bitmap_create_from_data (window, (char *) handMask_bits,
 				 handMask_width, handMask_height);
 
-  XC_lock_source = gdk_bitmap_create_from_data (gport->top_window->window,
+  XC_lock_source = gdk_bitmap_create_from_data (window,
 						(char *) lockIcon_bits,
 						lockIcon_width,
 						lockIcon_height);
   XC_lock_mask =
-    gdk_bitmap_create_from_data (gport->top_window->window, (char *) lockMask_bits,
+    gdk_bitmap_create_from_data (window, (char *) lockMask_bits,
 				 lockMask_width, lockMask_height);
 }
 
diff --git a/src/hid/gtk/gui-utils.c b/src/hid/gtk/gui-utils.c
index e9008c6..db61f77 100644
--- a/src/hid/gtk/gui-utils.c
+++ b/src/hid/gtk/gui-utils.c
@@ -92,7 +92,8 @@ ghid_modifier_keys_state (GdkModifierType * state)
   GHidPort *out = &ghid_port;
 
   if (!state)
-    gdk_window_get_pointer (out->drawing_area->window, NULL, NULL, &mask);
+    gdk_window_get_pointer (gtk_widget_get_window (out->drawing_area),
+                            NULL, NULL, &mask);
   else
     mask = *state;
 
@@ -129,7 +130,8 @@ ghid_button_state (GdkModifierType * state)
   GHidPort *out = &ghid_port;
 
   if (!state)
-    gdk_window_get_pointer (out->drawing_area->window, NULL, NULL, &mask);
+    gdk_window_get_pointer (gtk_widget_get_window (out->drawing_area),
+                            NULL, NULL, &mask);
   else
     mask = *state;
 
@@ -152,7 +154,8 @@ ghid_button_state (GdkModifierType * state)
 void
 ghid_draw_area_update (GHidPort * port, GdkRectangle * rect)
 {
-  gdk_window_invalidate_rect (port->drawing_area->window, rect, FALSE);
+  gdk_window_invalidate_rect (gtk_widget_get_window (port->drawing_area),
+                              rect, FALSE);
 }
