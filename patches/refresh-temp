Bottom: 70d766202658984ee7afcb2c60d98b1d21417ec8
Top:    c1ade9e6d0deca37a327a1ab0a144efbd4dc4756
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2008-10-02 16:36:17 +0100

Refresh of add-cache-for-noholes-diced-ve

---

diff --git a/src/draw.c b/src/draw.c
index 38daf9a..1a192b2 100644
--- a/src/draw.c
+++ b/src/draw.c
@@ -2171,25 +2171,23 @@ DrawPlainPolygon (LayerTypePtr Layer, PolygonTypePtr Polygon)
       if (!Gathering)
 	PolygonHoles (clip_box, Layer, Polygon, thin_callback);
     }
-  else //if (Polygon->NoHoles)//(Polygon->Clipped)
+  else if (Polygon->Clipped)
     {
       if (!Polygon->NoHolesValid)
         {
           ComputeNoHoles (Polygon);
         }
-
       if (Polygon->NoHoles)
         {
-          PolygonType poly;
+          PolygonType poly = *Polygon;
           poly.Clipped = Polygon->NoHoles;
           do {
             DrawPolygonLowLevel (&poly);
             poly.Clipped = poly.Clipped->f;
           } while (poly.Clipped != Polygon->NoHoles);
         }
-#if 0
-      NoHolesPolygonDicer (Polygon, DrawPolygonLowLevel, clip_box);
       /* draw other parts of the polygon if fullpoly flag is set */
+      /* NB: No "NoHoles" cache for these */
       if (TEST_FLAG (FULLPOLYFLAG, Polygon))
 	{
 	  POLYAREA *pg;
@@ -2200,7 +2198,6 @@ DrawPlainPolygon (LayerTypePtr Layer, PolygonTypePtr Polygon)
 	      NoHolesPolygonDicer (&poly, DrawPolygonLowLevel, clip_box);
 	    }
 	}
-#endif
     }
   /* if the gui has the dicer flag set then it won't draw missing poly outlines */
   if (TEST_FLAG (CHECKPLANESFLAG, PCB) && Polygon->Clipped && !Gathering
@@ -2223,7 +2220,10 @@ DrawPlainPolygon (LayerTypePtr Layer, PolygonTypePtr Polygon)
 	    }
 	  gui->set_line_width (Output.fgGC, 1);
 	  for (i = 0; i < n - 1; i++)
-	    gui->draw_line (Output.fgGC, x[i], y[i], x[i + 1], y[i + 1]);
+	    {
+	      gui->draw_line (Output.fgGC, x[i], y[i], x[i + 1], y[i + 1]);
+	      /* gui->fill_circle (Output.bgGC, x[i], y[i], 10); */
+	    }
 	  gui->draw_line (Output.fgGC, x[n - 1], y[n - 1], x[0], y[0]);
 	  free (x);
 	  free (y);
@@ -2231,7 +2231,6 @@ DrawPlainPolygon (LayerTypePtr Layer, PolygonTypePtr Polygon)
     }
 }
 
-
 /* ---------------------------------------------------------------------------
  * draws an element
  */
diff --git a/src/polygon.c b/src/polygon.c
index ecf11f4..e577a93 100644
--- a/src/polygon.c
+++ b/src/polygon.c
@@ -81,7 +81,7 @@ static void
 add_noholes_polyarea (PolygonType *noholes_poly, void *user_data)
 {
   PolygonType *poly = user_data;
-  PLINE *pline;//, last;
+  PLINE *pline;
   POLYAREA *new_area;
 
   new_area = malloc (sizeof (POLYAREA) * 1);
@@ -91,7 +91,6 @@ add_noholes_polyarea (PolygonType *noholes_poly, void *user_data)
   new_area->contours = pline;
 
   /* Link the new POLYAREA into the NoHoles circularaly linked list */
-
   if (poly->NoHoles)
     {
       new_area->f = poly->NoHoles;
@@ -106,17 +105,13 @@ add_noholes_polyarea (PolygonType *noholes_poly, void *user_data)
     }
 
   poly->NoHoles = new_area;
-
 }
 
 void
 ComputeNoHoles (PolygonType *poly)
 {
-  /* TODO: IS THIS RIGHT? */
   if (poly->NoHoles)
-    {
-      poly_Free (&poly->NoHoles);
-    }
+    poly_Free (&poly->NoHoles);
   poly->NoHoles = NULL;
   if (poly->Clipped)
     NoHolesPolygonDicer (poly, add_noholes_polyarea, poly, NULL);
@@ -158,7 +153,7 @@ biggest (POLYAREA * p)
           big = n->contours->area;
         }
     }
-  while ((n = n->f) != p); /* TODO: Decipher this line ... is it pointless? Is it just "n=p"? */
+  while ((n = n->f) != p);
   assert (top);
   if (top == p)
     return p;
@@ -1012,9 +1007,7 @@ InitClip (DataTypePtr Data, LayerTypePtr layer, PolygonType * p)
     poly_Free (&p->Clipped);
   p->Clipped = original_poly (p);
   if (p->NoHoles)
-    {
-      poly_Free (&p->NoHoles);
-    }
+    poly_Free (&p->NoHoles);
   p->NoHoles = NULL;
   if (!p->Clipped)
     return 0;
