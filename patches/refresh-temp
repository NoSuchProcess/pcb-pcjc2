Bottom: 747aa93e5dd0d36a501ef87b93a5fdc78d1ee8cd
Top:    2480eaed1c1ac5f5aa68a7fac5c3dd84e89c1f36
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2009-04-02 20:29:33 +0100

Refresh of drop-in-pcb-gl-code-various-me

---

diff --git a/src/hid/gtk/gui-render-pixmap.c b/src/hid/gtk/gui-render-pixmap.c
index a17eb21..eeef8d5 100644
--- a/src/hid/gtk/gui-render-pixmap.c
+++ b/src/hid/gtk/gui-render-pixmap.c
@@ -39,18 +39,23 @@
 RCSID ("$Id$");
 
 
+#define Z_NEAR 3.0
+
+
 GdkPixmap *
 ghid_render_pixmap (int cx, int cy, double zoom, int width, int height, int depth)
 {
   extern HID ghid_hid;
+  GdkGLConfig *glconfig;
   GdkPixmap *pixmap;
-  GdkDrawable *save_drawable;
+  GdkGLPixmap *glpixmap;
+  GdkGLContext* glcontext;
+  GdkGLDrawable* gldrawable;
   double save_zoom;
   int save_left, save_top;
   int save_width, save_height;
   int save_view_width, save_view_height;
 
-  save_drawable = gport->drawable;
   save_zoom = gport->zoom;
   save_width = gport->width;
   save_height = gport->height;
@@ -59,27 +64,81 @@ ghid_render_pixmap (int cx, int cy, double zoom, int width, int height, int dept
   save_view_width = gport->view_width;
   save_view_height = gport->view_height;
 
+  /* Setup rendering context for drawing routines
+   */
+
+  glconfig = gdk_gl_config_new_by_mode (GDK_GL_MODE_RGB     |
+                                        GDK_GL_MODE_STENCIL |
+//                                        GDK_GL_MODE_DEPTH   |
+                                        GDK_GL_MODE_SINGLE);
+
   pixmap = gdk_pixmap_new (NULL, width, height, depth);
+  glpixmap = gdk_pixmap_set_gl_capability (pixmap, glconfig, NULL);
+  gldrawable = GDK_GL_DRAWABLE (glpixmap);
+  glcontext = gdk_gl_context_new (gldrawable, NULL, FALSE, GDK_GL_RGBA_TYPE);
 
-  /* Setup drawable and zoom factor for drawing routines
-   */
+  /* Setup zoom factor for drawing routines */
 
-  gport->drawable = pixmap;
   gport->zoom = zoom;
   gport->width = width;                         // Pixels
   gport->height = height;                       // Pixels
   gport->view_width = width * gport->zoom;      // PCB Units
   gport->view_height = height * gport->zoom;    // PCB Units
   gport->view_x0 = cx - gport->view_height / 2; // PCB Units
-  gport->view_y0 = cy - gport->view_width  / 2; // PCB Units
+  gport->view_y0 = cy - gport->view_width / 2;  // PCB Units
+
+  /* make GL-context "current" */
+  if (!gdk_gl_drawable_gl_begin (gldrawable, glcontext)) {
+    return NULL;
+  }
+
+  glEnable (GL_BLEND);
+  glBlendFunc (GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
 
-  /* clear background */
-  gdk_draw_rectangle (pixmap, gport->bg_gc, TRUE, 0, 0, width, height);
+  glViewport (0, 0, width, height);
+
+  glEnable (GL_SCISSOR_TEST);
+  glScissor (0, 0, width, height);
+
+  glMatrixMode (GL_PROJECTION);
+  glLoadIdentity ();
+  glOrtho (0, width, height, 0, 0, 100);
+  glMatrixMode (GL_MODELVIEW);
+  glLoadIdentity ();
+  glTranslatef (0.0f, 0.0f, -Z_NEAR);
+
+  glClearColor (gport->bg_color.red / 65535.,
+                gport->bg_color.green / 65535.,
+                gport->bg_color.blue / 65535.,
+                1.);
+  glClearStencil (0);
+  glClear (GL_COLOR_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);
 
   /* call the drawing routine */
+  hidgl_init_triangle_array (&buffer);
+  ghid_invalidate_current_gc ();
+  glPushMatrix ();
+  glScalef ((ghid_flip_x ? -1. : 1.) / gport->zoom,
+            (ghid_flip_y ? -1. : 1.) / gport->zoom, 1);
+  glTranslatef (ghid_flip_x ? gport->view_x0 - PCB->MaxWidth  :
+                             -gport->view_x0,
+                ghid_flip_y ? gport->view_y0 - PCB->MaxHeight :
+                             -gport->view_y0, 0);
   hid_expose_callback (&ghid_hid, NULL, NULL);
+  hidgl_flush_triangles (&buffer);
+  glPopMatrix ();
+
+  glFlush ();
+
+  /* end drawing to current GL-context */
+  gdk_gl_drawable_gl_end (gldrawable);
+//  gdk_gl_context_destroy (glcontext);
+
+  gdk_pixmap_unset_gl_capability (pixmap);
+
+  g_object_unref (glconfig);
+  g_object_unref (glcontext);
 
-  gport->drawable = save_drawable;
   gport->zoom = save_zoom;
   gport->width = save_width;
   gport->height = save_height;
