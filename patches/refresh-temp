Bottom: 58d7016c3c884d3782c3596d5ece58c2a54df64f
Top:    7e09c5be87de31daf5fbca748354542408ddd181
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2009-02-10 19:41:34 +0000

Refresh of attempt-to-fix-slowness

---

diff --git a/src/polygon1.c b/src/polygon1.c
index 08d74b1..0364ddd 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -1152,7 +1152,6 @@ PutContour (jmp_buf * e, PLINE * cntr, POLYAREA ** contours, PLINE ** holes,
 	{
 	  cntr->next = parent_contour->next;
 	  parent_contour->next = cntr;
-//          printf ("Put Contour adding a hole directly to its parent\n");
           if (owner != parent)
             {
               if (owner != NULL)
@@ -1164,7 +1163,6 @@ PutContour (jmp_buf * e, PLINE * cntr, POLYAREA ** contours, PLINE ** holes,
 	{
 	  cntr->next = *holes;
 	  *holes = cntr;	/* let cntr be 1st hole in list */
-//          printf ("Put Contour adding a hole\n");
           /* We don't insert the holes into an r-tree,
            * they just form a linked list */
           if (owner != NULL)
@@ -1737,28 +1735,20 @@ M_POLYAREA_update_primary (jmp_buf * e, POLYAREA ** pieces,
   int del_outside = 0;
   int finished;
 
-//  printf ("M_POLYAREA_update_primary %p, %p, %i\n", pieces, holes, action);
-
-  if (a == NULL) {
-    printf ("M_POLYAREA_update_primary: No polygon pieces to play with\n");
+  if (a == NULL)
     return;
-  }
 
   switch (action) {
     case PBO_ISECT:
-//      printf ("  PBO_ISECT: Delete any contours OUTSIDE b\n");
       del_outside = 1;
       break;
     case PBO_UNITE:
-//      printf ("  PBO_UNITE: Delete any contours INSIDE B (B's contour replaces it)\n");
       del_inside = 1;
       break;
     case PBO_SUB:
-//      printf ("  PBO_SUB: Delete any contours INSIDE B (B's contour deletes it)\n");
       del_inside = 1;
       break;
     case PBO_XOR: /* NOT IMPLEMENTED OR USED */
-//      printf ("  PBO_XOR: Invert any which are INSIDE B  *** NOT IMPLEMENTED ***\n");
       inv_inside = 1;
       break;
   }
@@ -1770,8 +1760,6 @@ M_POLYAREA_update_primary (jmp_buf * e, POLYAREA ** pieces,
     anext = a->f;
     finished = (anext == *pieces);
 
-//    printf ("Inspecting a piece of polygon\n");
-
     prev = NULL;
     for (curc = a->contours; curc != NULL; curc = next) {
       int is_first = contour_is_first (a, curc);
@@ -1786,7 +1774,6 @@ M_POLYAREA_update_primary (jmp_buf * e, POLYAREA ** pieces,
       switch (curc->Flags.status) {
         case ISECTED:
           isect_contour = 1;
-//          printf ("Found intersected contour\n");
           break;
         case INSIDE:
           if (del_inside) del_contour = 1;
@@ -1808,23 +1795,19 @@ M_POLYAREA_update_primary (jmp_buf * e, POLYAREA ** pieces,
         if (del_contour) {
           /* Delete the contour */
           poly_DelContour (&curc); /* NB: Sets curc to NULL */
-//          printf ("Deleting contour we don't want in the result\n");
         } else if (isect_contour) {
           /* Link into the list of intersected contours */
           curc->next = *isected;
           *isected = curc;
-//          printf ("Separating intersected contour.\n");
         } else if (hole_contour) {
           /* Link into the list of holes */
           curc->next = *holes;
           *holes = curc;
-//          printf ("Separating a hole (belonging to a moved contour)\n");
         } else {
           assert (0);
         }
 
         if (is_first && is_last) {
-//          printf ("M_POLYAREA_update_primary: Deleted / removed the whole polygon piece\n");
           remove_polyarea (pieces, a);
           poly_Free (&a); /* NB: Sets a to NULL */
         }
@@ -1844,15 +1827,8 @@ M_POLYAREA_update_primary (jmp_buf * e, POLYAREA ** pieces,
       hole_contour = 1;
     }
 
-    /* If we deleted all the pieces of the polyarea, *pieces is NULL and
-       we don't want to continue */
-    if (*pieces == NULL) {
-//      printf ("M_POLYAREA_update_primary: Deleted / removed _all_"
-//              "of the existing polygon pieces\n");
-      finished = TRUE;
-    }
-
-  } while ((a = anext), !finished);
+    /* If we deleted all the pieces of the polyarea, *pieces is NULL */
+  } while ((a = anext), *pieces == NULL && !finished);
 }
 
 
@@ -1862,8 +1838,6 @@ M_POLYAREA_Collect_separated (jmp_buf * e, PLINE * afst, POLYAREA ** contours,
 {
   PLINE **cur, **next;
 
-//  printf ("M_POLYAREA_Collect_separated %p, %p, %p, %i, %i\n", afst, contours, holes, action, maybe);
-
   assert (a != NULL);
 
   for (cur = &afst; *cur != NULL; cur = next) {
