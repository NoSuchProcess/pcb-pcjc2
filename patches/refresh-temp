Bottom: 197fa9d6089cf3f1050a93a09906554fdca6fb60
Top:    d490b61853c8dd2ac03f2a3ee29c558dc2f591bd
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2014-06-29 18:45:16 +0100

Refresh of tag-vnodes-with-details-of

---

diff --git a/src/misc.c b/src/misc.c
index eec9893..b784c59 100644
--- a/src/misc.c
+++ b/src/misc.c
@@ -1101,7 +1101,14 @@ ParseGroupString (char *group_string, LayerGroupType *LayerGroup, int *LayerN)
           /* ignore white spaces and check for separator */
           while (*s && isspace ((int) *s))
             s++;
-          if (!*s || *s == ':')
+
+          /* Backup so the outer loop terminates on the NULL termination */
+          if (*s == '\0') {
+            s--;
+            break;
+          }
+
+          if (*s == ':')
             break;
         }
       LayerGroup->Number[group] = member;
diff --git a/src/polygon1.c b/src/polygon1.c
index 5502c29..694a161 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -2843,12 +2843,24 @@ poly_InclVertex (VNODE * after, VNODE * node)
   if (node->prev->prev == node)
     return;			/* we don't have 3 points in the poly yet */
 
+  /* NB: a-b below is the two-dimensional cross product of the vectors
+   *     node->prev->prev->point -> node->prev->point  and
+   *     node->prev->prev->point -> node->point.
+   *
+   * Its magnitude is the area of the parallelogram with those vectors as sides.
+   * If the vectors are colinear, this is zero.
+   */
   a = (node->point[1] - node->prev->prev->point[1]);
   a *= (node->prev->point[0] - node->prev->prev->point[0]);
   b = (node->point[0] - node->prev->prev->point[0]);
   b *= (node->prev->point[1] - node->prev->prev->point[1]);
-  if (fabs (a - b) < EPSILON &&
-      !node->prev->is_round && !node->is_round)
+
+//  printf ("a-b = %f\n", a-b);
+
+  /* XXX: HMM - This doesn't seem to be involved when extra points are left in polygon contours after boolean operations */
+  if (fabs (a - b) < 1000000) //EPSILON &&
+//      !node->prev->is_round && !node->is_round)
+//      !node->prev->is_round && !node->is_round)
     {
       VNODE *t = node->prev;
       t->prev->next = node;
diff --git a/src/thermal.c b/src/thermal.c
index 2f91d7d..aadd20e 100644
--- a/src/thermal.c
+++ b/src/thermal.c
@@ -107,7 +107,7 @@ diag_line (Coord X, Coord Y, Coord l, Coord w, bool rt)
 
   v[0] = X + x1;
   v[1] = Y + y2;
-  if ((c = poly_NewContour (v)) == NULL)
+  if ((c = poly_NewContour (poly_CreateNode (v))) == NULL)
     return NULL;
   v[0] = X - x2;
   v[1] = Y - y1;
@@ -138,7 +138,7 @@ square_therm (PinType *pin, Cardinal style)
       /* top (actually bottom since +y is down) */
       v[0] = pin->X - in + d;
       v[1] = pin->Y + in;
-      if ((c = poly_NewContour (v)) == NULL)
+      if ((c = poly_NewContour (poly_CreateNode (v))) == NULL)
         return NULL;
       v[0] = pin->X + in - d;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
@@ -151,7 +151,7 @@ square_therm (PinType *pin, Cardinal style)
       /* right */
       v[0] = pin->X + in;
       v[1] = pin->Y + in - d;
-      if ((c = poly_NewContour (v)) == NULL)
+      if ((c = poly_NewContour (poly_CreateNode (v))) == NULL)
         return NULL;
       v[1] = pin->Y - in + d;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
@@ -166,7 +166,7 @@ square_therm (PinType *pin, Cardinal style)
       /* left */
       v[0] = pin->X - in;
       v[1] = pin->Y - in + d;
-      if ((c = poly_NewContour (v)) == NULL)
+      if ((c = poly_NewContour (poly_CreateNode (v))) == NULL)
         return NULL;
       v[1] = pin->Y + in - d;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
@@ -181,7 +181,7 @@ square_therm (PinType *pin, Cardinal style)
       /* bottom (actually top since +y is down) */
       v[0] = pin->X + in - d;
       v[1] = pin->Y - in;
-      if ((c = poly_NewContour (v)) == NULL)
+      if ((c = poly_NewContour (poly_CreateNode (v))) == NULL)
         return NULL;
       v[0] = pin->X - in + d;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
@@ -242,7 +242,7 @@ square_therm (PinType *pin, Cardinal style)
       /* topright */
       v[0] = pin->X + in;
       v[1] = pin->Y + in;
-      if ((c = poly_NewContour (v)) == NULL)
+      if ((c = poly_NewContour (poly_CreateNode (v))) == NULL)
         return NULL;
       v[1] = pin->Y + d;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
@@ -271,7 +271,7 @@ square_therm (PinType *pin, Cardinal style)
       /* bottom right */
       v[0] = pin->X + in;
       v[1] = pin->Y - d;
-      if ((c = poly_NewContour (v)) == NULL)
+      if ((c = poly_NewContour (poly_CreateNode (v))) == NULL)
         return NULL;
       v[1] = pin->Y - in;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
@@ -298,7 +298,7 @@ square_therm (PinType *pin, Cardinal style)
       /* bottom left */
       v[0] = pin->X - d;
       v[1] = pin->Y - in;
-      if ((c = poly_NewContour (v)) == NULL)
+      if ((c = poly_NewContour (poly_CreateNode (v))) == NULL)
         return NULL;
       v[0] = pin->X - in;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
@@ -325,7 +325,7 @@ square_therm (PinType *pin, Cardinal style)
       /* top left */
       v[0] = pin->X - d;
       v[1] = pin->Y + out;
-      if ((c = poly_NewContour (v)) == NULL)
+      if ((c = poly_NewContour (poly_CreateNode (v))) == NULL)
         return NULL;
       v[0] = pin->X - in;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
