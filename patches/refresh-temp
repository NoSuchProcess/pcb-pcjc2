Bottom: 21648b7150ed4259d6f022bf97b02012536568f4
Top:    76975c09108fe8dc2effeef9de9dea44b0b19a5e
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2008-10-11 18:58:27 +0100

Refresh of add_pours

---

diff --git a/src/buffer.c b/src/buffer.c
index 0954ebb..fe1ee5e 100644
--- a/src/buffer.c
+++ b/src/buffer.c
@@ -73,7 +73,6 @@ static void *AddLineToBuffer (LayerTypePtr, LineTypePtr);
 static void *AddArcToBuffer (LayerTypePtr, ArcTypePtr);
 static void *AddRatToBuffer (RatTypePtr);
 static void *AddTextToBuffer (LayerTypePtr, TextTypePtr);
-//static void *AddPolygonToBuffer (LayerTypePtr, PolygonTypePtr);
 static void *AddPourToBuffer (LayerTypePtr, PourTypePtr);
 static void *AddElementToBuffer (ElementTypePtr);
 static void *MoveViaToBuffer (PinTypePtr);
@@ -81,7 +80,6 @@ static void *MoveLineToBuffer (LayerTypePtr, LineTypePtr);
 static void *MoveArcToBuffer (LayerTypePtr, ArcTypePtr);
 static void *MoveRatToBuffer (RatTypePtr);
 static void *MoveTextToBuffer (LayerTypePtr, TextTypePtr);
-//static void *MovePolygonToBuffer (LayerTypePtr, PolygonTypePtr);
 static void *MovePourToBuffer (LayerTypePtr, PourTypePtr);
 static void *MoveElementToBuffer (ElementTypePtr);
 static void SwapBuffer (BufferTypePtr);
@@ -94,8 +92,7 @@ static DataTypePtr Dest, Source;
 static ObjectFunctionType AddBufferFunctions = {
   AddLineToBuffer,
   AddTextToBuffer,
-#warning FIXME Later
-  NULL, //AddPolygonToBuffer,
+  NULL,
   AddPourToBuffer,
   AddViaToBuffer,
   AddElementToBuffer,
@@ -111,7 +108,7 @@ static ObjectFunctionType AddBufferFunctions = {
 {
 MoveLineToBuffer,
     MoveTextToBuffer,
-    NULL, // MovePolygonToBuffer,
+    NULL,
     MovePourToBuffer,
     MoveViaToBuffer,
     MoveElementToBuffer,
@@ -195,24 +192,6 @@ AddTextToBuffer (LayerTypePtr Layer, TextTypePtr Text)
 			 MaskFlags (Text->Flags, ExtraFlag)));
 }
 
-#warning FIXME Later
-#if 0
-/* ---------------------------------------------------------------------------
- * copies a polygon to buffer
- */
-static void *
-AddPolygonToBuffer (LayerTypePtr Layer, PolygonTypePtr Polygon)
-{
-  LayerTypePtr layer = &Dest->Layer[GetLayerNumber (Source, Layer)];
-  PolygonTypePtr polygon;
-
-  polygon = GetPolygonMemory (layer);
-  CopyPolygonLowLevel (polygon, Polygon);
-  CLEAR_FLAG (FOUNDFLAG | ExtraFlag, polygon);
-  return (polygon);
-}
-#endif
-
 /* ---------------------------------------------------------------------------
  * copies a pour to buffer
  */
@@ -385,36 +364,6 @@ MoveTextToBuffer (LayerTypePtr Layer, TextTypePtr Text)
   return (text);
 }
 
-#warning FIXME Later
-#if 0
-/* ---------------------------------------------------------------------------
- * moves a polygon to buffer. Doesn't allocate memory for the points
- */
-static void *
-MovePolygonToBuffer (LayerTypePtr Layer, PolygonTypePtr Polygon)
-{
-  LayerTypePtr lay;
-  PolygonTypePtr polygon;
-
-  RestoreToPours (Source, POLYGON_TYPE, Layer, Polygon);
-  r_delete_entry (Layer->polygon_tree, (BoxTypePtr) Polygon);
-  lay = &Dest->Layer[GetLayerNumber (Source, Layer)];
-  polygon = GetPolygonMemory (lay);
-  *polygon = *Polygon;
-  CLEAR_FLAG (FOUNDFLAG, polygon);
-  *Polygon = Layer->Polygon[--Layer->PolygonN];
-  r_substitute (Layer->polygon_tree,
-		(BoxTypePtr) & Layer->Polygon[Layer->PolygonN],
-		(BoxTypePtr) Polygon);
-  memset (&Layer->Polygon[Layer->PolygonN], 0, sizeof (PolygonType));
-  if (!lay->polygon_tree)
-    lay->polygon_tree = r_create_tree (NULL, 0, 0);
-  r_insert_entry (lay->polygon_tree, (BoxTypePtr) polygon, 0);
-  ClearFromPours (Source, POLYGON_TYPE, Layer, Polygon);
-  return (polygon);
-}
-#endif
-
 /* ---------------------------------------------------------------------------
  * moves a pour to buffer. Doesn't allocate memory for the points
  */
diff --git a/src/change.c b/src/change.c
index 2b855dc..d799921 100644
--- a/src/change.c
+++ b/src/change.c
@@ -123,13 +123,9 @@ static void *ClrArcJoin (LayerTypePtr, ArcTypePtr);
 static void *ChangeTextJoin (LayerTypePtr, TextTypePtr);
 static void *SetTextJoin (LayerTypePtr, TextTypePtr);
 static void *ClrTextJoin (LayerTypePtr, TextTypePtr);
-static void *ChangePolyClear (LayerTypePtr, PolygonTypePtr);
 static void *ChangePourClear (LayerTypePtr, PourTypePtr);
-static void *ChangePolyJoin (LayerTypePtr, PolygonTypePtr);
 static void *ChangePourJoin (LayerTypePtr, PourTypePtr);
-static void *SetPolyJoin (LayerTypePtr, PolygonTypePtr);
 static void *SetPourJoin (LayerTypePtr, PourTypePtr);
-static void *ClrPolyJoin (LayerTypePtr, PolygonTypePtr);
 static void *ClrPourJoin (LayerTypePtr, PourTypePtr);
 
 /* ---------------------------------------------------------------------------
@@ -141,7 +137,7 @@ static char *NewName;		/* new name */
 static ObjectFunctionType ChangeSizeFunctions = {
   ChangeLineSize,
   ChangeTextSize,
-  ChangePolyClear,
+  NULL,
   ChangePourClear,
   ChangeViaSize,
   ChangeElementSize,		/* changes silk screen line width */
@@ -231,7 +227,7 @@ static ObjectFunctionType ChangeSquareFunctions = {
 static ObjectFunctionType ChangeJoinFunctions = {
   ChangeLineJoin,
   ChangeTextJoin,
-  ChangePolyJoin,
+  NULL,
   ChangePourJoin,
   NULL,
   NULL,
@@ -295,7 +291,7 @@ static ObjectFunctionType SetSquareFunctions = {
 static ObjectFunctionType SetJoinFunctions = {
   SetLineJoin,
   SetTextJoin,
-  SetPolyJoin,
+  NULL,
   SetPourJoin,
   NULL,
   NULL,
@@ -340,7 +336,7 @@ static ObjectFunctionType ClrSquareFunctions = {
 static ObjectFunctionType ClrJoinFunctions = {
   ClrLineJoin,
   ClrTextJoin,
-  ClrPolyJoin,
+  NULL,
   ClrPourJoin,
   NULL,
   NULL,
@@ -1214,31 +1210,6 @@ ChangeTextJoin (LayerTypePtr Layer, TextTypePtr Text)
 }
 
 /* ---------------------------------------------------------------------------
- * changes the clearance flag of a polygon
- */
-static void *
-ChangePolyJoin (LayerTypePtr Layer, PolygonTypePtr poly)
-{
-  if (TEST_FLAG (LOCKFLAG, poly))
-    return (NULL);
-  ErasePolygon (poly);
-  if (TEST_FLAG(CLEARLINEFLAG, poly))
-  {
-  AddObjectToClearPolyUndoList (POLYGON_TYPE, Layer, poly, poly, False);
-  RestoreToPours (PCB->Data, POLYGON_TYPE, Layer, poly);
-  }
-  AddObjectToFlagUndoList (LINE_TYPE, Layer, poly, poly);
-  TOGGLE_FLAG (CLEARLINEFLAG, poly);
-  if (TEST_FLAG(CLEARLINEFLAG, poly))
-  {
-  AddObjectToClearPolyUndoList (POLYGON_TYPE, Layer, poly, poly, True);
-  ClearFromPours (PCB->Data, POLYGON_TYPE, Layer, poly);
-  }
-  DrawPolygon (Layer, poly, 0);
-  return (poly);
-}
-
-/* ---------------------------------------------------------------------------
  * changes the clearance flag of a pour
  */
 static void *
@@ -1249,15 +1220,15 @@ ChangePourJoin (LayerTypePtr Layer, PourTypePtr pour)
   ErasePour (pour);
   if (TEST_FLAG(CLEARLINEFLAG, pour))
   {
-  AddObjectToClearPourUndoList (POLYGON_TYPE, Layer, pour, pour, False);
-  RestoreToPours (PCB->Data, POLYGON_TYPE, Layer, pour);
+  AddObjectToClearPourUndoList (POUR_TYPE, Layer, pour, pour, False);
+  RestoreToPours (PCB->Data, POUR_TYPE, Layer, pour);
   }
   AddObjectToFlagUndoList (LINE_TYPE, Layer, pour, pour);
   TOGGLE_FLAG (CLEARLINEFLAG, pour);
   if (TEST_FLAG(CLEARLINEFLAG, pour))
   {
-  AddObjectToClearPourUndoList (POLYGON_TYPE, Layer, pour, pour, True);
-  ClearFromPours (PCB->Data, POLYGON_TYPE, Layer, pour);
+  AddObjectToClearPourUndoList (POUR_TYPE, Layer, pour, pour, True);
+  ClearFromPours (PCB->Data, POUR_TYPE, Layer, pour);
   }
   DrawPour (Layer, pour, 0);
   return (pour);
@@ -1275,17 +1246,6 @@ SetTextJoin (LayerTypePtr Layer, TextTypePtr Text)
 }
 
 /* ---------------------------------------------------------------------------
- * sets the clearance flag of a polygon
- */
-static void *
-SetPolyJoin (LayerTypePtr Layer, PolygonTypePtr poly)
-{
-  if (TEST_FLAG (LOCKFLAG, poly) || TEST_FLAG (CLEARLINEFLAG, poly))
-    return (NULL);
-  return ChangePolyJoin (Layer, poly);
-}
-
-/* ---------------------------------------------------------------------------
  * sets the clearance flag of a pour
  */
 static void *
@@ -1308,17 +1268,6 @@ ClrTextJoin (LayerTypePtr Layer, TextTypePtr Text)
 }
 
 /* ---------------------------------------------------------------------------
- * clears the clearance flag of a polygon
- */
-static void *
-ClrPolyJoin (LayerTypePtr Layer, PolygonTypePtr poly)
-{
-  if (TEST_FLAG (LOCKFLAG, poly) || !TEST_FLAG (CLEARLINEFLAG, poly))
-    return (NULL);
-  return ChangePolyJoin (Layer, poly);
-}
-
-/* ---------------------------------------------------------------------------
  * clears the clearance flag of a pour
  */
 static void *
@@ -1676,22 +1625,6 @@ ChangePaste (PadTypePtr Pad)
 }
 
 /* ---------------------------------------------------------------------------
- * changes the CLEARPOLY flag of a polygon
- */
-static void *
-ChangePolyClear (LayerTypePtr Layer, PolygonTypePtr Polygon)
-{
-  if (TEST_FLAG (LOCKFLAG, Polygon))
-    return (NULL);
-  AddObjectToClearPolyUndoList (POLYGON_TYPE, Layer, Polygon, Polygon, True);
-  AddObjectToFlagUndoList (POLYGON_TYPE, Layer, Polygon, Polygon);
-  TOGGLE_FLAG (CLEARPOLYFLAG, Polygon);
-  InitClip (PCB->Data, Layer, Polygon);
-  DrawPolygon (Layer, Polygon, 0);
-  return (Polygon);
-}
-
-/* ---------------------------------------------------------------------------
  * changes the CLEARPOLY flag of a pour
  */
 static void *
@@ -1699,8 +1632,8 @@ ChangePourClear (LayerTypePtr Layer, PourTypePtr Pour)
 {
   if (TEST_FLAG (LOCKFLAG, Pour))
     return (NULL);
-  AddObjectToClearPourUndoList (POLYGON_TYPE, Layer, Pour, Pour, True);
-  AddObjectToFlagUndoList (POLYGON_TYPE, Layer, Pour, Pour);
+  AddObjectToClearPourUndoList (POUR_TYPE, Layer, Pour, Pour, True);
+  AddObjectToFlagUndoList (POUR_TYPE, Layer, Pour, Pour);
   TOGGLE_FLAG (CLEARPOLYFLAG, Pour);
   InitPourClip (PCB->Data, Layer, Pour);
   DrawPour (Layer, Pour, 0);
diff --git a/src/copy.c b/src/copy.c
index 9d42d13..62daf6f 100644
--- a/src/copy.c
+++ b/src/copy.c
@@ -66,7 +66,6 @@ static void *CopyVia (PinTypePtr);
 static void *CopyLine (LayerTypePtr, LineTypePtr);
 static void *CopyArc (LayerTypePtr, ArcTypePtr);
 static void *CopyText (LayerTypePtr, TextTypePtr);
-//static void *CopyPolygon (LayerTypePtr, PolygonTypePtr);
 static void *CopyPour (LayerTypePtr, PourTypePtr);
 static void *CopyElement (ElementTypePtr);
 
@@ -77,8 +76,7 @@ static LocationType DeltaX, DeltaY;	/* movement vector */
 static ObjectFunctionType CopyFunctions = {
   CopyLine,
   CopyText,
-#warning FIXME Later
-  NULL, //CopyPolygon,
+  NULL,
   CopyPour,
   CopyVia,
   CopyElement,
@@ -91,28 +89,6 @@ static ObjectFunctionType CopyFunctions = {
   NULL
 };
 
-#warning FIXME Later
-#if 0
-/* ---------------------------------------------------------------------------
- * copies data from one polygon to another
- * 'Dest' has to exist
- */
-PolygonTypePtr
-CopyPolygonLowLevel (PolygonTypePtr Dest, PolygonTypePtr Src)
-{
-  /* copy all data */
-  POLYGONPOINT_LOOP (Src);
-  {
-    CreateNewPointInPolygon (Dest, point->X, point->Y);
-  }
-  END_LOOP;
-  SetPolygonBoundingBox (Dest);
-  Dest->Flags = Src->Flags;
-  CLEAR_FLAG (FOUNDFLAG, Dest);
-  return (Dest);
-}
-#endif
-
 /* ---------------------------------------------------------------------------
  * copies data from one pour to another
  * 'Dest' has to exist
@@ -281,29 +257,6 @@ CopyText (LayerTypePtr Layer, TextTypePtr Text)
   return (text);
 }
 
-#warning FIXME Later
-#if 0
-/* ---------------------------------------------------------------------------
- * copies a polygon 
- */
-static void *
-CopyPolygon (LayerTypePtr Layer, PolygonTypePtr Polygon)
-{
-  PolygonTypePtr polygon;
-
-  polygon = CreateNewPolygon (Layer, NoFlags ());
-  CopyPolygonLowLevel (polygon, Polygon);
-  MovePolygonLowLevel (polygon, DeltaX, DeltaY);
-  if (!Layer->polygon_tree)
-    Layer->polygon_tree = r_create_tree (NULL, 0, 0);
-  r_insert_entry (Layer->polygon_tree, (BoxTypePtr) polygon, 0);
-  InitClip (PCB->Data, Layer, polygon);
-  DrawPolygon (Layer, polygon, 0);
-  AddObjectToCreateUndoList (POLYGON_TYPE, Layer, polygon, polygon);
-  return (polygon);
-}
-#endif
-
 /* ---------------------------------------------------------------------------
  * copies a pour
  */
@@ -393,14 +346,6 @@ CopyPastebufferToLayout (LocationType X, LocationType Y)
 	    CopyText (destlayer, text);
 	  }
 	  END_LOOP;
-#warning FIXME Later
-#if 0
-	  POLYGON_LOOP (sourcelayer);
-	  {
-	    CopyPolygon (destlayer, polygon);
-	  }
-	  END_LOOP;
-#endif
 	  POUR_LOOP (sourcelayer);
 	  {
 	    CopyPour (destlayer, pour);
diff --git a/src/copy.h b/src/copy.h
index add5061..8d027d0 100644
--- a/src/copy.h
+++ b/src/copy.h
@@ -41,7 +41,6 @@
 	ELEMENT_TYPE | ELEMENTNAME_TYPE | POUR_TYPE | ARC_TYPE)
 
 
-PolygonTypePtr CopyPolygonLowLevel (PolygonTypePtr, PolygonTypePtr);
 PourTypePtr CopyPourLowLevel (PourTypePtr, PourTypePtr);
 ElementTypePtr CopyElementLowLevel (DataTypePtr, ElementTypePtr,
 				    ElementTypePtr, Boolean, LocationType, LocationType);
diff --git a/src/draw.c b/src/draw.c
index f460930..56089a2 100644
--- a/src/draw.c
+++ b/src/draw.c
@@ -2716,6 +2716,9 @@ EraseObject (int type, void *lptr, void *ptr)
     case POLYGON_TYPE:
       ErasePolygon ((PolygonTypePtr) ptr);
       break;
+    case POUR_TYPE:
+      ErasePour ((PourTypePtr) ptr);
+      break;
     case ELEMENT_TYPE:
       EraseElement ((ElementTypePtr) ptr);
       break;
@@ -2763,6 +2766,10 @@ DrawObject (int type, void *ptr1, void *ptr2, int unused)
       if (((LayerTypePtr) ptr1)->On)
 	DrawPolygon ((LayerTypePtr) ptr1, (PolygonTypePtr) ptr2, 0);
       break;
+    case POUR_TYPE:
+      if (((LayerTypePtr) ptr1)->On)
+	DrawPour ((LayerTypePtr) ptr1, (PourTypePtr) ptr2, 0);
+      break;
     case ELEMENT_TYPE:
       if (PCB->ElementOn &&
 	  (FRONT ((ElementTypePtr) ptr2) || PCB->InvisibleObjectsOn))
diff --git a/src/move.c b/src/move.c
index f9638b4..699a8a3 100644
--- a/src/move.c
+++ b/src/move.c
@@ -73,7 +73,6 @@ static void *MoveVia (PinTypePtr);
 static void *MoveLine (LayerTypePtr, LineTypePtr);
 static void *MoveArc (LayerTypePtr, ArcTypePtr);
 static void *MoveText (LayerTypePtr, TextTypePtr);
-//static void *MovePolygon (LayerTypePtr, PolygonTypePtr);
 static void *MovePour (LayerTypePtr, PourTypePtr);
 static void *MoveLinePoint (LayerTypePtr, LineTypePtr, PointTypePtr);
 static void *MovePourPoint (LayerTypePtr, PourTypePtr, PointTypePtr);
@@ -81,7 +80,6 @@ static void *MoveLineToLayer (LayerTypePtr, LineTypePtr);
 static void *MoveArcToLayer (LayerTypePtr, ArcTypePtr);
 static void *MoveRatToLayer (RatTypePtr);
 static void *MoveTextToLayer (LayerTypePtr, TextTypePtr);
-//static void *MovePolygonToLayer (LayerTypePtr, PolygonTypePtr);
 static void *MovePourToLayer (LayerTypePtr, PourTypePtr);
 
 /* ---------------------------------------------------------------------------
@@ -94,7 +92,7 @@ static Boolean MoreToCome;
 static ObjectFunctionType MoveFunctions = {
   MoveLine,
   MoveText,
-  NULL, // MovePolygon,
+  NULL,
   MovePour,
   MoveVia,
   MoveElement,
@@ -110,7 +108,7 @@ static ObjectFunctionType MoveFunctions = {
 {
 MoveLineToLayer,
     MoveTextToLayer,
-    NULL, //MovePolygonToLayer,
+    NULL,
     MovePourToLayer,
     NULL,
     NULL,
@@ -344,24 +342,6 @@ MoveText (LayerTypePtr Layer, TextTypePtr Text)
 }
 
 /* ---------------------------------------------------------------------------
- * low level routine to move a polygon
- */
-void
-MovePolygonLowLevel (PolygonTypePtr Polygon, LocationType DeltaX,
-		     LocationType DeltaY)
-{
-#warning FIXME Later
-#if 0
-  POLYGONPOINT_LOOP (Polygon);
-  {
-    MOVE (point->X, point->Y, DeltaX, DeltaY);
-  }
-  END_LOOP;
-  MOVE_BOX_LOWLEVEL (&Polygon->BoundingBox, DeltaX, DeltaY);
-#endif
-}
-
-/* ---------------------------------------------------------------------------
  * low level routine to move a pour
  */
 void
@@ -376,33 +356,6 @@ MovePourLowLevel (PourTypePtr Pour, LocationType DeltaX,
   MOVE_BOX_LOWLEVEL (&Pour->BoundingBox, DeltaX, DeltaY);
 }
 
-#warning FIXME Later
-#if 0
-/* ---------------------------------------------------------------------------
- * moves a polygon
- */
-static void *
-MovePolygon (LayerTypePtr Layer, PolygonTypePtr Polygon)
-{
-  if (Layer->On)
-    {
-      ErasePolygon (Polygon);
-    }
-  RestoreToPours (PCB->Data, POLYGON_TYPE, Layer, Polygon);
-  r_delete_entry (Layer->polygon_tree, (BoxType *) Polygon);
-  MovePolygonLowLevel (Polygon, DeltaX, DeltaY);
-  r_insert_entry (Layer->polygon_tree, (BoxType *) Polygon, 0);
-  InitClip (PCB->Data, Layer, Polygon);
-  ClearFromPours (PCB->Data, POLYGON_TYPE, Layer, Polygon);
-  if (Layer->On)
-    {
-      DrawPolygon (Layer, Polygon, 0);
-      Draw ();
-    }
-  return (Polygon);
-}
-#endif
-
 /* ---------------------------------------------------------------------------
  * moves a pour
  */
@@ -413,12 +366,12 @@ MovePour (LayerTypePtr Layer, PourTypePtr Pour)
     {
       ErasePour (Pour);
     }
-//  RestoreToPours (PCB->Data, POLYGON_TYPE, Layer, Pour);
+  RestoreToPours (PCB->Data, POLYGON_TYPE, Layer, Pour);
   r_delete_entry (Layer->pour_tree, (BoxType *) Pour);
   MovePourLowLevel (Pour, DeltaX, DeltaY);
   r_insert_entry (Layer->pour_tree, (BoxType *) Pour, 0);
   InitPourClip (PCB->Data, Layer, Pour);
-//  ClearFromPours (PCB->Data, POLYGON_TYPE, Layer, Polygon);
+  ClearFromPours (PCB->Data, POLYGON_TYPE, Layer, Pour);
   if (Layer->On)
     {
       DrawPour (Layer, Pour, 0);
@@ -477,14 +430,14 @@ MovePourPoint (LayerTypePtr Layer, PourTypePtr Pour, PointTypePtr Point)
     {
       ErasePour (Pour);
     }
-//  RestoreToPours (PCB->Data, POLYGON_TYPE, Layer, Polygon);
+  RestoreToPours (PCB->Data, POLYGON_TYPE, Layer, Pour);
   r_delete_entry (Layer->pour_tree, (BoxType *) Pour);
   MOVE (Point->X, Point->Y, DeltaX, DeltaY);
   SetPourBoundingBox (Pour);
   r_insert_entry (Layer->pour_tree, (BoxType *) Pour, 0);
   RemoveExcessPourPoints (Layer, Pour);
   InitPourClip (PCB->Data, Layer, Pour);
-//  ClearFromPours (PCB->Data, POLYGON_TYPE, Layer, Polygon);
+  ClearFromPours (PCB->Data, POLYGON_TYPE, Layer, Pour);
   if (Layer->On)
     {
       DrawPour (Layer, Pour, 0);
@@ -757,32 +710,6 @@ MoveTextToLayer (LayerTypePtr Layer, TextTypePtr Text)
   return (Text);
 }
 
-#warning FIXME Later
-#if 0
-/* ---------------------------------------------------------------------------
- * moves a polygon between layers; lowlevel routines
- */
-void *
-MovePolygonToLayerLowLevel (LayerTypePtr Source, PolygonTypePtr Polygon,
-			    LayerTypePtr Destination)
-{
-  PolygonTypePtr new = GetPolygonMemory (Destination);
-
-  r_delete_entry (Source->polygon_tree, (BoxType *) Polygon);
-  /* copy the data and remove it from the former layer */
-  *new = *Polygon;
-  *Polygon = Source->Polygon[--Source->PolygonN];
-  r_substitute (Source->polygon_tree,
-		(BoxType *) & Source->Polygon[Source->PolygonN],
-		(BoxType *) Polygon);
-  memset (&Source->Polygon[Source->PolygonN], 0, sizeof (PolygonType));
-  if (!Destination->polygon_tree)
-    Destination->polygon_tree = r_create_tree (NULL, 0, 0);
-  r_insert_entry (Destination->polygon_tree, (BoxType *) new, 0);
-  return (new);
-}
-#endif
-
 /* ---------------------------------------------------------------------------
  * moves a pour between layers; lowlevel routines
  */
@@ -831,46 +758,6 @@ mptl_pin_callback (const BoxType *b, void *cl)
   return 1;
 }
 
-#warning FIXME Later
-#if 0
-/* ---------------------------------------------------------------------------
- * moves a polygon between layers
- */
-static void *
-MovePolygonToLayer (LayerTypePtr Layer, PolygonTypePtr Polygon)
-{
-  PolygonTypePtr new;
-  struct mptlc d;
-
-  if (TEST_FLAG (LOCKFLAG, Polygon))
-    {
-      Message (_("Sorry, the object is locked\n"));
-      return NULL;
-    }
-  if (((long int) Dest == -1) || (Layer == Dest))
-    return (Polygon);
-  AddObjectToMoveToLayerUndoList (POLYGON_TYPE, Layer, Polygon, Polygon);
-  if (Layer->On)
-    ErasePolygon (Polygon);
-  /* Move all of the thermals with the polygon */
-  d.snum = GetLayerNumber (PCB->Data, Layer);
-  d.dnum = GetLayerNumber (PCB->Data, Dest);
-  d.polygon = Polygon;
-  d.type = PIN_TYPE;
-  r_search (PCB->Data->pin_tree, &Polygon->BoundingBox, NULL, mptl_pin_callback, &d);
-  d.type = VIA_TYPE;
-  r_search (PCB->Data->via_tree, &Polygon->BoundingBox, NULL, mptl_pin_callback, &d);
-  new = MovePolygonToLayerLowLevel (Layer, Polygon, Dest);
-  InitClip (PCB->Data, Dest, new);
-  if (Dest->On)
-    {
-      DrawPolygon (Dest, new, 0);
-      Draw ();
-    }
-  return (new);
-}
-#endif
-
 /* ---------------------------------------------------------------------------
  * moves a pour between layers
  */
diff --git a/src/move.h b/src/move.h
index 6750c10..886bf64 100644
--- a/src/move.h
+++ b/src/move.h
@@ -93,7 +93,6 @@
 /* ---------------------------------------------------------------------------
  * prototypes
  */
-void MovePolygonLowLevel (PolygonTypePtr, LocationType, LocationType);
 void MovePourLowLevel (PourTypePtr, LocationType, LocationType);
 void MoveElementLowLevel (DataTypePtr, ElementTypePtr, LocationType,
 			  LocationType);
@@ -103,7 +102,6 @@ void *MoveObjectAndRubberband (int, void *, void *, void *,
 			       LocationType, LocationType);
 void *MoveLineToLayerLowLevel (LayerTypePtr, LineTypePtr, LayerTypePtr);
 void *MoveTextToLayerLowLevel (LayerTypePtr, TextTypePtr, LayerTypePtr);
-void *MovePolygonToLayerLowLevel (LayerTypePtr, PolygonTypePtr, LayerTypePtr);
 Boolean MoveSelectedObjectsToLayer (LayerTypePtr);
 
 /* index is 0..MAX_LAYER-1.  If old_index is -1, a new layer is
diff --git a/src/pour.c b/src/pour.c
index 1859661..d71d9f4 100644
--- a/src/pour.c
+++ b/src/pour.c
@@ -611,14 +611,12 @@ Group (DataTypePtr Data, Cardinal layer)
 /* NB: For convenience, we're passing the defined POLYAREA in here */
 static int
 ClearPour (DataTypePtr Data, LayerTypePtr Layer, PourType * pour,
-           POLYAREA *clipped, const BoxType * here, BDimension expand)
+           POLYAREA **pg, const BoxType * here, BDimension expand)
 {
-  POLYAREA *tmp, *pg;
   int r = 0;
   BoxType region;
   struct cpInfo info;
   Cardinal group;
-  int count_all, count_added;
 
   if (!TEST_FLAG (CLEARPOLYFLAG, pour)
       || GetLayerNumber (Data, Layer) >= max_layer)
@@ -629,7 +627,7 @@ ClearPour (DataTypePtr Data, LayerTypePtr Layer, PourType * pour,
   info.other = here;
   info.layer = Layer;
   info.pour = pour;
-  info.pg = clipped;
+  info.pg = *pg;
   if (here)
     region = clip_box (here, &pour->BoundingBox);
   else
@@ -653,42 +651,8 @@ ClearPour (DataTypePtr Data, LayerTypePtr Layer, PourType * pour,
         r += r_search (Data->pad_tree, &region, NULL, pad_sub_callback, &info);
     }
 
-  /* TODO: Check r to work of it we need to do this? */
-
-  count_all = count_added = 0;
-  /* For each piece of the clipped up polygon, create a new child */
-  pg = info.pg;
-  do
-    {
-      PolygonType *poly;
-
-      tmp = pg->f;
-      pg->f = pg;
-      pg->b = pg;
-      count_all++;
-//      if (pg->contours->area > PCB->IsleArea)
-      if (1) // Breaks incremental updates otherwise
-        {
-          count_added++;
-          poly = CreateNewPolygonInPour (pour, pour->Flags);
-          poly->Clipped = pg;
-          CLEAR_FLAG (SELECTEDFLAG, poly);
-
-          SetPolygonBoundingBox (poly);
+  *pg = info.pg;
 
-          if (pour->polygon_tree == NULL)
-            pour->polygon_tree = r_create_tree (NULL, 0, 0);
-          r_insert_entry (pour->polygon_tree, (BoxType *) poly, 0);
-        }
-      else
-        {
-          printf ("Too small\n");
-          poly_Free (&pg);
-        }
-    }
-  while ((pg = tmp) != info.pg);
-
-//  printf ("ClearPour counted %i polygon pieces, and added the biggest %i\n", count_all, count_added);
   return r;
 }
 
@@ -826,11 +790,6 @@ subtract_plow (DataTypePtr Data, LayerTypePtr Layer, PourTypePtr pour,
           if (pour->polygon_tree == NULL)
             pour->polygon_tree = r_create_tree (NULL, 0, 0);
           r_insert_entry (pour->polygon_tree, (BoxType *) poly, 0);
-          printf ("Inserted poly, bounding box (%i,%i)-(%i,%u)\n",
-                  ((BoxType *) poly)->X1,
-                  ((BoxType *) poly)->Y1,
-                  ((BoxType *) poly)->X2,
-                  ((BoxType *) poly)->Y2);
         }
       else
         {
@@ -839,8 +798,6 @@ subtract_plow (DataTypePtr Data, LayerTypePtr Layer, PourTypePtr pour,
     }
   while ((pg = tmp) != start_pg);
 
-//  printf ("ClearPoly counted %i polygon pieces, and added the biggest %i\n", count_all, count_added);
-
   return 0;
 }
 
@@ -946,8 +903,8 @@ static int
 add_plow (DataTypePtr Data, LayerTypePtr Layer, PourTypePtr pour,
           int type, void *ptr1, void *ptr2)
 {
-  POLYAREA *np = NULL, *pg = NULL; //, *start_pg, *tmp;
-  int count;
+  POLYAREA *np = NULL, *pg = NULL, *tmp, *start_pg;
+  int count, count_all, count_added;
 
   switch (type)
     {
@@ -1049,18 +1006,16 @@ add_plow (DataTypePtr Data, LayerTypePtr Layer, PourTypePtr pour,
   printf ("After unsubtract, counted %i polygon pieces\n", count);
 #endif
 
-#warning FIXME Later: ClearPour does the adding of Polygon objects for us
-  ClearPour (PCB->Data, Layer, pour, pg, (const BoxType *) ptr2, 2 * UNSUBTRACT_BLOAT);
+  ClearPour (PCB->Data, Layer, pour, &pg, (const BoxType *) ptr2, 2 * UNSUBTRACT_BLOAT);
 
-#if 0
   if (pg == NULL)
     {
       printf ("Poly killed to death somehow\n");
       return -1;
     }
 
-
   /* For each piece of the clipped up polygon, create a new child */
+  count_all = count_added = 0;
   start_pg = pg;
   do
     {
@@ -1069,20 +1024,30 @@ add_plow (DataTypePtr Data, LayerTypePtr Layer, PourTypePtr pour,
       tmp = pg->f;
       pg->f = pg;
       pg->b = pg;
+      count_all++;
+//      if (pg->contours->area > PCB->IsleArea)
+      if (1) // Breaks incremental updates otherwise
+        {
+          count_added++;
+          poly = CreateNewPolygonInPour (pour, pour->Flags);
+          poly->Clipped = pg;
+          CLEAR_FLAG (SELECTEDFLAG, poly);
 
-      poly = CreateNewPolygonInPour (pour, pour->Flags);
-      poly->Clipped = pg;
-      CLEAR_FLAG (SELECTEDFLAG, poly);
-
-      SetPolygonBoundingBox (poly);
+          SetPolygonBoundingBox (poly);
 
-      if (pour->polygon_tree == NULL)
-        pour->polygon_tree = r_create_tree (NULL, 0, 0);
-      r_insert_entry (pour->polygon_tree, (BoxType *) poly, 0);
-      printf ("Inserting one polygon into the layer's tree\n");
+          if (pour->polygon_tree == NULL)
+            pour->polygon_tree = r_create_tree (NULL, 0, 0);
+          r_insert_entry (pour->polygon_tree, (BoxType *) poly, 0);
+        }
+      else
+        {
+          printf ("Too small\n");
+          poly_Free (&pg);
+        }
     }
   while ((pg = tmp) != start_pg);
-#endif
+
+//  printf ("ClearPour counted %i polygon pieces, and added the biggest %i\n", count_all, count_added);
 
   return 0;
 }
@@ -1092,7 +1057,8 @@ add_plow (DataTypePtr Data, LayerTypePtr Layer, PourTypePtr pour,
 int
 InitPourClip (DataTypePtr Data, LayerTypePtr layer, PourType * pour)
 {
-  POLYAREA *clipped;
+  POLYAREA *pg, *tmp, *start_pg;
+  int count_all, count_added;
 
 //  printf ("InitPourClip\n");
 
@@ -1113,8 +1079,8 @@ InitPourClip (DataTypePtr Data, LayerTypePtr layer, PourType * pour)
 //        DestroyPolygonInPour (pour, delete_children[ --number_deleted ]);
     }
 
-  clipped = original_pour_poly (pour);
-  if (!clipped)
+  pg = original_pour_poly (pour);
+  if (!pg)
     {
       printf ("Clipping returned NULL - can that be good?\n");
       return 0;
@@ -1124,18 +1090,42 @@ InitPourClip (DataTypePtr Data, LayerTypePtr layer, PourType * pour)
     {
       /* Clip the pour against anything we can find in this layer */
       /* TODO: Clear up API so the resulting areas are in "clipped" */
-      ClearPour (Data, layer, pour, clipped, NULL, 0);
+      ClearPour (Data, layer, pour, &pg, NULL, 0);
     }
-#if 0
-  pg = clipped;
+
+  count_all = count_added = 0;
+  /* For each piece of the clipped up polygon, create a new child */
+  start_pg = pg;
   do
     {
-      /* TODO: For each piece of the clipped up polygon, create a new child */
+      PolygonType *poly;
+
+      tmp = pg->f;
+      pg->f = pg;
+      pg->b = pg;
+
+      count_all++;
+//      if (pg->contours->area > PCB->IsleArea)
+      if (1) // Breaks incremental updates otherwise
+        {
+          count_added++;
+          poly = CreateNewPolygonInPour (pour, pour->Flags);
+          poly->Clipped = pg;
+          CLEAR_FLAG (SELECTEDFLAG, poly);
+
+          SetPolygonBoundingBox (poly);
+
+          if (pour->polygon_tree == NULL)
+            pour->polygon_tree = r_create_tree (NULL, 0, 0);
+          r_insert_entry (pour->polygon_tree, (BoxType *) poly, 0);
+        }
+      else
+        {
+          poly_Free (&pg);
+        }
     }
-  while ((pg = pg->f) != clipped);
+  while ((pg = tmp) != start_pg);
 
-  poly_Free (&clipped);
-#endif
   return 1;
 }
 
diff --git a/src/remove.c b/src/remove.c
index 2fde1dd..c2eb9ec 100644
--- a/src/remove.c
+++ b/src/remove.c
@@ -70,12 +70,10 @@ static void *DestroyRat (RatTypePtr);
 static void *DestroyLine (LayerTypePtr, LineTypePtr);
 static void *DestroyArc (LayerTypePtr, ArcTypePtr);
 static void *DestroyText (LayerTypePtr, TextTypePtr);
-//static void *DestroyPolygon (LayerTypePtr, PolygonTypePtr);
 static void *DestroyPour (LayerTypePtr, PourTypePtr);
 static void *DestroyElement (ElementTypePtr);
 static void *RemoveVia (PinTypePtr);
 static void *RemoveRat (RatTypePtr);
-//static void *DestroyPolygonPoint (LayerTypePtr, PolygonTypePtr, PointTypePtr);
 static void *DestroyPourPoint (LayerTypePtr, PourTypePtr, PointTypePtr);
 static void *RemovePourPoint (LayerTypePtr, PourTypePtr, PointTypePtr);
 static void *RemoveLinePoint (LayerTypePtr, LineTypePtr, PointTypePtr);
@@ -86,7 +84,7 @@ static void *RemoveLinePoint (LayerTypePtr, LineTypePtr, PointTypePtr);
 static ObjectFunctionType RemoveFunctions = {
   RemoveLine,
   RemoveText,
-  RemovePolygon,
+  NULL,
   RemovePour,
   RemoveVia,
   RemoveElement,
@@ -179,7 +177,6 @@ DestroyArc (LayerTypePtr Layer, ArcTypePtr Arc)
 static void *
 DestroyPour (LayerTypePtr Layer, PourTypePtr Pour)
 {
-#warning FIXME Later
   r_delete_entry (Layer->pour_tree, (BoxTypePtr) Pour);
   FreePourMemory (Pour);
   *Pour = Layer->Pour[--Layer->PourN];
@@ -190,33 +187,6 @@ DestroyPour (LayerTypePtr Layer, PourTypePtr Pour)
   return (NULL);
 }
 
-#warning FIXME Later
-#if 0
-/* ---------------------------------------------------------------------------
- * removes a polygon-point from a polygon and destroys the data
- */
-static void *
-DestroyPolygonPoint (LayerTypePtr Layer,
-                     PolygonTypePtr Polygon, PointTypePtr Point)
-{
-  PointTypePtr ptr;
-
-  if (Polygon->PointN <= 3)
-    return RemovePolygon(Layer, Polygon);
-  r_delete_entry (Layer->polygon_tree, (BoxType *) Polygon);
-  for (ptr = Point + 1; ptr != &Polygon->Points[Polygon->PointN]; ptr++)
-    {
-      *Point = *ptr;
-      Point = ptr;
-    }
-  Polygon->PointN--;
-  SetPolygonBoundingBox (Polygon);
-  r_insert_entry (Layer->polygon_tree, (BoxType *) Polygon, 0);
-  InitClip (PCB->Data, Layer, Polygon);
-  return (Polygon);
-}
-#endif
-
 /* ---------------------------------------------------------------------------
  * removes a polygon-point from a polygon and destroys the data
  */
@@ -476,23 +446,6 @@ RemoveText (LayerTypePtr Layer, TextTypePtr Text)
 }
 
 /* ---------------------------------------------------------------------------
- * removes a polygon from a layer
- */
-void *
-RemovePolygon (LayerTypePtr Layer, PolygonTypePtr Polygon)
-{
-  /* erase from screen */
-  if (Layer->On)
-    {
-      ErasePolygon (Polygon);
-      if (!Bulk)
-        Draw ();
-    }
-  MoveObjectToRemoveUndoList (POLYGON_TYPE, Layer, Polygon, Polygon);
-  return (NULL);
-}
-
-/* ---------------------------------------------------------------------------
  * removes a pour from a layer
  */
 void *
diff --git a/src/remove.h b/src/remove.h
index 598ef78..7650a65 100644
--- a/src/remove.h
+++ b/src/remove.h
@@ -42,7 +42,6 @@
 
 void *RemoveLine (LayerTypePtr, LineTypePtr);
 void *RemoveArc (LayerTypePtr, ArcTypePtr);
-void *RemovePolygon (LayerTypePtr, PolygonTypePtr);
 void *RemovePour (LayerTypePtr, PourTypePtr);
 void *RemoveText (LayerTypePtr, TextTypePtr);
 void *RemoveElement (ElementTypePtr);
diff --git a/src/rotate.c b/src/rotate.c
index 66cd431..43efbe5 100644
--- a/src/rotate.c
+++ b/src/rotate.c
@@ -160,24 +160,6 @@ RotateTextLowLevel (TextTypePtr Text, LocationType X, LocationType Y,
 }
 
 /* ---------------------------------------------------------------------------
- * rotates a polygon in 90 degree steps
- */
-void
-RotatePolygonLowLevel (PolygonTypePtr Polygon,
-		       LocationType X, LocationType Y, BYTE Number)
-{
-#warning FIXME Later
-#if 0
-  POLYGONPOINT_LOOP (Polygon);
-  {
-    ROTATE (point->X, point->Y, X, Y, Number);
-  }
-  END_LOOP;
-  RotateBoxLowLevel (&Polygon->BoundingBox, X, Y, Number);
-#endif
-}
-
-/* ---------------------------------------------------------------------------
  * rotates a pour in 90 degree steps
  */
 void
diff --git a/src/rotate.h b/src/rotate.h
index d5fc399..8ad4f60 100644
--- a/src/rotate.h
+++ b/src/rotate.h
@@ -64,7 +64,6 @@ void RotateLineLowLevel (LineTypePtr, LocationType, LocationType, BYTE);
 void RotateArcLowLevel (ArcTypePtr, LocationType, LocationType, BYTE);
 void RotateBoxLowLevel (BoxTypePtr, LocationType, LocationType, BYTE);
 void RotateTextLowLevel (TextTypePtr, LocationType, LocationType, BYTE);
-void RotatePolygonLowLevel (PolygonTypePtr, LocationType, LocationType, BYTE);
 void RotatePourLowLevel (PourTypePtr, LocationType, LocationType, BYTE);
 void RotateElementLowLevel (DataTypePtr, ElementTypePtr, LocationType,
 			    LocationType, BYTE);
diff --git a/src/select.h b/src/select.h
index 8974d04..479cc0c 100644
--- a/src/select.h
+++ b/src/select.h
@@ -33,7 +33,6 @@
 
 #include "global.h"
 
-#warning FIXME Later: Do we want pours / polygons selectable?
 #define SELECT_TYPES	\
 	(VIA_TYPE | LINE_TYPE | TEXT_TYPE | POUR_TYPE | ELEMENT_TYPE |	\
 	 PIN_TYPE | PAD_TYPE | ELEMENTNAME_TYPE | RATLINE_TYPE | ARC_TYPE)
diff --git a/src/strflags.c b/src/strflags.c
index 12fbc62..fb18b2d 100644
--- a/src/strflags.c
+++ b/src/strflags.c
@@ -95,7 +95,7 @@ static FlagBitsType object_flagbits[] = {
   { HOLEFLAG, N ("hole"), PIN_TYPES },
   { RATFLAG, N ("rat"), RATLINE_TYPE },
   { PININPOLYFLAG, N ("pininpoly"), PIN_TYPES | PAD_TYPE },
-  { CLEARPOLYFLAG, N ("clearpoly"), POLYGON_TYPE },
+  { CLEARPOLYFLAG, N ("clearpoly"), POUR_TYPE },
   { HIDENAMEFLAG, N ("hidename"), ELEMENT_TYPE },
   { DISPLAYNAMEFLAG, N ("showname"), ELEMENT_TYPE },
   { STRIPHIERFLAG, N ("striphierarchy"), ELEMENT_TYPE },
@@ -111,7 +111,7 @@ static FlagBitsType object_flagbits[] = {
   { DRCFLAG, N ("drc"), ALL_TYPES },
   { LOCKFLAG, N ("lock"), ALL_TYPES },
   { EDGE2FLAG, N ("edge2"), ALL_TYPES },
-  { FULLPOLYFLAG, N ("fullpoly"), POLYGON_TYPE},
+  { FULLPOLYFLAG, N ("fullpoly"), POUR_TYPE},
   { NOPASTEFLAG, N ("nopaste"), PAD_TYPE }
 };
