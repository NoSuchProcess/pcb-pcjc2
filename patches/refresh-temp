Bottom: d21e300b575581e5d8e4530b1f27f00456f65b63
Top:    48f138c25d9e32aa9c929d1933a58278fc39a9de
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-04-20 23:13:59 +0100

Refresh of consolidate-pin-drawing-routin

---

diff --git a/src/crosshair.c b/src/crosshair.c
index f016094..cd52f4a 100644
--- a/src/crosshair.c
+++ b/src/crosshair.c
@@ -249,7 +249,7 @@ XORDrawElement (ElementTypePtr Element, LocationType DX, LocationType DY)
     PinType moved_pin = *pin;
     moved_pin.X += DX; moved_pin.Y += DY;
 
-    gui->thindraw_pcb_pv (Crosshair.GC, Crosshair.GC, &moved_pin, false, false);
+    gui->thindraw_pcb_pv (Crosshair.GC, Crosshair.GC, &moved_pin, true, false);
   }
   END_LOOP;
 
diff --git a/src/draw.c b/src/draw.c
index d2f873e..76c9a89 100644
--- a/src/draw.c
+++ b/src/draw.c
@@ -68,15 +68,6 @@ RCSID ("$Id$");
 
 
 /* ---------------------------------------------------------------------------
- * some local types
- */
-typedef struct
-{
-  double X, Y;
-}
-FloatPolyType, *FloatPolyTypePtr;
-
-/* ---------------------------------------------------------------------------
  * some local identifiers
  */
 static BoxType Block = {MAXINT, MAXINT, -MAXINT, -MAXINT};
@@ -94,7 +85,6 @@ static void DrawEverything (BoxTypePtr);
 static void DrawTop (const BoxType *);
 static int DrawLayerGroup (int, const BoxType *);
 static void DrawPinOrViaLowLevel (PinTypePtr, bool);
-static void ClearOnlyPin (PinTypePtr, bool);
 static void DrawPlainPin (PinTypePtr, bool);
 static void DrawPlainVia (PinTypePtr, bool);
 static void DrawPinOrViaNameLowLevel (PinTypePtr);
@@ -664,10 +654,15 @@ struct pin_info
 static int
 clearPin_callback (const BoxType * b, void *cl)
 {
-  PinTypePtr pin = (PinTypePtr) b;
+  PinType *pin = (PinTypePtr) b;
   struct pin_info *i = (struct pin_info *) cl;
   if (i->arg)
-    ClearOnlyPin (pin, true);
+    {
+      if (TEST_FLAG (THINDRAWFLAG, PCB) || TEST_FLAG (THINDRAWPOLYFLAG, PCB))
+        gui->thindraw_pcb_pv (Output.pmGC, Output.pmGC, pin, false, true);
+      else
+        gui->fill_pcb_pv (Output.pmGC, Output.pmGC, pin, false, true);
+    }
   return 1;
 }
 static int
@@ -907,95 +902,21 @@ DrawLayerGroup (int group, const BoxType * screen)
 }
 
 /* ---------------------------------------------------------------------------
- * draws one polygon
- * x and y are already in display coordinates
- * the points are numbered:
- *
- *          5 --- 6
- *         /       \
- *        4         7
- *        |         |
- *        3         0
- *         \       /
- *          2 --- 1
-  */
-static void
-DrawSpecialPolygon (hidGC DrawGC,
-		    LocationType X, LocationType Y, int Thickness,
-		    int thin_draw)
-{
-  static FloatPolyType p[8] = {
-    {
-     0.5, -TAN_22_5_DEGREE_2},
-    {
-     TAN_22_5_DEGREE_2, -0.5},
-    {
-     -TAN_22_5_DEGREE_2, -0.5},
-    {
-     -0.5, -TAN_22_5_DEGREE_2},
-    {
-     -0.5, TAN_22_5_DEGREE_2},
-    {
-     -TAN_22_5_DEGREE_2, 0.5},
-    {
-     TAN_22_5_DEGREE_2, 0.5},
-    {
-     0.5, TAN_22_5_DEGREE_2}
-  };
-  static int special_size = 0;
-  static int scaled_x[8];
-  static int scaled_y[8];
-  int polygon_x[9];
-  int polygon_y[9];
-  int i;
-
-
-  if (Thickness != special_size)
-    {
-      special_size = Thickness;
-      for (i = 0; i < 8; i++)
-	{
-	  scaled_x[i] = p[i].X * special_size;
-	  scaled_y[i] = p[i].Y * special_size;
-	}
-    }
-  /* add line offset */
-  for (i = 0; i < 8; i++)
-    {
-      polygon_x[i] = X + scaled_x[i];
-      polygon_y[i] = Y + scaled_y[i];
-    }
-  if (thin_draw)
-    {
-      int i;
-      gui->set_line_cap (DrawGC, Round_Cap);
-      gui->set_line_width (DrawGC, 0);
-      polygon_x[8] = X + scaled_x[0];
-      polygon_y[8] = Y + scaled_y[0];
-      for (i = 0; i < 8; i++)
-	gui->draw_line (DrawGC, polygon_x[i], polygon_y[i],
-			polygon_x[i + 1], polygon_y[i + 1]);
-    }
-  else
-    gui->fill_polygon (DrawGC, 8, polygon_x, polygon_y);
-}
-
-/* ---------------------------------------------------------------------------
  * lowlevel drawing routine for pins and vias
  */
 static void
-DrawPinOrViaLowLevel (PinTypePtr pin, bool drawHole)
+DrawPinOrViaLowLevel (PinTypePtr pv, bool drawHole)
 {
   if (Gathering)
     {
-      AddPart (pin);
+      AddPart (pv);
       return;
     }
 
   if (TEST_FLAG (THINDRAWFLAG, PCB))
-    gui->thindraw_pcb_pin (Output.fgGC, Output.fgGC, pin, drawHole);
+    gui->thindraw_pcb_pv (Output.fgGC, Output.fgGC, pv, drawHole, false);
   else
-    gui->fill_pcb_pin (Output.fgGC, Output.bgGC, pin, drawable);
+    gui->fill_pcb_pv (Output.fgGC, Output.bgGC, pv, drawHole, false);
 }
 
 /**************************************************************
@@ -1036,61 +957,6 @@ DrawHole (PinTypePtr Ptr)
     }
 }
 
-/*******************************************************************
- * draw clearance in pixmask around pins and vias that pierce polygons
- */
-static void
-ClearOnlyPin (PinTypePtr Pin, bool mask)
-{
-  BDimension half =
-    (mask ? Pin->Mask / 2 : (Pin->Thickness + Pin->Clearance) / 2);
-
-  if (!mask && TEST_FLAG (HOLEFLAG, Pin))
-    return;
-  if (half == 0)
-    return;
-  if (!mask && Pin->Clearance <= 0)
-    return;
-
-  /* Clear the area around the pin */
-  if (TEST_FLAG (SQUAREFLAG, Pin))
-    {
-      int l, r, t, b;
-      l = Pin->X - half;
-      b = Pin->Y - half;
-      r = l + half * 2;
-      t = b + half * 2;
-      if (TEST_FLAG (THINDRAWFLAG, PCB) || TEST_FLAG (THINDRAWPOLYFLAG, PCB))
-        {
-          gui->set_line_cap (Output.pmGC, Round_Cap);
-          gui->set_line_width (Output.pmGC, 0);
-          gui->draw_line (Output.pmGC, r, t, r, b);
-          gui->draw_line (Output.pmGC, l, t, l, b);
-          gui->draw_line (Output.pmGC, r, t, l, t);
-          gui->draw_line (Output.pmGC, r, b, l, b);
-        }
-      else
-	gui->fill_rect (Output.pmGC, l, b, r, t);
-    }
-  else if (TEST_FLAG (OCTAGONFLAG, Pin))
-    {
-      DrawSpecialPolygon (Output.pmGC, Pin->X, Pin->Y, half * 2,
-			  TEST_FLAG (THINDRAWFLAG, PCB) ||
-			  TEST_FLAG (THINDRAWPOLYFLAG, PCB));
-    }
-  else
-    {
-      if (TEST_FLAG (THINDRAWFLAG, PCB) || TEST_FLAG (THINDRAWPOLYFLAG, PCB))
-	{
-	  gui->set_line_cap (Output.pmGC, Round_Cap);
-	  gui->set_line_width (Output.pmGC, 0);
-	  gui->draw_arc (Output.pmGC, Pin->X, Pin->Y, half, half, 0, 360);
-	}
-      else
-	gui->fill_circle (Output.pmGC, Pin->X, Pin->Y, half);
-    }
-}
-
 /* ---------------------------------------------------------------------------
  * lowlevel drawing routine for pin and via names
  */
diff --git a/src/global.h b/src/global.h
index 0eca83b..904d6fe 100644
--- a/src/global.h
+++ b/src/global.h
@@ -55,6 +55,7 @@
 typedef struct BoxType BoxType, *BoxTypePtr;
 typedef struct polygon_st PolygonType, *PolygonTypePtr;
 typedef struct pad_st PadType, *PadTypePtr;
+typedef struct pin_st PinType, *PinTypePtr, **PinTypeHandle;
 typedef struct drc_violation_st DrcViolationType, *DrcViolationTypePtr;
 typedef struct rtree rtree_t;
 typedef struct AttributeListType AttributeListType, *AttributeListTypePtr;
@@ -320,7 +321,7 @@ struct pad_st			/* a SMD pad */
   void *Spare;
 };
 
-typedef struct
+struct pin_st
 {
   ANYOBJECTFIELDS;
   BDimension Thickness, Clearance, Mask, DrillingHole;
@@ -329,7 +330,7 @@ typedef struct
   char *Name, *Number;
   void *Element;
   void *Spare;
-} PinType, *PinTypePtr, **PinTypeHandle;
+};
 
 typedef struct
 {
diff --git a/src/hid.h b/src/hid.h
index 27dad52..0a81ddd 100644
--- a/src/hid.h
+++ b/src/hid.h
@@ -384,8 +384,8 @@ typedef enum
                                   const BoxType *clip_box);
     void (*fill_pcb_pad) (hidGC gc_, PadType *pad, bool clip, bool mask);
     void (*thindraw_pcb_pad) (hidGC gc_, PadType *pad, bool clip, bool mask);
-    void (*fill_pcb_pin) (hidGC fg_gc, hidGC bg_gc, PinType *pv, bool drawHole);
-    void (*thindraw_pcb_pin) (hidGC fg_gc, hidGC bg_gc, PinType *pv, bool drawHole);
+    void (*fill_pcb_pv) (hidGC fg_gc, hidGC bg_gc, PinType *pv, bool drawHole, bool mask);
+    void (*thindraw_pcb_pv) (hidGC fg_gc, hidGC bg_gc, PinType *pv, bool drawHole, bool mask);
     void (*fill_rect) (hidGC gc_, int x1_, int y1_, int x2_, int y2_);
 
 
diff --git a/src/hid/common/draw_helpers.c b/src/hid/common/draw_helpers.c
index cef0e88..7435577 100644
--- a/src/hid/common/draw_helpers.c
+++ b/src/hid/common/draw_helpers.c
@@ -303,65 +303,139 @@ common_fill_pcb_pad (hidGC gc, PadType *pad, bool clear, bool mask)
     }
 }
 
+/* ---------------------------------------------------------------------------
+ * draws one polygon
+ * x and y are already in display coordinates
+ * the points are numbered:
+ *
+ *          5 --- 6
+ *         /       \
+ *        4         7
+ *        |         |
+ *        3         0
+ *         \       /
+ *          2 --- 1
+ */
+
+typedef struct
+{
+  double X, Y;
+}
+FloatPolyType;
+
+static void
+draw_octagon_poly (hidGC gc, LocationType X, LocationType Y,
+                   int Thickness, int thin_draw)
+{
+  static FloatPolyType p[8] = {
+    { 0.5,               -TAN_22_5_DEGREE_2},
+    { TAN_22_5_DEGREE_2, -0.5              },
+    {-TAN_22_5_DEGREE_2, -0.5              },
+    {-0.5,               -TAN_22_5_DEGREE_2},
+    {-0.5,                TAN_22_5_DEGREE_2},
+    {-TAN_22_5_DEGREE_2,  0.5              },
+    { TAN_22_5_DEGREE_2,  0.5              },
+    { 0.5,                TAN_22_5_DEGREE_2}
+  };
+  static int special_size = 0;
+  static int scaled_x[8];
+  static int scaled_y[8];
+  int polygon_x[9];
+  int polygon_y[9];
+  int i;
+
+  if (Thickness != special_size)
+    {
+      special_size = Thickness;
+      for (i = 0; i < 8; i++)
+        {
+          scaled_x[i] = p[i].X * special_size;
+          scaled_y[i] = p[i].Y * special_size;
+        }
+    }
+  /* add line offset */
+  for (i = 0; i < 8; i++)
+    {
+      polygon_x[i] = X + scaled_x[i];
+      polygon_y[i] = Y + scaled_y[i];
+    }
+
+  if (thin_draw)
+    {
+      int i;
+      gui->set_line_cap (gc, Round_Cap);
+      gui->set_line_width (gc, 0);
+      polygon_x[8] = X + scaled_x[0];
+      polygon_y[8] = Y + scaled_y[0];
+      for (i = 0; i < 8; i++)
+        gui->draw_line (gc, polygon_x[i    ], polygon_y[i    ],
+                            polygon_x[i + 1], polygon_y[i + 1]);
+    }
+  else
+    gui->fill_polygon (gc, 8, polygon_x, polygon_y);
+}
+
 void
-common_fill_pcb_pv (hidGC gc, PinType *pv, bool drawHole)
+common_fill_pcb_pv (hidGC fg_gc, hidGC bg_gc, PinType *pv, bool drawHole, bool mask)
 {
+  int w = mask ? pv->Mask : pv->Thickness;
+  int r = w / 2;
+
   if (TEST_FLAG (HOLEFLAG, pv))
     {
       if (drawHole)
         {
-          gui->fill_circle (gc, pv->X, pv->Y, pv->Thickness / 2);
-          gui->set_line_cap (gc, Round_Cap);
-          gui->set_line_width (Output.fgGC, 0);
-          gui->draw_arc (gc, pv->X, pv->Y,
-                         pv->Thickness / 2, pv->Thickness / 2, 0, 360);
+          gui->fill_circle (fg_gc, pv->X, pv->Y, r);
+          gui->set_line_cap (fg_gc, Round_Cap);
+          gui->set_line_width (fg_gc, 0);
+          gui->draw_arc (fg_gc, pv->X, pv->Y, r, r, 0, 360);
         }
       return;
     }
 
   if (TEST_FLAG (SQUAREFLAG, pv))
     {
-      int l, r, t, b;
-      l = pv->X - pv->Thickness / 2;
-      b = pv->Y - pv->Thickness / 2;
-      r = l + pv->Thickness;
-      t = b + pv->Thickness;
+      int l = pv->X - r;
+      int b = pv->Y - r;
+      int r = l + w;
+      int t = b + w;
 
-      gui->fill_rect (gc, l, b, r, t);
+      gui->fill_rect (fg_gc, l, b, r, t);
     }
   else if (TEST_FLAG (OCTAGONFLAG, pv))
-    DrawSpecialPolygon (Output.fgGC, pv->X, pv->Y, pv->Thickness, false);
-  else                                /* draw a round pin or via */
-    gui->fill_circle (gc, pv->X, pv->Y, pv->Thickness / 2);
+    draw_octagon_poly (fg_gc, pv->X, pv->Y, w, false);
+  else /* draw a round pin or via */
+    gui->fill_circle (fg_gc, pv->X, pv->Y, r);
 
   /* and the drilling hole  (which is always round) */
   if (drawHole)
-    gui->fill_circle (Output.bgGC, pv->X, pv->Y, pv->DrillingHole / 2);
+    gui->fill_circle (bg_gc, pv->X, pv->Y, pv->DrillingHole / 2);
 }
 
 void
-common_thindraw_pcb_pv (hidGC fg_gc, hidGC bg_gc, PinType *pv, bool drawHole)
+common_thindraw_pcb_pv (hidGC fg_gc, hidGC bg_gc, PinType *pv, bool drawHole, bool mask)
 {
+  int w = mask ? pv->Mask : pv->Thickness;
+  int r = w / 2;
+
   if (TEST_FLAG (HOLEFLAG, pv))
     {
       if (drawHole)
         {
-          gui->fill_circle (bg_gc, pv->X, pv->Y, pv->Thickness / 2);
+          gui->fill_circle (bg_gc, pv->X, pv->Y, r);
           gui->set_line_cap (bg_gc, Round_Cap);
           gui->set_line_width (bg_gc, 0);
-          gui->draw_arc (bg_gc, pv->X, pv->Y,
-                         pv->Thickness / 2, pv->Thickness / 2, 0, 360);
+          gui->draw_arc (bg_gc, pv->X, pv->Y, r, r, 0, 360);
         }
       return;
     }
 
   if (TEST_FLAG (SQUAREFLAG, pv))
     {
-      int l, r, t, b;
-      l = pv->X - pv->Thickness / 2;
-      b = pv->Y - pv->Thickness / 2;
-      r = l + pv->Thickness;
-      t = b + pv->Thickness;
+      int l = pv->X - r;
+      int b = pv->Y - r;
+      int r = l + w;
+      int t = b + w;
 
       gui->set_line_cap (fg_gc, Round_Cap);
       gui->set_line_width (fg_gc, 0);
@@ -373,14 +447,13 @@ common_thindraw_pcb_pv (hidGC fg_gc, hidGC bg_gc, PinType *pv, bool drawHole)
     }
   else if (TEST_FLAG (OCTAGONFLAG, pv))
     {
-      DrawSpecialPolygon (fg_gc, pv->X, pv->Y, pv->Thickness, true);
+      draw_octagon_poly (fg_gc, pv->X, pv->Y, w, true);
     }
-  else
-    {				/* draw a round pin or via */
+  else /* draw a round pin or via */
+    {
       gui->set_line_cap (fg_gc, Round_Cap);
       gui->set_line_width (fg_gc, 0);
-      gui->draw_arc (fg_gc, pv->X, pv->Y,
-                     pv->Thickness / 2, pv->Thickness / 2, 0, 360);
+      gui->draw_arc (fg_gc, pv->X, pv->Y, r, r, 0, 360);
     }
 
   /* and the drilling hole  (which is always round */
diff --git a/src/hid/common/draw_helpers.h b/src/hid/common/draw_helpers.h
index 40d8b21..8243fe4 100644
--- a/src/hid/common/draw_helpers.h
+++ b/src/hid/common/draw_helpers.h
@@ -4,6 +4,6 @@ void common_thindraw_pcb_polygon (hidGC gc, PolygonType *poly,
                                   const BoxType *clip_box);
 void common_fill_pcb_pad (hidGC gc, PadType *pad, bool clear, bool mask);
 void common_thindraw_pcb_pad (hidGC gc, PadType *pad, bool clear, bool mask);
-void common_fill_pcb_pv (hidGC gc, PinType *pv, bool drawHole);
-void common_thindraw_pcb_pv (hidGC fg_gc, hidGC bg_gc, PinType *pv, bool drawHole);
+void common_fill_pcb_pv (hidGC gc, PinType *pv, bool drawHole, bool mask);
+void common_thindraw_pcb_pv (hidGC fg_gc, hidGC bg_gc, PinType *pv, bool drawHole, bool mask);
 void common_draw_helpers_init (HID *hid);
diff --git a/src/hid/common/hidnogui.c b/src/hid/common/hidnogui.c
index b6d26f8..4136704 100644
--- a/src/hid/common/hidnogui.c
+++ b/src/hid/common/hidnogui.c
@@ -171,6 +171,18 @@ nogui_thindraw_pcb_pad (hidGC gc, PadType *pad, bool clear, bool mask)
 }
 
 static void
+nogui_fill_pcb_pv (hidGC gc, PinType *pad, bool clear, bool mask)
+{
+  CRASH;
+}
+
+static void
+nogui_thindraw_pcb_pv (hidGC gc, PinType *pad, bool clear, bool mask)
+{
+  CRASH;
+}
+
+static void
 nogui_fill_rect (hidGC gc, int x1, int y1, int x2, int y2)
 {
   CRASH;
@@ -451,6 +463,8 @@ HID hid_nogui = {
   0 /* nogui_thindraw_pcb_polygon */ ,
   nogui_fill_pcb_pad,
   nogui_thindraw_pcb_pad,
+  nogui_fill_pcb_pv,
+  nogui_thindraw_pcb_pv,
   nogui_fill_rect,
   nogui_calibrate,
   nogui_shift_is_pressed,
@@ -508,6 +522,8 @@ apply_default_hid (HID * d, HID * s)
   AD (thindraw_pcb_polygon);
   AD (fill_pcb_pad);
   AD (thindraw_pcb_pad);
+  AD (fill_pcb_pv);
+  AD (thindraw_pcb_pv);
   AD (calibrate);
   AD (shift_is_pressed);
   AD (control_is_pressed);
