Bottom: 689ca1a29844b561f3b47e811d28b78cc19965cf
Top:    fde21c8306603f817b7387d7a6137d2dd66bf37e
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2009-02-10 22:12:54 +0000

Refresh of add-raw-polygons-support-for-t

---

diff --git a/src/hid/common/hidgl.c b/src/hid/common/hidgl.c
index 3f1c590..d109e1f 100644
--- a/src/hid/common/hidgl.c
+++ b/src/hid/common/hidgl.c
@@ -36,7 +36,7 @@
 
 #include "hid.h"
 #include "hidgl.h"
-
+#include "rtree.h"
 
 
 #ifdef HAVE_LIBDMALLOC
@@ -537,6 +537,8 @@ myBegin (GLenum type)
   triangle_comp_idx = 0;
 }
 
+static double global_scale;
+
 static void
 myVertex (GLdouble *vertex_data)
 {
@@ -553,11 +555,23 @@ myVertex (GLdouble *vertex_data)
         }
       else
         {
+#if 1
           hidgl_ensure_triangle_space (&buffer, 1);
           hidgl_add_triangle (&buffer,
                               triangle_vertices [0], triangle_vertices [1],
                               triangle_vertices [2], triangle_vertices [3],
                               vertex_data [0], vertex_data [1]);
+#else
+          hidgl_draw_line (Square_Cap, global_scale,
+                           triangle_vertices [0], triangle_vertices [1],
+                           triangle_vertices [2], triangle_vertices [3], global_scale);
+          hidgl_draw_line (Square_Cap, global_scale,
+                           triangle_vertices [2], triangle_vertices [3],
+                           vertex_data [0],       vertex_data [1],       global_scale);
+          hidgl_draw_line (Square_Cap, global_scale,
+                           vertex_data [0],       vertex_data [1],
+                           triangle_vertices [0], triangle_vertices [1], global_scale);
+#endif
 
           if (tessVertexType == GL_TRIANGLE_STRIP)
             {
@@ -628,8 +642,45 @@ hidgl_fill_polygon (int n_coords, int *x, int *y)
   free (vertices);
 }
 
+void tesselate_contour (GLUtesselator *tobj, VNODE *vnode,
+                        GLdouble *vertices, int *i)
+{
+  VNODE *vn = vnode;
+  int offset = *i * 3;
+
+  gluTessBeginContour (tobj);
+  do {
+    vertices [0 + offset] = vn->point[0];
+    vertices [1 + offset] = vn->point[1];
+    vertices [2 + offset] = 0.;
+    gluTessVertex (tobj, &vertices [offset], &vertices [offset]);
+    (*i)++;
+    offset += 3;
+  } while ((vn = vn->next) != vnode);
+  gluTessEndContour (tobj);
+}
+
+struct do_hole_info {
+  GLUtesselator *tobj;
+  GLdouble *vertices;
+  int *i;
+};
+
+static int
+do_hole (const BoxType *b, void *cl)
+{
+  struct do_hole_info *info = cl;
+  PLINE *curc = (PLINE *) b;
+  /* Ignore the outer contour - we draw it first explicitly*/
+  if (curc->Flags.orient == PLF_DIR) {
+    return 0;
+  }
+  tesselate_contour (info->tobj, &curc->head, info->vertices, info->i);
+  return 1;
+}
+
 void
-hidgl_fill_pcb_polygon (PolygonType *poly)
+hidgl_fill_pcb_polygon (PolygonType *poly, BoxType *clip_box, double scale)
 {
   int i, cc;
   GLUtesselator *tobj;
@@ -637,7 +688,8 @@ hidgl_fill_pcb_polygon (PolygonType *poly)
   int vertex_count = 0;
   POLYAREA *piece;
   PLINE *contour;
-  VNODE *vnode;
+
+  global_scale = scale;
 
   if (poly->Clipped == NULL) {
     fprintf (stderr, "hidgl_fill_pcb_polygon: poly->Clipped == NULL\n");
@@ -646,6 +698,7 @@ hidgl_fill_pcb_polygon (PolygonType *poly)
 
   /* JUST DRAW THE FIRST PIECE */
   /* Walk the polygon structure, counting vertices */
+  /* This gives an upper bound on the amount of storage required */
   piece = poly->Clipped;
 //  do {
     for (contour = piece->contours; contour != NULL; contour = contour->next)
@@ -667,23 +720,18 @@ hidgl_fill_pcb_polygon (PolygonType *poly)
   i = 0;
   cc = 1;
   piece = poly->Clipped;
-//  do {
-    for (contour = piece->contours; contour != NULL; contour = contour->next) {
-      gluTessBeginContour (tobj);
-
-//      printf ("Beginning contour %i\n", cc++);
-      vnode = &contour->head;
-      do {
-        /* SHOULD PROBABLY TRY TO CLIP THIS TO THE VIEWPORT */
-        vertices [0 + i * 3] = vnode->point[0];
-        vertices [1 + i * 3] = vnode->point[1];
-        vertices [2 + i * 3] = 0.;
-        gluTessVertex (tobj, &vertices [i * 3], &vertices [i * 3]);
-
-        i++;
-      } while ((vnode = vnode->next) != &contour->head);
-      gluTessEndContour (tobj);
-    }
+  do {
+    struct do_hole_info info;
+    info.tobj = tobj;
+    info.vertices = vertices;
+    info.i = &i;
+
+    tesselate_contour (tobj, &piece->contours->head, vertices, &i);
+
+    /* Search for a contour to draw */
+    r_search (piece->contour_tree, clip_box, NULL, do_hole, &info);
+
+  } while (0);
 //  } while ((piece = piece->f) != poly->Clipped);
 
   gluTessEndPolygon (tobj);
diff --git a/src/hid/common/hidgl.h b/src/hid/common/hidgl.h
index 75d6650..980f49b 100644
--- a/src/hid/common/hidgl.h
+++ b/src/hid/common/hidgl.h
@@ -65,7 +65,7 @@ void hidgl_draw_arc (double width, int vx, int vy, int vrx, int vry, int start_a
 void hidgl_draw_rect (int x1, int y1, int x2, int y2);
 void hidgl_fill_circle (int vx, int vy, int vr, double scale);
 void hidgl_fill_polygon (int n_coords, int *x, int *y);
-void hidgl_fill_pcb_polygon (PolygonType *poly);
+void hidgl_fill_pcb_polygon (PolygonType *poly, BoxType *clip_box, double scale);
 void hidgl_fill_rect (int x1, int y1, int x2, int y2);
 
 
diff --git a/src/hid/gtk/gtkhid-main.c b/src/hid/gtk/gtkhid-main.c
index 6125d2e..2590f29 100644
--- a/src/hid/gtk/gtkhid-main.c
+++ b/src/hid/gtk/gtkhid-main.c
@@ -938,9 +938,16 @@ ghid_fill_polygon (hidGC gc, int n_coords, int *x, int *y)
 void
 ghid_fill_pcb_polygon (hidGC gc, PolygonType *poly)
 {
+  BoxType clip_box;
+
   USE_GC (gc);
 
-  hidgl_fill_pcb_polygon (poly);
+  clip_box.X1 = gport->view_x0;
+  clip_box.Y1 = gport->view_y0;
+  clip_box.X2 = gport->view_x0 + gport->view_width;
+  clip_box.Y2 = gport->view_y0 + gport->view_height;
+
+  hidgl_fill_pcb_polygon (poly, &clip_box, gport->zoom);
 }
 
 void
