Bottom: f5cd1a8791642c78c3b019205126d605508849b8
Top:    81a8275d7546276e238f3af4bf4d6c0d7a59a3ef
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2009-10-14 14:31:44 +0100

Refresh of shiny-3d-eye-candy

---

diff --git a/src/hid/gtk/gtkhid-main.c b/src/hid/gtk/gtkhid-main.c
index 41ebe19..6bde5c0 100644
--- a/src/hid/gtk/gtkhid-main.c
+++ b/src/hid/gtk/gtkhid-main.c
@@ -344,6 +344,7 @@ draw_grid ()
   static int npoints = 0;
   int x1, y1, x2, y2, n, i;
   double x, y;
+  extern float global_depth;
 
   if (!Settings.DrawGrid)
     return;
@@ -395,23 +396,24 @@ draw_grid ()
     {
       npoints = n + 10;
       points =
-	MyRealloc (points, npoints * 2 * sizeof (GLfloat), "gtk_draw_grid");
+	MyRealloc (points, npoints * 3 * sizeof (GLfloat), "gtk_draw_grid");
     }
 
   glEnableClientState (GL_VERTEX_ARRAY);
-  glVertexPointer (2, GL_FLOAT, 0, points);
+  glVertexPointer (3, GL_FLOAT, 0, points);
 
   n = 0;
   for (x = x1; x <= x2; x += PCB->Grid)
     {
-      points[2 * n] = Vx (x);
+      points[3 * n] = Vx (x);
+      points[3 * n + 2] = global_depth;
       n++;
     }
   for (y = y1; y <= y2; y += PCB->Grid)
     {
       int vy = Vy (y);
       for (i = 0; i < n; i++)
-	points[2 * i + 1] = vy;
+	points[3 * i + 1] = vy;
       glDrawArrays (GL_POINTS, 0, n);
     }
 
diff --git a/src/hid/gtk/gui-output-events.c b/src/hid/gtk/gui-output-events.c
index 3bfd354..feb9207 100644
--- a/src/hid/gtk/gui-output-events.c
+++ b/src/hid/gtk/gui-output-events.c
@@ -299,16 +299,16 @@ have_crosshair_attachments (void)
 #define VCD		8
 
 static void
-draw_right_cross (gint x, gint y)
+draw_right_cross (gint x, gint y, gint z)
 {
-  glVertex2i (x, 0);
-  glVertex2i (x, gport->height);
-  glVertex2i (0, y);
-  glVertex2i (gport->width, y);
+  glVertex3i (x, 0, z);
+  glVertex3i (x, gport->height, z);
+  glVertex3i (0, y, z);
+  glVertex3i (gport->width, y, z);
 }
 
 static void
-draw_slanted_cross (gint x, gint y)
+draw_slanted_cross (gint x, gint y, gint z)
 {
   gint x0, y0, x1, y1;
 
@@ -320,8 +320,8 @@ draw_slanted_cross (gint x, gint y)
   y0 = MAX(0, MIN (y0, gport->height));
   y1 = y - x;
   y1 = MAX(0, MIN (y1, gport->height));
-  glVertex2i (x0, y0);
-  glVertex2i (x1, y1);
+  glVertex3i (x0, y0, z);
+  glVertex3i (x1, y1, z);
 
   x0 = x - (gport->height - y);
   x0 = MAX(0, MIN (x0, gport->width));
@@ -331,12 +331,12 @@ draw_slanted_cross (gint x, gint y)
   y0 = MAX(0, MIN (y0, gport->height));
   y1 = y - (gport->width - x);
   y1 = MAX(0, MIN (y1, gport->height));
-  glVertex2i (x0, y0);
-  glVertex2i (x1, y1);
+  glVertex3i (x0, y0, z);
+  glVertex3i (x1, y1, z);
 }
 
 static void
-draw_dozen_cross (gint x, gint y)
+draw_dozen_cross (gint x, gint y, gint z)
 {
   gint x0, y0, x1, y1;
   gdouble tan60 = sqrt (3);
@@ -349,8 +349,8 @@ draw_dozen_cross (gint x, gint y)
   y0 = MAX(0, MIN (y0, gport->height));
   y1 = y - x * tan60;
   y1 = MAX(0, MIN (y1, gport->height));
-  glVertex2i (x0, y0);
-  glVertex2i (x1, y1);
+  glVertex3i (x0, y0, z);
+  glVertex3i (x1, y1, z);
 
   x0 = x + (gport->height - y) * tan60;
   x0 = MAX(0, MIN (x0, gport->width));
@@ -360,8 +360,8 @@ draw_dozen_cross (gint x, gint y)
   y0 = MAX(0, MIN (y0, gport->height));
   y1 = y - x / tan60;
   y1 = MAX(0, MIN (y1, gport->height));
-  glVertex2i (x0, y0);
-  glVertex2i (x1, y1);
+  glVertex3i (x0, y0, z);
+  glVertex3i (x1, y1, z);
 
   x0 = x - (gport->height - y) / tan60;
   x0 = MAX(0, MIN (x0, gport->width));
@@ -371,8 +371,8 @@ draw_dozen_cross (gint x, gint y)
   y0 = MAX(0, MIN (y0, gport->height));
   y1 = y - (gport->width - x) * tan60;
   y1 = MAX(0, MIN (y1, gport->height));
-  glVertex2i (x0, y0);
-  glVertex2i (x1, y1);
+  glVertex3i (x0, y0, z);
+  glVertex3i (x1, y1, z);
 
   x0 = x - (gport->height - y) * tan60;
   x0 = MAX(0, MIN (x0, gport->width));
@@ -382,30 +382,31 @@ draw_dozen_cross (gint x, gint y)
   y0 = MAX(0, MIN (y0, gport->height));
   y1 = y - (gport->width - x) / tan60;
   y1 = MAX(0, MIN (y1, gport->height));
-  glVertex2i (x0, y0);
-  glVertex2i (x1, y1);
+  glVertex3i (x0, y0, z);
+  glVertex3i (x1, y1, z);
 }
 
 static void
-draw_crosshair (gint x, gint y)
+draw_crosshair (gint x, gint y, gint z)
 {
   static enum crosshair_shape prev = Basic_Crosshair_Shape;
 
-  draw_right_cross (x, y);
+  draw_right_cross (x, y, z);
   if (prev == Union_Jack_Crosshair_Shape)
-    draw_slanted_cross (x, y);
+    draw_slanted_cross (x, y, z);
   if (prev == Dozen_Crosshair_Shape)
-    draw_dozen_cross (x, y);
+    draw_dozen_cross (x, y, z);
   prev = Crosshair.shape;
 }
 
 void
 ghid_show_crosshair (gboolean show)
 {
-  gint x, y;
-  static gint x_prev = -1, y_prev = -1;
+  gint x, y, z;
+  static gint x_prev = -1, y_prev = -1, z_prev = -1;
   static int done_once = 0;
   static GdkColor cross_color;
+  extern float global_depth;
 
   if (gport->x_crosshair < 0 || ghidgui->creating) {// || !gport->has_entered) {
     printf ("Returning\n");
@@ -420,6 +421,7 @@ ghid_show_crosshair (gboolean show)
     }
   x = DRAW_X (gport->x_crosshair);
   y = DRAW_Y (gport->y_crosshair);
+  z = global_depth;
 
   glEnable (GL_COLOR_LOGIC_OP);
   glLogicOp (GL_XOR);
@@ -435,13 +437,13 @@ ghid_show_crosshair (gboolean show)
 #if 1
   if (x_prev >= 0)
     {
-      draw_crosshair (x_prev, y_prev);
+      draw_crosshair (x_prev, y_prev, z_prev);
     }
 #endif
 
   if (x >= 0 && show)
     {
-      draw_crosshair (x, y);
+      draw_crosshair (x, y, z);
     }
 
   glEnd ();
@@ -453,43 +455,43 @@ ghid_show_crosshair (gboolean show)
 #if 1
       if (x_prev >= 0)
         {
-          glVertex2i (0,                  y_prev - VCD);
-          glVertex2i (0,                  y_prev - VCD + VCW);
-          glVertex2i (VCD,                y_prev - VCD + VCW);
-          glVertex2i (VCD,                y_prev - VCD);
-          glVertex2i (gport->width,       y_prev - VCD);
-          glVertex2i (gport->width,       y_prev - VCD + VCW);
-          glVertex2i (gport->width - VCD, y_prev - VCD + VCW);
-          glVertex2i (gport->width - VCD, y_prev - VCD);
-          glVertex2i (x_prev - VCD,       0);
-          glVertex2i (x_prev - VCD,       VCD);
-          glVertex2i (x_prev - VCD + VCW, VCD);
-          glVertex2i (x_prev - VCD + VCW, 0);
-          glVertex2i (x_prev - VCD,       gport->height - VCD);
-          glVertex2i (x_prev - VCD,       gport->height);
-          glVertex2i (x_prev - VCD + VCW, gport->height);
-          glVertex2i (x_prev - VCD + VCW, gport->height - VCD);
+          glVertex3i (0,                  y_prev - VCD,        z_prev);
+          glVertex3i (0,                  y_prev - VCD + VCW,  z_prev);
+          glVertex3i (VCD,                y_prev - VCD + VCW,  z_prev);
+          glVertex3i (VCD,                y_prev - VCD,        z_prev);
+          glVertex3i (gport->width,       y_prev - VCD,        z_prev);
+          glVertex3i (gport->width,       y_prev - VCD + VCW,  z_prev);
+          glVertex3i (gport->width - VCD, y_prev - VCD + VCW,  z_prev);
+          glVertex3i (gport->width - VCD, y_prev - VCD,        z_prev);
+          glVertex3i (x_prev - VCD,       0,                   z_prev);
+          glVertex3i (x_prev - VCD,       VCD,                 z_prev);
+          glVertex3i (x_prev - VCD + VCW, VCD,                 z_prev);
+          glVertex3i (x_prev - VCD + VCW, 0,                   z_prev);
+          glVertex3i (x_prev - VCD,       gport->height - VCD, z_prev);
+          glVertex3i (x_prev - VCD,       gport->height,       z_prev);
+          glVertex3i (x_prev - VCD + VCW, gport->height,       z_prev);
+          glVertex3i (x_prev - VCD + VCW, gport->height - VCD, z_prev);
         }
 #endif
 
       if (x >= 0 && show)
         {
-          glVertex2i (0,                  y - VCD);
-          glVertex2i (0,                  y - VCD + VCW);
-          glVertex2i (VCD,                y - VCD + VCW);
-          glVertex2i (VCD,                y - VCD);
-          glVertex2i (gport->width,       y - VCD);
-          glVertex2i (gport->width,       y - VCD + VCW);
-          glVertex2i (gport->width - VCD, y - VCD + VCW);
-          glVertex2i (gport->width - VCD, y - VCD);
-          glVertex2i (x - VCD,            0);
-          glVertex2i (x - VCD,            VCD);
-          glVertex2i (x - VCD + VCW,      VCD);
-          glVertex2i (x - VCD + VCW,      0);
-          glVertex2i (x - VCD,            gport->height - VCD);
-          glVertex2i (x - VCD,            gport->height);
-          glVertex2i (x - VCD + VCW,      gport->height);
-          glVertex2i (x - VCD + VCW,      gport->height - VCD);
+          glVertex3i (0,                  y - VCD,             z);
+          glVertex3i (0,                  y - VCD + VCW,       z);
+          glVertex3i (VCD,                y - VCD + VCW,       z);
+          glVertex3i (VCD,                y - VCD,             z);
+          glVertex3i (gport->width,       y - VCD,             z);
+          glVertex3i (gport->width,       y - VCD + VCW,       z);
+          glVertex3i (gport->width - VCD, y - VCD + VCW,       z);
+          glVertex3i (gport->width - VCD, y - VCD,             z);
+          glVertex3i (x - VCD,            0,                   z);
+          glVertex3i (x - VCD,            VCD,                 z);
+          glVertex3i (x - VCD + VCW,      VCD,                 z);
+          glVertex3i (x - VCD + VCW,      0,                   z);
+          glVertex3i (x - VCD,            gport->height - VCD, z);
+          glVertex3i (x - VCD,            gport->height,       z);
+          glVertex3i (x - VCD + VCW,      gport->height,       z);
+          glVertex3i (x - VCD + VCW,      gport->height - VCD, z);
         }
 
       glEnd ();
@@ -499,9 +501,10 @@ ghid_show_crosshair (gboolean show)
     {
       x_prev = x;
       y_prev = y;
+      z_prev = z;
     }
   else
-    x_prev = y_prev = -1;
+    x_prev = y_prev = z_prev = -1;
 
   glDisable (GL_COLOR_LOGIC_OP);
 }
@@ -791,12 +794,12 @@ ghid_screen_update (void)
 }
 
 void DrawAttached (Boolean);
-void draw_grid ();
+void draw_grid (void);
 
-static float view_matrix[4][4] = {{1.0, 0.0, 0.0, 0.0},
-                                  {0.0, 1.0, 0.0, 0.0},
-                                  {0.0, 0.0, 1.0, 0.0},
-                                  {0.0, 0.0, 0.0, 1.0}};
+static GLfloat view_matrix[4][4] = {{1.0, 0.0, 0.0, 0.0},
+                                    {0.0, 1.0, 0.0, 0.0},
+                                    {0.0, 0.0, 1.0, 0.0},
+                                    {0.0, 0.0, 0.0, 1.0}};
 
 void
 ghid_port_rotate (void *ball, float *quarternion, gpointer userdata)
@@ -888,13 +891,6 @@ ghid_port_drawing_area_expose_event_cb (GtkWidget * widget,
   glClear (GL_COLOR_BUFFER_BIT | GL_STENCIL_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
   hidgl_reset_stencil_usage ();
 
-#if 0
-  glClearColor (gport->bg_color.red / 65535.,
-                gport->bg_color.green / 65535.,
-                gport->bg_color.blue / 65535.,
-                1.);
-#endif
-
 #if 1
   region.X1 = MIN (Px (ev->area.x), Px (ev->area.x + ev->area.width + 1));
   region.X2 = MAX (Px (ev->area.x), Px (ev->area.x + ev->area.width + 1));
@@ -939,6 +935,11 @@ ghid_port_drawing_area_expose_event_cb (GtkWidget * widget,
   hidgl_flush_triangles (&buffer);
   glPopMatrix ();
 
+  /* Just prod the drawing code so the current depth gets set to
+     the right value for the layer we are editing */
+  gui->set_layer (NULL, INDEXOFCURRENT, 0);
+  gui->set_layer (NULL, SL_FINISHED, 0);
+
   draw_grid ();
 
   hidgl_init_triangle_array (&buffer);
