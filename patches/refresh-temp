Bottom: 5aa692ff912f3a70e079d098f82dad7c5ac33f0f
Top:    240ec9e00d3bd2e71dbb9e681f032b2fd3579cb7
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2009-11-05 16:45:35 +0000

Refresh of temp-fix

---

diff --git a/src/cairo/cairo-bentley-ottmann.c b/src/cairo/cairo-bentley-ottmann.c
index 7f291ee..b59df45 100644
--- a/src/cairo/cairo-bentley-ottmann.c
+++ b/src/cairo/cairo-bentley-ottmann.c
@@ -1378,8 +1378,8 @@ poly_area_to_start_events (POLYAREA                *poly,
 }
 
 
-cairo_traps_t *
-bo_poly_to_traps (POLYAREA *poly)
+cairo_status_t
+bo_poly_to_traps (POLYAREA *poly, cairo_traps_t *traps)
 {
   int intersections;
   cairo_status_t status;
@@ -1391,12 +1391,8 @@ bo_poly_to_traps (POLYAREA *poly)
   int i;
   int n;
   POLYAREA *pa;
-  cairo_traps_t int_traps;
-  cairo_traps_t *traps = &int_traps;
   PLINE *contour;
 
-  _cairo_traps_init (traps);
-
   pa = poly;
   do {
     for (contour = pa->contours; contour != NULL; contour = contour->next)
@@ -1415,7 +1411,7 @@ bo_poly_to_traps (POLYAREA *poly)
                                         sizeof (cairo_bo_event_t *),
                                         sizeof (cairo_bo_event_t *));
       if (unlikely (events == NULL))
-          return NULL;
+          return CAIRO_STATUS_NO_MEMORY;
 
       event_ptrs = (cairo_bo_event_t **) (events + num_events);
   }
@@ -1476,12 +1472,12 @@ bo_poly_to_traps (POLYAREA *poly)
   if (events != stack_events)
       free (events);
 
-  return traps;
+  return CAIRO_STATUS_SUCCESS;
 }
 
 
-cairo_traps_t *
-bo_contour_to_traps (PLINE *contour)
+cairo_status_t
+bo_contour_to_traps (PLINE *contour, cairo_traps_t *traps)
 {
   int intersections;
   cairo_status_t status;
@@ -1492,10 +1488,6 @@ bo_contour_to_traps (PLINE *contour)
   int num_events = 0;
   int i;
   int n;
-  cairo_traps_t int_traps;
-  cairo_traps_t *traps = &int_traps;
-
-  _cairo_traps_init (traps);
 
   num_events = contour->Count;
 
@@ -1510,7 +1502,7 @@ bo_contour_to_traps (PLINE *contour)
                                         sizeof (cairo_bo_event_t *),
                                         sizeof (cairo_bo_event_t *));
       if (unlikely (events == NULL))
-          return NULL;
+          return CAIRO_STATUS_NO_MEMORY;
 
       event_ptrs = (cairo_bo_event_t **) (events + num_events);
   }
@@ -1571,5 +1563,5 @@ bo_contour_to_traps (PLINE *contour)
   if (events != stack_events)
       free (events);
 
-  return traps;
+  return CAIRO_STATUS_SUCCESS;
 }
diff --git a/src/hid/common/hidgl.c b/src/hid/common/hidgl.c
index 77cfdba..6931651 100644
--- a/src/hid/common/hidgl.c
+++ b/src/hid/common/hidgl.c
@@ -594,7 +594,7 @@ do_hole (const BoxType *b, void *cl)
 {
   struct do_hole_info *info = cl;
   PLINE *curc = (PLINE *) b;
-  cairo_traps_t *traps;
+  cairo_traps_t traps;
 
   /* Ignore the outer contour - we draw it first explicitly*/
   if (curc->Flags.orient == PLF_DIR) {
@@ -613,8 +613,9 @@ do_hole (const BoxType *b, void *cl)
     }
   }
 
-  traps = bo_contour_to_traps (curc);
-  _cairo_traps_fini (traps);
+  _cairo_traps_init (&traps);
+  bo_contour_to_traps (curc, &traps);
+  _cairo_traps_fini (&traps);
 
   return 1;
 }
@@ -629,7 +630,7 @@ hidgl_fill_pcb_polygon (PolygonType *poly, const BoxType *clip_box, double scale
 {
   struct do_hole_info info;
   int stencil_bit;
-  cairo_traps_t *traps;
+  cairo_traps_t traps;
 
   info.scale = scale;
   global_scale = scale;
@@ -678,8 +679,9 @@ hidgl_fill_pcb_polygon (PolygonType *poly, const BoxType *clip_box, double scale
                                                               // any bits permitted by the stencil writemask
 
   /* Draw the polygon outer */
-  traps = bo_contour_to_traps (poly->Clipped->contours);
-  _cairo_traps_fini (traps);
+  _cairo_traps_init (&traps);
+  bo_contour_to_traps (poly->Clipped->contours, &traps);
+  _cairo_traps_fini (&traps);
   hidgl_flush_triangles (&buffer);
 
   /* Unassign our stencil buffer bit */
