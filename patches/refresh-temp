Bottom: 52dec1d3bd5c82a5342ca6fee6abd7904e41865e
Top:    1c4d300359355bd1a05a20c7fad014aec8341d05
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2010-08-24 17:08:21 +0100

Refresh of move-more-gdk-specific-drawing

---

diff --git a/src/hid/gtk/gtkhid-gdk.c b/src/hid/gtk/gtkhid-gdk.c
index d09f101..1a9811f 100644
--- a/src/hid/gtk/gtkhid-gdk.c
+++ b/src/hid/gtk/gtkhid-gdk.c
@@ -723,3 +723,157 @@ ghid_invalidate_all ()
   ghidgui->need_restore_crosshair = FALSE;
   ghid_screen_update ();
 }
+
+static void
+draw_right_cross (GdkGC *xor_gc, gint x, gint y)
+{
+  gdk_draw_line (gport->drawing_area->window, xor_gc, x, 0, x, gport->height);
+  gdk_draw_line (gport->drawing_area->window, xor_gc, 0, y, gport->width, y);
+}
+
+static void
+draw_slanted_cross (GdkGC *xor_gc, gint x, gint y)
+{
+  gint x0, y0, x1, y1;
+
+  x0 = x + (gport->height - y);
+  x0 = MAX(0, MIN (x0, gport->width));
+  x1 = x - y;
+  x1 = MAX(0, MIN (x1, gport->width));
+  y0 = y + (gport->width - x);
+  y0 = MAX(0, MIN (y0, gport->height));
+  y1 = y - x;
+  y1 = MAX(0, MIN (y1, gport->height));
+  gdk_draw_line (gport->drawing_area->window, xor_gc, x0, y0, x1, y1);
+
+  x0 = x - (gport->height - y);
+  x0 = MAX(0, MIN (x0, gport->width));
+  x1 = x + y;
+  x1 = MAX(0, MIN (x1, gport->width));
+  y0 = y + x;
+  y0 = MAX(0, MIN (y0, gport->height));
+  y1 = y - (gport->width - x);
+  y1 = MAX(0, MIN (y1, gport->height));
+  gdk_draw_line (gport->drawing_area->window, xor_gc, x0, y0, x1, y1);
+}
+
+static void
+draw_dozen_cross (GdkGC *xor_gc, gint x, gint y)
+{
+  gint x0, y0, x1, y1;
+  gdouble tan60 = sqrt (3);
+
+  x0 = x + (gport->height - y) / tan60;
+  x0 = MAX(0, MIN (x0, gport->width));
+  x1 = x - y / tan60;
+  x1 = MAX(0, MIN (x1, gport->width));
+  y0 = y + (gport->width - x) * tan60;
+  y0 = MAX(0, MIN (y0, gport->height));
+  y1 = y - x * tan60;
+  y1 = MAX(0, MIN (y1, gport->height));
+  gdk_draw_line (gport->drawing_area->window, xor_gc, x0, y0, x1, y1);
+
+  x0 = x + (gport->height - y) * tan60;
+  x0 = MAX(0, MIN (x0, gport->width));
+  x1 = x - y * tan60;
+  x1 = MAX(0, MIN (x1, gport->width));
+  y0 = y + (gport->width - x) / tan60;
+  y0 = MAX(0, MIN (y0, gport->height));
+  y1 = y - x / tan60;
+  y1 = MAX(0, MIN (y1, gport->height));
+  gdk_draw_line (gport->drawing_area->window, xor_gc, x0, y0, x1, y1);
+
+  x0 = x - (gport->height - y) / tan60;
+  x0 = MAX(0, MIN (x0, gport->width));
+  x1 = x + y / tan60;
+  x1 = MAX(0, MIN (x1, gport->width));
+  y0 = y + x * tan60;
+  y0 = MAX(0, MIN (y0, gport->height));
+  y1 = y - (gport->width - x) * tan60;
+  y1 = MAX(0, MIN (y1, gport->height));
+  gdk_draw_line (gport->drawing_area->window, xor_gc, x0, y0, x1, y1);
+
+  x0 = x - (gport->height - y) * tan60;
+  x0 = MAX(0, MIN (x0, gport->width));
+  x1 = x + y * tan60;
+  x1 = MAX(0, MIN (x1, gport->width));
+  y0 = y + x / tan60;
+  y0 = MAX(0, MIN (y0, gport->height));
+  y1 = y - (gport->width - x) / tan60;
+  y1 = MAX(0, MIN (y1, gport->height));
+  gdk_draw_line (gport->drawing_area->window, xor_gc, x0, y0, x1, y1);
+}
+
+static void
+draw_crosshair (GdkGC *xor_gc, gint x, gint y)
+{
+  static enum crosshair_shape prev = Basic_Crosshair_Shape;
+
+  draw_right_cross (xor_gc, x, y);
+  if (prev == Union_Jack_Crosshair_Shape)
+    draw_slanted_cross (xor_gc, x, y);
+  if (prev == Dozen_Crosshair_Shape)
+    draw_dozen_cross (xor_gc, x, y);
+  prev = Crosshair.shape;
+}
+
+void
+ghid_show_crosshair (gboolean show)
+{
+  gint x, y;
+  static gint x_prev = -1, y_prev = -1;
+  static GdkGC *xor_gc;
+  static GdkColor cross_color;
+
+  if (gport->x_crosshair < 0 || ghidgui->creating || !gport->has_entered)
+    return;
+
+  if (!xor_gc)
+    {
+      xor_gc = gdk_gc_new (ghid_port.drawing_area->window);
+      gdk_gc_copy (xor_gc, ghid_port.drawing_area->style->white_gc);
+      gdk_gc_set_function (xor_gc, GDK_XOR);
+      /* FIXME: when CrossColor changed from config */
+      ghid_map_color_string (Settings.CrossColor, &cross_color);
+    }
+  x = DRAW_X (gport->x_crosshair);
+  y = DRAW_Y (gport->y_crosshair);
+
+  gdk_gc_set_foreground (xor_gc, &cross_color);
+
+  if (x_prev >= 0)
+    {
+      draw_crosshair (xor_gc, x_prev, y_prev);
+      if (ghidgui->auto_pan_on && have_crosshair_attachments ())
+	{
+	  gdk_draw_rectangle (gport->drawing_area->window, xor_gc, TRUE,
+			      0, y_prev - VCD, VCD, VCW);
+	  gdk_draw_rectangle (gport->drawing_area->window, xor_gc, TRUE,
+			      gport->width - VCD, y_prev - VCD, VCD, VCW);
+	  gdk_draw_rectangle (gport->drawing_area->window, xor_gc, TRUE,
+			      x_prev - VCD, 0, VCW, VCD);
+	  gdk_draw_rectangle (gport->drawing_area->window, xor_gc, TRUE,
+			      x_prev - VCD, gport->height - VCD, VCW, VCD);
+	}
+    }
+
+  if (x >= 0 && show)
+    {
+      draw_crosshair (xor_gc, x, y);
+      if (ghidgui->auto_pan_on && have_crosshair_attachments ())
+	{
+	  gdk_draw_rectangle (gport->drawing_area->window, xor_gc, TRUE,
+			      0, y - VCD, VCD, VCW);
+	  gdk_draw_rectangle (gport->drawing_area->window, xor_gc, TRUE,
+			      gport->width - VCD, y - VCD, VCD, VCW);
+	  gdk_draw_rectangle (gport->drawing_area->window, xor_gc, TRUE,
+			      x - VCD, 0, VCW, VCD);
+	  gdk_draw_rectangle (gport->drawing_area->window, xor_gc, TRUE,
+			      x - VCD, gport->height - VCD, VCW, VCD);
+	}
+      x_prev = x;
+      y_prev = y;
+    }
+  else
+    x_prev = y_prev = -1;
+}
diff --git a/src/hid/gtk/gui-output-events.c b/src/hid/gtk/gui-output-events.c
index 7230aa3..8746be8 100644
--- a/src/hid/gtk/gui-output-events.c
+++ b/src/hid/gtk/gui-output-events.c
@@ -302,167 +302,6 @@ have_crosshair_attachments (void)
 #define	VCW		16
 #define VCD		8
 
-static void
-draw_right_cross (GdkGC *xor_gc, gint x, gint y)
-{
-  gdk_draw_line (gport->drawing_area->window, xor_gc,
-		 x, 0, x, gport->height);
-  gdk_draw_line (gport->drawing_area->window, xor_gc,
-		 0, y, gport->width, y);
-}
-
-static void
-draw_slanted_cross (GdkGC *xor_gc, gint x, gint y)
-{
-  gint x0, y0, x1, y1;
-
-  x0 = x + (gport->height - y);
-  x0 = MAX(0, MIN (x0, gport->width));
-  x1 = x - y;
-  x1 = MAX(0, MIN (x1, gport->width));
-  y0 = y + (gport->width - x);
-  y0 = MAX(0, MIN (y0, gport->height));
-  y1 = y - x;
-  y1 = MAX(0, MIN (y1, gport->height));
-  gdk_draw_line (gport->drawing_area->window, xor_gc,
-		 x0, y0, x1, y1);
-  x0 = x - (gport->height - y);
-  x0 = MAX(0, MIN (x0, gport->width));
-  x1 = x + y;
-  x1 = MAX(0, MIN (x1, gport->width));
-  y0 = y + x;
-  y0 = MAX(0, MIN (y0, gport->height));
-  y1 = y - (gport->width - x);
-  y1 = MAX(0, MIN (y1, gport->height));
-  gdk_draw_line (gport->drawing_area->window, xor_gc,
-		 x0, y0, x1, y1);
-}
-
-static void
-draw_dozen_cross (GdkGC *xor_gc, gint x, gint y)
-{
-  gint x0, y0, x1, y1;
-  gdouble tan60 = sqrt (3);
-
-  x0 = x + (gport->height - y) / tan60;
-  x0 = MAX(0, MIN (x0, gport->width));
-  x1 = x - y / tan60;
-  x1 = MAX(0, MIN (x1, gport->width));
-  y0 = y + (gport->width - x) * tan60;
-  y0 = MAX(0, MIN (y0, gport->height));
-  y1 = y - x * tan60;
-  y1 = MAX(0, MIN (y1, gport->height));
-  gdk_draw_line (gport->drawing_area->window, xor_gc,
-		 x0, y0, x1, y1);
-
-  x0 = x + (gport->height - y) * tan60;
-  x0 = MAX(0, MIN (x0, gport->width));
-  x1 = x - y * tan60;
-  x1 = MAX(0, MIN (x1, gport->width));
-  y0 = y + (gport->width - x) / tan60;
-  y0 = MAX(0, MIN (y0, gport->height));
-  y1 = y - x / tan60;
-  y1 = MAX(0, MIN (y1, gport->height));
-  gdk_draw_line (gport->drawing_area->window, xor_gc,
-		 x0, y0, x1, y1);
-
-  x0 = x - (gport->height - y) / tan60;
-  x0 = MAX(0, MIN (x0, gport->width));
-  x1 = x + y / tan60;
-  x1 = MAX(0, MIN (x1, gport->width));
-  y0 = y + x * tan60;
-  y0 = MAX(0, MIN (y0, gport->height));
-  y1 = y - (gport->width - x) * tan60;
-  y1 = MAX(0, MIN (y1, gport->height));
-  gdk_draw_line (gport->drawing_area->window, xor_gc,
-		 x0, y0, x1, y1);
-
-  x0 = x - (gport->height - y) * tan60;
-  x0 = MAX(0, MIN (x0, gport->width));
-  x1 = x + y * tan60;
-  x1 = MAX(0, MIN (x1, gport->width));
-  y0 = y + x / tan60;
-  y0 = MAX(0, MIN (y0, gport->height));
-  y1 = y - (gport->width - x) / tan60;
-  y1 = MAX(0, MIN (y1, gport->height));
-  gdk_draw_line (gport->drawing_area->window, xor_gc,
-		 x0, y0, x1, y1);
-}
-
-static void
-draw_crosshair (GdkGC *xor_gc, gint x, gint y)
-{
-  static enum crosshair_shape prev = Basic_Crosshair_Shape;
-
-  draw_right_cross (xor_gc, x, y);
-  if (prev == Union_Jack_Crosshair_Shape)
-    draw_slanted_cross (xor_gc, x, y);
-  if (prev == Dozen_Crosshair_Shape)
-    draw_dozen_cross (xor_gc, x, y);
-  prev = Crosshair.shape;
-}
-
-void
-ghid_show_crosshair (gboolean show)
-{
-  gint x, y;
-  static gint x_prev = -1, y_prev = -1;
-  static GdkGC *xor_gc;
-  static GdkColor cross_color;
-
-  if (gport->x_crosshair < 0 || ghidgui->creating || !gport->has_entered)
-    return;
-
-  if (!xor_gc)
-    {
-      xor_gc = gdk_gc_new (ghid_port.drawing_area->window);
-      gdk_gc_copy (xor_gc, ghid_port.drawing_area->style->white_gc);
-      gdk_gc_set_function (xor_gc, GDK_XOR);
-      /* FIXME: when CrossColor changed from config */
-      ghid_map_color_string (Settings.CrossColor, &cross_color);
-    }
-  x = DRAW_X (gport->x_crosshair);
-  y = DRAW_Y (gport->y_crosshair);
-
-  gdk_gc_set_foreground (xor_gc, &cross_color);
-
-  if (x_prev >= 0)
-    {
-      draw_crosshair (xor_gc, x_prev, y_prev);
-      if (ghidgui->auto_pan_on && have_crosshair_attachments ())
-	{
-	  gdk_draw_rectangle (gport->drawing_area->window, xor_gc, TRUE,
-			      0, y_prev - VCD, VCD, VCW);
-	  gdk_draw_rectangle (gport->drawing_area->window, xor_gc, TRUE,
-			      gport->width - VCD, y_prev - VCD, VCD, VCW);
-	  gdk_draw_rectangle (gport->drawing_area->window, xor_gc, TRUE,
-			      x_prev - VCD, 0, VCW, VCD);
-	  gdk_draw_rectangle (gport->drawing_area->window, xor_gc, TRUE,
-			      x_prev - VCD, gport->height - VCD, VCW, VCD);
-	}
-    }
-
-  if (x >= 0 && show)
-    {
-      draw_crosshair (xor_gc, x, y);
-      if (ghidgui->auto_pan_on && have_crosshair_attachments ())
-	{
-	  gdk_draw_rectangle (gport->drawing_area->window, xor_gc, TRUE,
-			      0, y - VCD, VCD, VCW);
-	  gdk_draw_rectangle (gport->drawing_area->window, xor_gc, TRUE,
-			      gport->width - VCD, y - VCD, VCD, VCW);
-	  gdk_draw_rectangle (gport->drawing_area->window, xor_gc, TRUE,
-			      x - VCD, 0, VCW, VCD);
-	  gdk_draw_rectangle (gport->drawing_area->window, xor_gc, TRUE,
-			      x - VCD, gport->height - VCD, VCW, VCD);
-	}
-      x_prev = x;
-      y_prev = y;
-    }
-  else
-    x_prev = y_prev = -1;
-}
-
 static gboolean
 ghid_idle_cb (gpointer data)
 {
diff --git a/src/hid/gtk/gui.h b/src/hid/gtk/gui.h
index 58136b6..53beb7f 100644
--- a/src/hid/gtk/gui.h
+++ b/src/hid/gtk/gui.h
@@ -284,7 +284,6 @@ void ghid_port_ranges_zoom (gdouble zoom);
 gboolean ghid_port_ranges_pan (gdouble x, gdouble y, gboolean relative);
 void ghid_port_ranges_scale (gboolean emit_changed);
 void ghid_port_ranges_update_ranges (void);
-void ghid_show_crosshair (gboolean show);
 void ghid_screen_update (void);
 
 gboolean ghid_note_event_location (GdkEventButton * ev);
@@ -509,6 +508,7 @@ void ghid_fill_polygon (hidGC gc, int n_coords, int *x, int *y);
 void ghid_fill_rect (hidGC gc, int x1, int y1, int x2, int y2);
 void ghid_invalidate_lr ();
 void ghid_invalidate_all ();
+void ghid_show_crosshair (gboolean show);
 
 /* gtkhid-main.c */
 void ghid_get_coords (const char *msg, int *x, int *y);
