Bottom: 951ee3d0b4bcf0381a7fbcf46d6ba8f133404e1a
Top:    1b902efa3a58d7d0d83ed241c390dad28dcd55a1
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-04-26 15:27:41 +0100

Refresh of crasy-test

---

diff --git a/src/draw.c b/src/draw.c
index 9b258b3..2c199f6 100644
--- a/src/draw.c
+++ b/src/draw.c
@@ -139,28 +139,97 @@ Redraw (void)
   gui->invalidate_all ();
 }
 
+static void
+set_pv_color (PinType *pv, int type)
+{
+  if (TEST_FLAG (WARNFLAG, pv))          gui->set_color (Output.fgGC, PCB->WarnColor);
+  else if (TEST_FLAG (SELECTEDFLAG, pv)) gui->set_color (Output.fgGC, (type == VIA_TYPE) ? PCB->ViaSelectedColor
+                                                                                         : PCB->PinSelectedColor);
+  else if (TEST_FLAG (FOUNDFLAG, pv))    gui->set_color (Output.fgGC, PCB->ConnectedColor);
+  else                                   gui->set_color (Output.fgGC, (type == VIA_TYPE) ? PCB->ViaColor
+                                                                                         : PCB->PinColor);
+}
+
+static void
+set_pv_inlayer_color (PinType *pv, LayerType *layer, int type)
+{
+  if (TEST_FLAG (WARNFLAG, pv))          gui->set_color (Output.fgGC, PCB->WarnColor);
+  else if (TEST_FLAG (SELECTEDFLAG, pv)) gui->set_color (Output.fgGC, (type == VIA_TYPE) ? PCB->ViaSelectedColor
+                                                                                         : PCB->PinSelectedColor);
+  else if (TEST_FLAG (FOUNDFLAG, pv))    gui->set_color (Output.fgGC, PCB->ConnectedColor);
+  else                                   gui->set_color (Output.fgGC, layer->Color);
+}
+
 static int
 pin_callback (const BoxType * b, void *cl)
 {
+  set_pv_color ((PinType *)b, PIN_TYPE);
   dapi->draw_pin ((PinType *)b, cl);
   return 1;
 }
 
 static int
+pin_inlayer_callback (const BoxType * b, void *cl)
+{
+  set_pv_inlayer_color ((PinType *)b, cl, PIN_TYPE);
+  dapi->draw_pin ((PinType *)b, NULL);
+  return 1;
+}
+
+static int
 via_callback (const BoxType * b, void *cl)
 {
+  set_pv_color ((PinType *)b, VIA_TYPE);
   dapi->draw_via ((PinType *)b, cl);
   return 1;
 }
 
 static int
+via_inlayer_callback (const BoxType * b, void *cl)
+{
+  set_pv_inlayer_color ((PinType *)b, cl, VIA_TYPE);
+  dapi->draw_via ((PinType *)b, NULL);
+  return 1;
+}
+
+static int
 pad_callback (const BoxType * b, void *cl)
 {
   PadTypePtr pad = (PadTypePtr) b;
   int *side = cl;
 
   if (ON_SIDE (pad, *side))
-    dapi->draw_pad (pad, NULL);
+    {
+      if (TEST_FLAG (WARNFLAG, pad))          gui->set_color (Output.fgGC, PCB->WarnColor);
+      else if (TEST_FLAG (SELECTEDFLAG, pad)) gui->set_color (Output.fgGC, PCB->PinSelectedColor);
+      else if (TEST_FLAG (FOUNDFLAG, pad))    gui->set_color (Output.fgGC, PCB->ConnectedColor);
+      else if (FRONT (pad))                   gui->set_color (Output.fgGC, PCB->PinColor);
+      else                                    gui->set_color (Output.fgGC, PCB->InvisibleObjectsColor);
+
+      dapi->draw_pad (pad, NULL);
+    }
+  return 1;
+}
+
+static int
+pad_inlayer_callback (const BoxType * b, void *cl)
+{
+  PadTypePtr pad = (PadTypePtr) b;
+  LayerType *layer = cl;
+  int solder_group = GetLayerGroupNumberByNumber (solder_silk_layer);
+  int group = GetLayerGroupNumberByPointer (layer);
+
+  int side = (group == solder_group) ? SOLDER_LAYER : COMPONENT_LAYER;
+
+  if (ON_SIDE (pad, side))
+    {
+      if (TEST_FLAG (WARNFLAG, pad))          gui->set_color (Output.fgGC, PCB->WarnColor);
+      else if (TEST_FLAG (SELECTEDFLAG, pad)) gui->set_color (Output.fgGC, PCB->PinSelectedColor);
+      else if (TEST_FLAG (FOUNDFLAG, pad))    gui->set_color (Output.fgGC, PCB->ConnectedColor);
+      else                                    gui->set_color (Output.fgGC, layer->Color);
+
+      dapi->draw_pad (pad, NULL);
+    }
   return 1;
 }
 
@@ -202,13 +271,27 @@ draw_element_pins_and_pads (ElementType *element)
   PAD_LOOP (element);
   {
     if (doing_pinout || doing_assy || FRONT (pad) || PCB->InvisibleObjectsOn)
-      dapi->draw_pad (pad, NULL);
+      {
+        if (TEST_FLAG (WARNFLAG, pad))          gui->set_color (Output.fgGC, PCB->WarnColor);
+        else if (TEST_FLAG (SELECTEDFLAG, pad)) gui->set_color (Output.fgGC, PCB->PinSelectedColor);
+        else if (TEST_FLAG (FOUNDFLAG, pad))    gui->set_color (Output.fgGC, PCB->ConnectedColor);
+        else if (FRONT (pad))                   gui->set_color (Output.fgGC, PCB->PinColor);
+        else                                    gui->set_color (Output.fgGC, PCB->InvisibleObjectsColor);
+
+        dapi->draw_pad (pad, NULL);
+      }
   }
   END_LOOP;
   PIN_LOOP (element);
   {
+    set_pv_color (pin, PIN_TYPE);
     dapi->draw_pin (pin, NULL);
-    //draw_hole (pin);
+
+    if (TEST_FLAG (WARNFLAG, pin))          gui->set_color (Output.fgGC, PCB->WarnColor);
+    else if (TEST_FLAG (SELECTEDFLAG, pin)) gui->set_color (Output.fgGC, PCB->PinSelectedColor);
+    else                                    gui->set_color (Output.fgGC, Settings.BlackColor);
+
+    dapi->draw_hole (pin, NULL);
   }
   END_LOOP;
 }
@@ -232,35 +315,11 @@ hole_callback (const BoxType * b, void *cl)
       (plated == 1 &&  TEST_FLAG (HOLEFLAG, pv)))
     return 1;
 
-  if (TEST_FLAG (THINDRAWFLAG, PCB))
-    {
-      if (!TEST_FLAG (HOLEFLAG, pv))
-        {
-          gui->set_line_cap (Output.fgGC, Round_Cap);
-          gui->set_line_width (Output.fgGC, 0);
-          gui->draw_arc (Output.fgGC,
-                         pv->X, pv->Y, pv->DrillingHole / 2,
-                         pv->DrillingHole / 2, 0, 360);
-        }
-    }
-  else
-    gui->fill_circle (Output.bgGC, pv->X, pv->Y, pv->DrillingHole / 2);
+  if (TEST_FLAG (WARNFLAG, pv))          gui->set_color (Output.fgGC, PCB->WarnColor);
+  else if (TEST_FLAG (SELECTEDFLAG, pv)) gui->set_color (Output.fgGC, PCB->PinSelectedColor);
+  else                                   gui->set_color (Output.fgGC, Settings.BlackColor);
 
-  if (TEST_FLAG (HOLEFLAG, pv))
-    {
-      if (TEST_FLAG (WARNFLAG, pv))
-        gui->set_color (Output.fgGC, PCB->WarnColor);
-      else if (TEST_FLAG (SELECTEDFLAG, pv))
-        gui->set_color (Output.fgGC, PCB->ViaSelectedColor);
-      else
-        gui->set_color (Output.fgGC, Settings.BlackColor);
-
-      gui->set_line_cap (Output.fgGC, Round_Cap);
-      gui->set_line_width (Output.fgGC, 0);
-      gui->draw_arc (Output.fgGC,
-                     pv->X, pv->Y, pv->DrillingHole / 2,
-                     pv->DrillingHole / 2, 0, 360);
-    }
+  dapi->draw_hole (pv, NULL);
   return 1;
 }
 
@@ -309,8 +368,14 @@ CountHoles (int *plated, int *unplated, BoxType *drawn_area)
 static int
 line_callback (const BoxType * b, void *cl)
 {
-  //LayerType *layer = cl;
-  dapi->draw_line ((LineType *) b, cl);
+  LayerType *layer = cl;
+  LineType *line = (LineType *)b;
+
+  if (TEST_FLAG (SELECTEDFLAG, line))   gui->set_color (Output.fgGC, layer->SelectedColor);
+  else if (TEST_FLAG (FOUNDFLAG, line)) gui->set_color (Output.fgGC, PCB->ConnectedColor);
+  else                                  gui->set_color (Output.fgGC, layer->Color);
+
+  dapi->draw_line (line, cl);
   return 1;
 }
 
@@ -319,6 +384,10 @@ rat_callback (const BoxType * b, void *cl)
 {
   RatType *rat = (RatType *)b;
 
+  if (TEST_FLAG (SELECTEDFLAG, rat))   gui->set_color (Output.fgGC, PCB->RatSelectedColor);
+  else if (TEST_FLAG (FOUNDFLAG, rat)) gui->set_color (Output.fgGC, PCB->ConnectedColor);
+  else                                 gui->set_color (Output.fgGC, PCB->RatColor);
+
   dapi->draw_rat (rat, cl);
   return 1;
 }
@@ -326,8 +395,14 @@ rat_callback (const BoxType * b, void *cl)
 static int
 arc_callback (const BoxType * b, void *cl)
 {
-  //LayerType *layer = cl;
-  dapi->draw_arc ((ArcType *) b, cl);
+  LayerType *layer = cl;
+  ArcType *arc = (ArcType *)b;
+
+  if (TEST_FLAG (SELECTEDFLAG, arc))   gui->set_color (Output.fgGC, layer->SelectedColor);
+  else if (TEST_FLAG (FOUNDFLAG, arc)) gui->set_color (Output.fgGC, PCB->ConnectedColor);
+  else                                 gui->set_color (Output.fgGC, layer->Color);
+
+  dapi->draw_arc (arc, cl);
   return 1;
 }
 
@@ -599,9 +674,13 @@ via_mask_callback (const BoxType * b, void *cl)
 static int
 poly_callback (const BoxType * b, void *cl)
 {
-  //LayerType *layer = cl;
+  LayerType *layer = cl;
   PolygonType *polygon = (PolygonType *)b;
 
+  if (TEST_FLAG (SELECTEDFLAG, polygon))   gui->set_color (Output.fgGC, layer->SelectedColor);
+  else if (TEST_FLAG (FOUNDFLAG, polygon)) gui->set_color (Output.fgGC, PCB->ConnectedColor);
+  else                                     gui->set_color (Output.fgGC, layer->Color);
+
   dapi->draw_poly (polygon, cl);
   return 1;
 }
@@ -763,6 +842,10 @@ text_callback (const BoxType * b, void *cl)
 void
 DrawLayerCommon (LayerTypePtr Layer, const BoxType * screen, bool clear_pins)
 {
+  int component_group = GetLayerGroupNumberByNumber (component_silk_layer);
+  int solder_group = GetLayerGroupNumberByNumber (solder_silk_layer);
+  int group = GetLayerGroupNumberByPointer (Layer);
+
   /* print the non-clearing polys */
   clip_box = screen;
   r_search (Layer->polygon_tree, screen, NULL, poly_callback, Layer);
@@ -782,6 +865,56 @@ DrawLayerCommon (LayerTypePtr Layer, const BoxType * screen, bool clear_pins)
   /* We should check for gui->gui here, but it's kinda cool seeing the
      auto-outline magically disappear when you first add something to
      the "outline" layer.  */
+
+  if (strcmp (Layer->Name, "outline") == 0 ||
+      strcmp (Layer->Name, "route") == 0)
+    {
+      if (IsLayerEmpty (Layer))
+        {
+          gui->set_color (Output.fgGC, Layer->Color);
+          gui->set_line_width (Output.fgGC, PCB->minWid);
+          gui->draw_rect (Output.fgGC, 0, 0, PCB->MaxWidth, PCB->MaxHeight);
+        }
+      return;
+    }
+
+  /* draw element pins */
+  r_search (PCB->Data->pin_tree, screen, NULL, pin_inlayer_callback, Layer);
+
+  /* draw element pads */
+  if (group == component_group)
+    r_search (PCB->Data->pad_tree, screen, NULL, pad_inlayer_callback, Layer);
+
+  if (group == solder_group)
+    r_search (PCB->Data->pad_tree, screen, NULL, pad_inlayer_callback, Layer);
+
+  /* draw vias */
+  r_search (PCB->Data->via_tree, screen, NULL, via_inlayer_callback, Layer);
+  r_search (PCB->Data->pin_tree, screen, NULL, hole_callback, NULL);
+  r_search (PCB->Data->via_tree, screen, NULL, hole_callback, NULL);
+
+  clip_box = NULL;
+}
+
+void
+DrawLayer (LayerTypePtr Layer, const BoxType * screen)
+{
+  /* print the non-clearing polys */
+  clip_box = screen;
+  r_search (Layer->polygon_tree, screen, NULL, poly_callback, Layer);
+
+  /* draw all visible lines this layer */
+  r_search (Layer->line_tree, screen, NULL, line_callback, Layer);
+
+  /* draw the layer arcs on screen */
+  r_search (Layer->arc_tree, screen, NULL, arc_callback, Layer);
+
+  /* draw the layer text on screen */
+  r_search (Layer->text_tree, screen, NULL, text_callback, Layer);
+
+  /* We should check for gui->gui here, but it's kinda cool seeing the
+     auto-outline magically disappear when you first add something to
+     the "outline" layer.  */
   if (IsLayerEmpty (Layer)
       && (strcmp (Layer->Name, "outline") == 0
 	  || strcmp (Layer->Name, "route") == 0))
@@ -792,14 +925,6 @@ DrawLayerCommon (LayerTypePtr Layer, const BoxType * screen, bool clear_pins)
 		      0, 0,
 		      PCB->MaxWidth, PCB->MaxHeight);
     }
-
-  clip_box = NULL;
-}
-
-void
-DrawLayer (LayerTypePtr Layer, const BoxType * screen)
-{
-  DrawLayerCommon (Layer, screen, false);
 }
 
 /* ---------------------------------------------------------------------------
diff --git a/src/draw_funcs.c b/src/draw_funcs.c
index e4ee955..d6e285e 100644
--- a/src/draw_funcs.c
+++ b/src/draw_funcs.c
@@ -4,19 +4,6 @@
 #include "draw_funcs.h"
 
 static void
-set_pv_color (PinType *pv, int type)
-{
-  char *color;
-
-  if (TEST_FLAG (WARNFLAG, pv))          color = PCB->WarnColor;
-  else if (TEST_FLAG (SELECTEDFLAG, pv)) color = (type == VIA_TYPE) ? PCB->ViaSelectedColor : PCB->PinSelectedColor;
-  else if (TEST_FLAG (FOUNDFLAG, pv))    color = PCB->ConnectedColor;
-  else                                   color = (type == VIA_TYPE) ? PCB->ViaColor : PCB->PinColor;
-
-  gui->set_color (Output.fgGC, color);
-}
-
-static void
 _draw_pv (PinType *pv, bool draw_hole)
 {
   if (TEST_FLAG (THINDRAWFLAG, PCB))
@@ -28,7 +15,6 @@ _draw_pv (PinType *pv, bool draw_hole)
 static void
 draw_pin (PinType *pin, void *userdata)
 {
-  set_pv_color (pin, PIN_TYPE);
   _draw_pv (pin, false);
 }
 
@@ -44,7 +30,6 @@ draw_pin_mask (PinType *pin, void *userdata)
 static void
 draw_via (PinType *via, void *userdata)
 {
-  set_pv_color (via, VIA_TYPE);
   _draw_pv (via, false);
 }
 
@@ -58,6 +43,20 @@ draw_via_mask (PinType *via, void *userdata)
 }
 
 static void
+draw_hole (PinType *pv, void *userdata)
+{
+  gui->set_line_cap (Output.fgGC, Round_Cap);
+  gui->set_line_width (Output.fgGC, 0);
+
+  if (!TEST_FLAG (THINDRAWFLAG, PCB))
+    gui->fill_circle (Output.bgGC, pv->X, pv->Y, pv->DrillingHole / 2);
+
+  if (TEST_FLAG (THINDRAWFLAG, PCB) || TEST_FLAG (HOLEFLAG, pv))
+    gui->draw_arc (Output.fgGC, pv->X, pv->Y,
+                   pv->DrillingHole / 2, pv->DrillingHole / 2, 0, 360);
+}
+
+static void
 _draw_pad (hidGC gc, PadType *pad, bool clear, bool mask)
 {
   if (clear && !mask && pad->Clearance <= 0)
@@ -73,12 +72,6 @@ _draw_pad (hidGC gc, PadType *pad, bool clear, bool mask)
 static void
 draw_pad (PadType *pad, void *userdata)
 {
-  if (TEST_FLAG (WARNFLAG, pad))          gui->set_color (Output.fgGC, PCB->WarnColor);
-  else if (TEST_FLAG (SELECTEDFLAG, pad)) gui->set_color (Output.fgGC, PCB->PinSelectedColor);
-  else if (TEST_FLAG (FOUNDFLAG, pad))    gui->set_color (Output.fgGC, PCB->ConnectedColor);
-  else if (FRONT (pad))                   gui->set_color (Output.fgGC, PCB->PinColor);
-  else                                    gui->set_color (Output.fgGC, PCB->InvisibleObjectsColor);
-
   _draw_pad (Output.fgGC, pad, false, false);
 }
 
@@ -120,20 +113,12 @@ _draw_line (LineType *line)
 static void
 draw_line (LineType *line, void *userdata)
 {
-  //if (TEST_FLAG (SELECTEDFLAG, line))   gui->set_color (Output.fgGC, layer->SelectedColor);
-  //else if (TEST_FLAG (FOUNDFLAG, line)) gui->set_color (Output.fgGC, PCB->ConnectedColor);
-  //else                                  gui->set_color (Output.fgGC, layer->Color);
-
   _draw_line (line);
 }
 
 static void
 draw_rat (RatType *rat, void *userdata)
 {
-  //if (TEST_FLAG (SELECTEDFLAG, rat))   gui->set_color (Output.fgGC, PCB->RatSelectedColor);
-  //else if (TEST_FLAG (FOUNDFLAG, rat)) gui->set_color (Output.fgGC, PCB->ConnectedColor);
-  //else                                 gui->set_color (Output.fgGC, PCB->RatColor);
-
   if (Settings.RatThickness < 20)
     rat->Thickness = pixel_slop * Settings.RatThickness;
   /* rats.c set VIAFLAG if this rat goes to a containing poly: draw a donut */
@@ -153,7 +138,7 @@ draw_rat (RatType *rat, void *userdata)
 }
 
 static void
-_draw_arc (ArcType *arc)
+draw_arc (ArcType *arc, void *userdata)
 {
   if (!arc->Thickness)
     return;
@@ -169,32 +154,14 @@ _draw_arc (ArcType *arc)
 }
 
 static void
-draw_arc (ArcType *arc, void *userdata)
-{
-  //if (TEST_FLAG (SELECTEDFLAG, arc))   gui->set_color (Output.fgGC, layer->SelectedColor);
-  //else if (TEST_FLAG (FOUNDFLAG, arc)) gui->set_color (Output.fgGC, PCB->ConnectedColor);
-  //else                                 gui->set_color (Output.fgGC, layer->Color);
-
-  _draw_arc (arc);
-}
-
-static void
 draw_poly (PolygonType *polygon, void *userdata)
 {
-  static char *color;
-
   /* HACK */
   BoxType *drawn_area = NULL;
 
   if (!polygon->Clipped)
     return;
 
-  //if (TEST_FLAG (SELECTEDFLAG, polygon))   color = layer->SelectedColor;
-  //else if (TEST_FLAG (FOUNDFLAG, polygon)) color = PCB->ConnectedColor;
-  //else                                     color = layer->Color;
-
-  gui->set_color (Output.fgGC, color);
-
   if (gui->thindraw_pcb_polygon != NULL &&
       (TEST_FLAG (THINDRAWFLAG, PCB) ||
        TEST_FLAG (THINDRAWPOLYFLAG, PCB)))
@@ -221,6 +188,7 @@ struct draw_funcs d_f = {
   .draw_pin_mask  = draw_pin_mask,
   .draw_via       = draw_via,
   .draw_via_mask  = draw_via_mask,
+  .draw_hole      = draw_hole,
   .draw_pad       = draw_pad,
   .draw_pad_mask  = draw_pad_mask,
   .draw_pad_paste = draw_pad_paste,
diff --git a/src/draw_funcs.h b/src/draw_funcs.h
index e29b05c..d677045 100644
--- a/src/draw_funcs.h
+++ b/src/draw_funcs.h
@@ -3,6 +3,7 @@ struct draw_funcs {
   void (*draw_pin_mask)  (PinType *,     void *);
   void (*draw_via)       (PinType *,     void *);
   void (*draw_via_mask)  (PinType *,     void *);
+  void (*draw_hole)      (PinType *,     void *);
   void (*draw_pad)       (PadType *,     void *);
   void (*draw_pad_mask)  (PadType *,     void *);
   void (*draw_pad_paste) (PadType *,     void *);
