Bottom: c847ee5ca690f767af3134310fd52b97fa7e8f52
Top:    8aea2e4954ed15925e74f7aac08f8297102ddb5e
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-04-26 19:06:48 +0100

Refresh of crasy-test

---

diff --git a/src/draw.c b/src/draw.c
index 2704362..cc04a43 100644
--- a/src/draw.c
+++ b/src/draw.c
@@ -163,7 +163,7 @@ static int
 pin_callback (const BoxType * b, void *cl)
 {
   set_pv_color ((PinType *)b, PIN_TYPE);
-  dapi->draw_pin ((PinType *)b, cl);
+  dapi->draw_pin ((PinType *)b, NULL, NULL);
   return 1;
 }
 
@@ -171,7 +171,7 @@ static int
 pin_inlayer_callback (const BoxType * b, void *cl)
 {
   set_pv_inlayer_color ((PinType *)b, cl, PIN_TYPE);
-  dapi->draw_pin ((PinType *)b, NULL);
+  dapi->draw_pin ((PinType *)b, NULL, NULL);
   return 1;
 }
 
@@ -179,7 +179,7 @@ static int
 via_callback (const BoxType * b, void *cl)
 {
   set_pv_color ((PinType *)b, VIA_TYPE);
-  dapi->draw_via ((PinType *)b, cl);
+  dapi->draw_via ((PinType *)b, NULL, NULL);
   return 1;
 }
 
@@ -187,7 +187,7 @@ static int
 via_inlayer_callback (const BoxType * b, void *cl)
 {
   set_pv_inlayer_color ((PinType *)b, cl, VIA_TYPE);
-  dapi->draw_via ((PinType *)b, NULL);
+  dapi->draw_via ((PinType *)b, NULL, NULL);
   return 1;
 }
 
@@ -205,7 +205,7 @@ pad_callback (const BoxType * b, void *cl)
       else if (FRONT (pad))                   gui->set_color (Output.fgGC, PCB->PinColor);
       else                                    gui->set_color (Output.fgGC, PCB->InvisibleObjectsColor);
 
-      dapi->draw_pad (pad, NULL);
+      dapi->draw_pad (pad, NULL, NULL);
     }
   return 1;
 }
@@ -227,7 +227,7 @@ pad_inlayer_callback (const BoxType * b, void *cl)
       else if (TEST_FLAG (FOUNDFLAG, pad))    gui->set_color (Output.fgGC, PCB->ConnectedColor);
       else                                    gui->set_color (Output.fgGC, layer->Color);
 
-      dapi->draw_pad (pad, NULL);
+      dapi->draw_pad (pad, NULL, NULL);
     }
   return 1;
 }
@@ -277,20 +277,20 @@ draw_element_pins_and_pads (ElementType *element)
         else if (FRONT (pad))                   gui->set_color (Output.fgGC, PCB->PinColor);
         else                                    gui->set_color (Output.fgGC, PCB->InvisibleObjectsColor);
 
-        dapi->draw_pad (pad, NULL);
+        dapi->draw_pad (pad, NULL, NULL);
       }
   }
   END_LOOP;
   PIN_LOOP (element);
   {
     set_pv_color (pin, PIN_TYPE);
-    dapi->draw_pin (pin, NULL);
+    dapi->draw_pin (pin, NULL, NULL);
 
     if (TEST_FLAG (WARNFLAG, pin))          gui->set_color (Output.fgGC, PCB->WarnColor);
     else if (TEST_FLAG (SELECTEDFLAG, pin)) gui->set_color (Output.fgGC, PCB->PinSelectedColor);
     else                                    gui->set_color (Output.fgGC, Settings.BlackColor);
 
-    dapi->draw_hole (pin, NULL);
+    dapi->draw_hole (pin, NULL, NULL);
   }
   END_LOOP;
 }
@@ -318,7 +318,7 @@ hole_callback (const BoxType * b, void *cl)
   else if (TEST_FLAG (SELECTEDFLAG, pv)) gui->set_color (Output.fgGC, PCB->PinSelectedColor);
   else                                   gui->set_color (Output.fgGC, Settings.BlackColor);
 
-  dapi->draw_hole (pv, NULL);
+  dapi->draw_hole (pv, NULL, NULL);
   return 1;
 }
 
@@ -374,7 +374,7 @@ line_callback (const BoxType * b, void *cl)
   else if (TEST_FLAG (FOUNDFLAG, line)) gui->set_color (Output.fgGC, PCB->ConnectedColor);
   else                                  gui->set_color (Output.fgGC, layer->Color);
 
-  dapi->draw_line (line, cl);
+  dapi->draw_line (line, NULL, NULL);
   return 1;
 }
 
@@ -387,7 +387,7 @@ rat_callback (const BoxType * b, void *cl)
   else if (TEST_FLAG (FOUNDFLAG, rat)) gui->set_color (Output.fgGC, PCB->ConnectedColor);
   else                                 gui->set_color (Output.fgGC, PCB->RatColor);
 
-  dapi->draw_rat (rat, cl);
+  dapi->draw_rat (rat, NULL, NULL);
   return 1;
 }
 
@@ -401,7 +401,7 @@ arc_callback (const BoxType * b, void *cl)
   else if (TEST_FLAG (FOUNDFLAG, arc)) gui->set_color (Output.fgGC, PCB->ConnectedColor);
   else                                 gui->set_color (Output.fgGC, layer->Color);
 
-  dapi->draw_arc (arc, cl);
+  dapi->draw_arc (arc, NULL, NULL);
   return 1;
 }
 
@@ -422,13 +422,13 @@ draw_element_package (ElementType *element)
   ELEMENTLINE_LOOP (element);
   {
     //_draw_line (line);
-    dapi->draw_line (line, NULL);
+    dapi->draw_line (line, NULL, NULL);
   }
   END_LOOP;
   ARC_LOOP (element);
   {
     //_draw_arc (arc);
-    dapi->draw_arc (arc, NULL);
+    dapi->draw_arc (arc, NULL, NULL);
   }
   END_LOOP;
 }
@@ -659,14 +659,14 @@ DrawPPV (int group, const BoxType *drawn_area)
 static int
 pin_mask_callback (const BoxType * b, void *cl)
 {
-  dapi->draw_pin_mask ((PinType *) b, cl);
+  dapi->draw_pin_mask ((PinType *) b, NULL, NULL);
   return 1;
 }
 
 static int
 via_mask_callback (const BoxType * b, void *cl)
 {
-  dapi->draw_via_mask ((PinType *) b, cl);
+  dapi->draw_via_mask ((PinType *) b, NULL, NULL);
   return 1;
 }
 
@@ -685,7 +685,7 @@ poly_callback (const BoxType * b, void *cl)
   else if (TEST_FLAG (FOUNDFLAG, polygon)) gui->set_color (Output.fgGC, PCB->ConnectedColor);
   else                                     gui->set_color (Output.fgGC, i->layer->Color);
 
-  dapi->draw_poly (polygon, cl);
+  dapi->draw_poly (polygon, i->drawn_area, NULL);
   return 1;
 }
 
@@ -695,7 +695,7 @@ pad_mask_callback (const BoxType * b, void *cl)
   PadTypePtr pad = (PadTypePtr) b;
   int *side = cl;
   if (ON_SIDE (pad, *side))
-    dapi->draw_pad_mask (pad, NULL);
+    dapi->draw_pad_mask (pad, NULL, NULL);
   return 1;
 }
 
@@ -798,7 +798,7 @@ DrawPaste (int side, BoxType *drawn_area)
   ALLPAD_LOOP (PCB->Data);
   {
     if (ON_SIDE (pad, side))
-      dapi->draw_pad_paste (pad, NULL);
+      dapi->draw_pad_paste (pad, NULL, NULL);
   }
   ENDALL_LOOP;
 }
diff --git a/src/draw_funcs.c b/src/draw_funcs.c
index 0bdd30f..aa25867 100644
--- a/src/draw_funcs.c
+++ b/src/draw_funcs.c
@@ -13,13 +13,13 @@ _draw_pv (PinType *pv, bool draw_hole)
 }
 
 static void
-draw_pin (PinType *pin, void *userdata)
+draw_pin (PinType *pin, BoxType *drawn_area, void *userdata)
 {
   _draw_pv (pin, false);
 }
 
 static void
-draw_pin_mask (PinType *pin, void *userdata)
+draw_pin_mask (PinType *pin, BoxType *drawn_area, void *userdata)
 {
   if (TEST_FLAG (THINDRAWFLAG, PCB) || TEST_FLAG (THINDRAWPOLYFLAG, PCB))
     gui->thindraw_pcb_pv (Output.pmGC, Output.pmGC, pin, false, true);
@@ -28,13 +28,13 @@ draw_pin_mask (PinType *pin, void *userdata)
 }
 
 static void
-draw_via (PinType *via, void *userdata)
+draw_via (PinType *via, BoxType *drawn_area, void *userdata)
 {
   _draw_pv (via, false);
 }
 
 static void
-draw_via_mask (PinType *via, void *userdata)
+draw_via_mask (PinType *via, BoxType *drawn_area, void *userdata)
 {
   if (TEST_FLAG (THINDRAWFLAG, PCB) || TEST_FLAG (THINDRAWPOLYFLAG, PCB))
     gui->thindraw_pcb_pv (Output.pmGC, Output.pmGC, via, false, true);
@@ -43,7 +43,7 @@ draw_via_mask (PinType *via, void *userdata)
 }
 
 static void
-draw_hole (PinType *pv, void *userdata)
+draw_hole (PinType *pv, BoxType *drawn_area, void *userdata)
 {
   gui->set_line_cap (Output.fgGC, Round_Cap);
   gui->set_line_width (Output.fgGC, 0);
@@ -70,13 +70,13 @@ _draw_pad (hidGC gc, PadType *pad, bool clear, bool mask)
 }
 
 static void
-draw_pad (PadType *pad, void *userdata)
+draw_pad (PadType *pad, BoxType *drawn_area, void *userdata)
 {
   _draw_pad (Output.fgGC, pad, false, false);
 }
 
 static void
-draw_pad_mask (PadType *pad, void *userdata)
+draw_pad_mask (PadType *pad, BoxType *drawn_area, void *userdata)
 {
   if (pad->Mask <= 0)
     return;
@@ -85,7 +85,7 @@ draw_pad_mask (PadType *pad, void *userdata)
 }
 
 static void
-draw_pad_paste (PadType *pad, void *userdata)
+draw_pad_paste (PadType *pad, BoxType *drawn_area, void *userdata)
 {
   if (TEST_FLAG (NOPASTEFLAG, pad) || pad->Mask <= 0)
     return;
@@ -111,13 +111,13 @@ _draw_line (LineType *line)
 }
 
 static void
-draw_line (LineType *line, void *userdata)
+draw_line (LineType *line, BoxType *drawn_area, void *userdata)
 {
   _draw_line (line);
 }
 
 static void
-draw_rat (RatType *rat, void *userdata)
+draw_rat (RatType *rat, BoxType *drawn_area, void *userdata)
 {
   if (Settings.RatThickness < 20)
     rat->Thickness = pixel_slop * Settings.RatThickness;
@@ -138,7 +138,7 @@ draw_rat (RatType *rat, void *userdata)
 }
 
 static void
-draw_arc (ArcType *arc, void *userdata)
+draw_arc (ArcType *arc, BoxType *drawn_area, void *userdata)
 {
   if (!arc->Thickness)
     return;
@@ -154,11 +154,8 @@ draw_arc (ArcType *arc, void *userdata)
 }
 
 static void
-draw_poly (PolygonType *polygon, void *userdata)
+draw_poly (PolygonType *polygon, BoxType *drawn_area, void *userdata)
 {
-  /* HACK */
-  BoxType *drawn_area = NULL;
-
   if (!polygon->Clipped)
     return;
 
diff --git a/src/draw_funcs.h b/src/draw_funcs.h
index d677045..1f97d82 100644
--- a/src/draw_funcs.h
+++ b/src/draw_funcs.h
@@ -1,16 +1,16 @@
 struct draw_funcs {
-  void (*draw_pin)       (PinType *,     void *);
-  void (*draw_pin_mask)  (PinType *,     void *);
-  void (*draw_via)       (PinType *,     void *);
-  void (*draw_via_mask)  (PinType *,     void *);
-  void (*draw_hole)      (PinType *,     void *);
-  void (*draw_pad)       (PadType *,     void *);
-  void (*draw_pad_mask)  (PadType *,     void *);
-  void (*draw_pad_paste) (PadType *,     void *);
-  void (*draw_line)      (LineType *,    void *);
-  void (*draw_rat)       (RatType *,     void *);
-  void (*draw_arc)       (ArcType *,     void *);
-  void (*draw_poly)      (PolygonType *, void *);
+  void (*draw_pin)       (PinType *,     const BoxType *, void *);
+  void (*draw_pin_mask)  (PinType *,     const BoxType *, void *);
+  void (*draw_via)       (PinType *,     const BoxType *, void *);
+  void (*draw_via_mask)  (PinType *,     const BoxType *, void *);
+  void (*draw_hole)      (PinType *,     const BoxType *, void *);
+  void (*draw_pad)       (PadType *,     const BoxType *, void *);
+  void (*draw_pad_mask)  (PadType *,     const BoxType *, void *);
+  void (*draw_pad_paste) (PadType *,     const BoxType *, void *);
+  void (*draw_line)      (LineType *,    const BoxType *, void *);
+  void (*draw_rat)       (RatType *,     const BoxType *, void *);
+  void (*draw_arc)       (ArcType *,     const BoxType *, void *);
+  void (*draw_poly)      (PolygonType *, const BoxType *, void *);
 };
 
 extern struct draw_funcs *dapi;
