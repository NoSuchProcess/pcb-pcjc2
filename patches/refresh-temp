Bottom: cbfd4cec8561d882064f38b80603d269d76677ef
Top:    535e298f0bcabe6f107bdb1f82393b046ff0a672
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2010-08-24 17:59:10 +0100

Refresh of drop-in-pcb-gl-code-various-mess

---

diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index 3e41c35..df90d8c 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -528,3 +528,229 @@ ghid_fill_rect (hidGC gc, int x1, int y1, int x2, int y2)
 
   hidgl_fill_rect (x1, y1, x2, y2);
 }
+
+void
+ghid_invalidate_lr (int left, int right, int top, int bottom)
+{
+  ghid_invalidate_all ();
+}
+
+void
+ghid_invalidate_all ()
+{
+  if (ghidgui->need_restore_crosshair)
+    RestoreCrosshair (FALSE);
+  ghidgui->need_restore_crosshair = FALSE;
+  ghid_draw_area_update (gport, NULL);
+}
+
+static void
+draw_right_cross (gint x, gint y)
+{
+  glVertex2i (x, 0);
+  glVertex2i (x, gport->height);
+  glVertex2i (0, y);
+  glVertex2i (gport->width, y);
+}
+
+static void
+draw_slanted_cross (gint x, gint y)
+{
+  gint x0, y0, x1, y1;
+
+  x0 = x + (gport->height - y);
+  x0 = MAX(0, MIN (x0, gport->width));
+  x1 = x - y;
+  x1 = MAX(0, MIN (x1, gport->width));
+  y0 = y + (gport->width - x);
+  y0 = MAX(0, MIN (y0, gport->height));
+  y1 = y - x;
+  y1 = MAX(0, MIN (y1, gport->height));
+  glVertex2i (x0, y0);
+  glVertex2i (x1, y1);
+
+  x0 = x - (gport->height - y);
+  x0 = MAX(0, MIN (x0, gport->width));
+  x1 = x + y;
+  x1 = MAX(0, MIN (x1, gport->width));
+  y0 = y + x;
+  y0 = MAX(0, MIN (y0, gport->height));
+  y1 = y - (gport->width - x);
+  y1 = MAX(0, MIN (y1, gport->height));
+  glVertex2i (x0, y0);
+  glVertex2i (x1, y1);
+}
+
+static void
+draw_dozen_cross (gint x, gint y)
+{
+  gint x0, y0, x1, y1;
+  gdouble tan60 = sqrt (3);
+
+  x0 = x + (gport->height - y) / tan60;
+  x0 = MAX(0, MIN (x0, gport->width));
+  x1 = x - y / tan60;
+  x1 = MAX(0, MIN (x1, gport->width));
+  y0 = y + (gport->width - x) * tan60;
+  y0 = MAX(0, MIN (y0, gport->height));
+  y1 = y - x * tan60;
+  y1 = MAX(0, MIN (y1, gport->height));
+  glVertex2i (x0, y0);
+  glVertex2i (x1, y1);
+
+  x0 = x + (gport->height - y) * tan60;
+  x0 = MAX(0, MIN (x0, gport->width));
+  x1 = x - y * tan60;
+  x1 = MAX(0, MIN (x1, gport->width));
+  y0 = y + (gport->width - x) / tan60;
+  y0 = MAX(0, MIN (y0, gport->height));
+  y1 = y - x / tan60;
+  y1 = MAX(0, MIN (y1, gport->height));
+  glVertex2i (x0, y0);
+  glVertex2i (x1, y1);
+
+  x0 = x - (gport->height - y) / tan60;
+  x0 = MAX(0, MIN (x0, gport->width));
+  x1 = x + y / tan60;
+  x1 = MAX(0, MIN (x1, gport->width));
+  y0 = y + x * tan60;
+  y0 = MAX(0, MIN (y0, gport->height));
+  y1 = y - (gport->width - x) * tan60;
+  y1 = MAX(0, MIN (y1, gport->height));
+  glVertex2i (x0, y0);
+  glVertex2i (x1, y1);
+
+  x0 = x - (gport->height - y) * tan60;
+  x0 = MAX(0, MIN (x0, gport->width));
+  x1 = x + y * tan60;
+  x1 = MAX(0, MIN (x1, gport->width));
+  y0 = y + x / tan60;
+  y0 = MAX(0, MIN (y0, gport->height));
+  y1 = y - (gport->width - x) / tan60;
+  y1 = MAX(0, MIN (y1, gport->height));
+  glVertex2i (x0, y0);
+  glVertex2i (x1, y1);
+}
+
+static void
+draw_crosshair (gint x, gint y)
+{
+  static enum crosshair_shape prev = Basic_Crosshair_Shape;
+
+  draw_right_cross (x, y);
+  if (prev == Union_Jack_Crosshair_Shape)
+    draw_slanted_cross (x, y);
+  if (prev == Dozen_Crosshair_Shape)
+    draw_dozen_cross (x, y);
+  prev = Crosshair.shape;
+}
+
+#define VCW 16
+#define VCD 8
+
+void
+ghid_show_crosshair (gboolean show)
+{
+  gint x, y;
+  static gint x_prev = -1, y_prev = -1;
+  static gboolean draw_markers, draw_markers_prev = FALSE;
+  static int done_once = 0;
+  static GdkColor cross_color;
+
+  if (gport->x_crosshair < 0 || ghidgui->creating) {// || !gport->has_entered) {
+    printf ("Returning\n");
+    return;
+  }
+
+  if (!done_once)
+    {
+      done_once = 1;
+      /* FIXME: when CrossColor changed from config */
+      ghid_map_color_string (Settings.CrossColor, &cross_color);
+    }
+  x = DRAW_X (gport->x_crosshair);
+  y = DRAW_Y (gport->y_crosshair);
+
+  glEnable (GL_COLOR_LOGIC_OP);
+  glLogicOp (GL_XOR);
+
+  hidgl_flush_triangles (&buffer);
+
+  glColor3f (cross_color.red / 65535.,
+             cross_color.green / 65535.,
+             cross_color.blue / 65535.);
+
+  glBegin (GL_LINES);
+
+#if 1
+  if (x_prev >= 0)
+    draw_crosshair (x_prev, y_prev);
+#endif
+
+  if (x >= 0 && show)
+    draw_crosshair (x, y);
+
+  glEnd ();
+
+
+  glBegin (GL_QUADS);
+
+#if 1
+  if (x_prev >= 0 && draw_markers_prev)
+    {
+      glVertex2i (0,                  y_prev - VCD);
+      glVertex2i (0,                  y_prev - VCD + VCW);
+      glVertex2i (VCD,                y_prev - VCD + VCW);
+      glVertex2i (VCD,                y_prev - VCD);
+      glVertex2i (gport->width,       y_prev - VCD);
+      glVertex2i (gport->width,       y_prev - VCD + VCW);
+      glVertex2i (gport->width - VCD, y_prev - VCD + VCW);
+      glVertex2i (gport->width - VCD, y_prev - VCD);
+      glVertex2i (x_prev - VCD,       0);
+      glVertex2i (x_prev - VCD,       VCD);
+      glVertex2i (x_prev - VCD + VCW, VCD);
+      glVertex2i (x_prev - VCD + VCW, 0);
+      glVertex2i (x_prev - VCD,       gport->height - VCD);
+      glVertex2i (x_prev - VCD,       gport->height);
+      glVertex2i (x_prev - VCD + VCW, gport->height);
+      glVertex2i (x_prev - VCD + VCW, gport->height - VCD);
+    }
+#endif
+
+  draw_markers = ghidgui->auto_pan_on && have_crosshair_attachments ();
+  if (x >= 0 && show && draw_markers)
+    {
+      glVertex2i (0,                  y - VCD);
+      glVertex2i (0,                  y - VCD + VCW);
+      glVertex2i (VCD,                y - VCD + VCW);
+      glVertex2i (VCD,                y - VCD);
+      glVertex2i (gport->width,       y - VCD);
+      glVertex2i (gport->width,       y - VCD + VCW);
+      glVertex2i (gport->width - VCD, y - VCD + VCW);
+      glVertex2i (gport->width - VCD, y - VCD);
+      glVertex2i (x - VCD,            0);
+      glVertex2i (x - VCD,            VCD);
+      glVertex2i (x - VCD + VCW,      VCD);
+      glVertex2i (x - VCD + VCW,      0);
+      glVertex2i (x - VCD,            gport->height - VCD);
+      glVertex2i (x - VCD,            gport->height);
+      glVertex2i (x - VCD + VCW,      gport->height);
+      glVertex2i (x - VCD + VCW,      gport->height - VCD);
+    }
+
+  glEnd ();
+
+  if (x >= 0 && show)
+    {
+      x_prev = x;
+      y_prev = y;
+      draw_markers_prev = draw_markers;
+    }
+  else
+    {
+      x_prev = y_prev = -1;
+      draw_markers_prev = FALSE;
+    }
+
+  glDisable (GL_COLOR_LOGIC_OP);
+}
diff --git a/src/hid/gtk/gtkhid-main.c b/src/hid/gtk/gtkhid-main.c
index 31fa88a..01d3f46 100644
--- a/src/hid/gtk/gtkhid-main.c
+++ b/src/hid/gtk/gtkhid-main.c
@@ -318,22 +318,6 @@ zoom_by (double factor, int x, int y)
 
 /* ------------------------------------------------------------ */
 
-void
-ghid_invalidate_lr (int left, int right, int top, int bottom)
-{
-  ghid_invalidate_all ();
-}
-
-void
-ghid_invalidate_all ()
-{
-  if (ghidgui->need_restore_crosshair)
-    RestoreCrosshair (FALSE);
-  ghidgui->need_restore_crosshair = FALSE;
-  gdk_window_invalidate_rect (gport->drawing_area->window, NULL, 1);
-}
-
-
 int
 ghid_set_layer (const char *name, int group, int empty)
 {
diff --git a/src/hid/gtk/gui-output-events.c b/src/hid/gtk/gui-output-events.c
index 3e0bd0b..6f54d82 100644
--- a/src/hid/gtk/gui-output-events.c
+++ b/src/hid/gtk/gui-output-events.c
@@ -298,218 +298,6 @@ have_crosshair_attachments (void)
   return result;
 }
 
-
-#define	VCW		16
-#define VCD		8
-
-static void
-draw_right_cross (gint x, gint y)
-{
-  glVertex2i (x, 0);
-  glVertex2i (x, gport->height);
-  glVertex2i (0, y);
-  glVertex2i (gport->width, y);
-}
-
-static void
-draw_slanted_cross (gint x, gint y)
-{
-  gint x0, y0, x1, y1;
-
-  x0 = x + (gport->height - y);
-  x0 = MAX(0, MIN (x0, gport->width));
-  x1 = x - y;
-  x1 = MAX(0, MIN (x1, gport->width));
-  y0 = y + (gport->width - x);
-  y0 = MAX(0, MIN (y0, gport->height));
-  y1 = y - x;
-  y1 = MAX(0, MIN (y1, gport->height));
-  glVertex2i (x0, y0);
-  glVertex2i (x1, y1);
-
-  x0 = x - (gport->height - y);
-  x0 = MAX(0, MIN (x0, gport->width));
-  x1 = x + y;
-  x1 = MAX(0, MIN (x1, gport->width));
-  y0 = y + x;
-  y0 = MAX(0, MIN (y0, gport->height));
-  y1 = y - (gport->width - x);
-  y1 = MAX(0, MIN (y1, gport->height));
-  glVertex2i (x0, y0);
-  glVertex2i (x1, y1);
-}
-
-static void
-draw_dozen_cross (gint x, gint y)
-{
-  gint x0, y0, x1, y1;
-  gdouble tan60 = sqrt (3);
-
-  x0 = x + (gport->height - y) / tan60;
-  x0 = MAX(0, MIN (x0, gport->width));
-  x1 = x - y / tan60;
-  x1 = MAX(0, MIN (x1, gport->width));
-  y0 = y + (gport->width - x) * tan60;
-  y0 = MAX(0, MIN (y0, gport->height));
-  y1 = y - x * tan60;
-  y1 = MAX(0, MIN (y1, gport->height));
-  glVertex2i (x0, y0);
-  glVertex2i (x1, y1);
-
-  x0 = x + (gport->height - y) * tan60;
-  x0 = MAX(0, MIN (x0, gport->width));
-  x1 = x - y * tan60;
-  x1 = MAX(0, MIN (x1, gport->width));
-  y0 = y + (gport->width - x) / tan60;
-  y0 = MAX(0, MIN (y0, gport->height));
-  y1 = y - x / tan60;
-  y1 = MAX(0, MIN (y1, gport->height));
-  glVertex2i (x0, y0);
-  glVertex2i (x1, y1);
-
-  x0 = x - (gport->height - y) / tan60;
-  x0 = MAX(0, MIN (x0, gport->width));
-  x1 = x + y / tan60;
-  x1 = MAX(0, MIN (x1, gport->width));
-  y0 = y + x * tan60;
-  y0 = MAX(0, MIN (y0, gport->height));
-  y1 = y - (gport->width - x) * tan60;
-  y1 = MAX(0, MIN (y1, gport->height));
-  glVertex2i (x0, y0);
-  glVertex2i (x1, y1);
-
-  x0 = x - (gport->height - y) * tan60;
-  x0 = MAX(0, MIN (x0, gport->width));
-  x1 = x + y * tan60;
-  x1 = MAX(0, MIN (x1, gport->width));
-  y0 = y + x / tan60;
-  y0 = MAX(0, MIN (y0, gport->height));
-  y1 = y - (gport->width - x) / tan60;
-  y1 = MAX(0, MIN (y1, gport->height));
-  glVertex2i (x0, y0);
-  glVertex2i (x1, y1);
-}
-
-static void
-draw_crosshair (gint x, gint y)
-{
-  static enum crosshair_shape prev = Basic_Crosshair_Shape;
-
-  draw_right_cross (x, y);
-  if (prev == Union_Jack_Crosshair_Shape)
-    draw_slanted_cross (x, y);
-  if (prev == Dozen_Crosshair_Shape)
-    draw_dozen_cross (x, y);
-  prev = Crosshair.shape;
-}
-
-void
-ghid_show_crosshair (gboolean show)
-{
-  gint x, y;
-  static gint x_prev = -1, y_prev = -1;
-  static gboolean draw_markers, draw_markers_prev = FALSE;
-  static int done_once = 0;
-  static GdkColor cross_color;
-
-  if (gport->x_crosshair < 0 || ghidgui->creating) {// || !gport->has_entered) {
-    printf ("Returning\n");
-    return;
-  }
-
-  if (!done_once)
-    {
-      done_once = 1;
-      /* FIXME: when CrossColor changed from config */
-      ghid_map_color_string (Settings.CrossColor, &cross_color);
-    }
-  x = DRAW_X (gport->x_crosshair);
-  y = DRAW_Y (gport->y_crosshair);
-
-  glEnable (GL_COLOR_LOGIC_OP);
-  glLogicOp (GL_XOR);
-
-  hidgl_flush_triangles (&buffer);
-
-  glColor3f (cross_color.red / 65535.,
-             cross_color.green / 65535.,
-             cross_color.blue / 65535.);
-
-  glBegin (GL_LINES);
-
-#if 1
-  if (x_prev >= 0)
-    draw_crosshair (x_prev, y_prev);
-#endif
-
-  if (x >= 0 && show)
-    draw_crosshair (x, y);
-
-  glEnd ();
-
-
-  glBegin (GL_QUADS);
-
-#if 1
-  if (x_prev >= 0 && draw_markers_prev)
-    {
-      glVertex2i (0,                  y_prev - VCD);
-      glVertex2i (0,                  y_prev - VCD + VCW);
-      glVertex2i (VCD,                y_prev - VCD + VCW);
-      glVertex2i (VCD,                y_prev - VCD);
-      glVertex2i (gport->width,       y_prev - VCD);
-      glVertex2i (gport->width,       y_prev - VCD + VCW);
-      glVertex2i (gport->width - VCD, y_prev - VCD + VCW);
-      glVertex2i (gport->width - VCD, y_prev - VCD);
-      glVertex2i (x_prev - VCD,       0);
-      glVertex2i (x_prev - VCD,       VCD);
-      glVertex2i (x_prev - VCD + VCW, VCD);
-      glVertex2i (x_prev - VCD + VCW, 0);
-      glVertex2i (x_prev - VCD,       gport->height - VCD);
-      glVertex2i (x_prev - VCD,       gport->height);
-      glVertex2i (x_prev - VCD + VCW, gport->height);
-      glVertex2i (x_prev - VCD + VCW, gport->height - VCD);
-    }
-#endif
-
-  draw_markers = ghidgui->auto_pan_on && have_crosshair_attachments ();
-  if (x >= 0 && show && draw_markers)
-    {
-      glVertex2i (0,                  y - VCD);
-      glVertex2i (0,                  y - VCD + VCW);
-      glVertex2i (VCD,                y - VCD + VCW);
-      glVertex2i (VCD,                y - VCD);
-      glVertex2i (gport->width,       y - VCD);
-      glVertex2i (gport->width,       y - VCD + VCW);
-      glVertex2i (gport->width - VCD, y - VCD + VCW);
-      glVertex2i (gport->width - VCD, y - VCD);
-      glVertex2i (x - VCD,            0);
-      glVertex2i (x - VCD,            VCD);
-      glVertex2i (x - VCD + VCW,      VCD);
-      glVertex2i (x - VCD + VCW,      0);
-      glVertex2i (x - VCD,            gport->height - VCD);
-      glVertex2i (x - VCD,            gport->height);
-      glVertex2i (x - VCD + VCW,      gport->height);
-      glVertex2i (x - VCD + VCW,      gport->height - VCD);
-    }
-
-  glEnd ();
-
-  if (x >= 0 && show)
-    {
-      x_prev = x;
-      y_prev = y;
-      draw_markers_prev = draw_markers;
-    }
-  else
-    {
-      x_prev = y_prev = -1;
-      draw_markers_prev = FALSE;
-    }
-
-  glDisable (GL_COLOR_LOGIC_OP);
-}
-
 static gboolean
 ghid_idle_cb (gpointer data)
 {
