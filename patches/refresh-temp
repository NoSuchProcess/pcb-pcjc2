Bottom: 86f041fd8971aff6ec4349a7ec7536a68c251369
Top:    dd4a10a30efd1450b0589f6f38e80359857bc7b5
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2009-02-08 20:18:36 +0000

Refresh of more-work-on-trying-to-speed-u

---

diff --git a/src/polygon1.c b/src/polygon1.c
index 516a6f5..bb2150f 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -2268,12 +2268,16 @@ poly_Boolean_free (POLYAREA * ai, POLYAREA * bi, POLYAREA ** res, int action)
       M_POLYAREA_label_isected (b, a_isected, FALSE);
 #endif
 
+/* New faster method */
+#if 1
       *res = a;
       M_POLYAREA_update_primary (&e, res, &holes, &a_isected, action);
       M_POLYAREA_Collect_separated (&e, a_isected, res, &holes, action, FALSE);
       M_B_AREA_Collect (&e, b, res, &holes, action);
       poly_Free (&b);
+#endif
 
+/* Old attempt */
 #if 0
       /* And speed things up _A LOT_ here by only processing the relevant
          contours, specifically keeping the source "a" as a starting point
@@ -2285,6 +2289,16 @@ poly_Boolean_free (POLYAREA * ai, POLYAREA * bi, POLYAREA ** res, int action)
       poly_Free (&b);
 #endif
 
+/* Old slow way */
+#if 0
+      M_POLYAREA_Collect (&e, a, res, &holes, action, b->f == b
+			  && !b->contours->next
+			  && b->contours->Flags.status != ISECTED);
+      poly_Free (&a);
+      M_B_AREA_Collect (&e, b, res, &holes, action);
+      poly_Free (&b);
+#endif
+
       InsertHoles (&e, *res, &holes);
     }
   /* delete holes if any left */
