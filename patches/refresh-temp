Bottom: b5dce2faaac180add43ca80dcfb33b660d51167a
Top:    105aac23a7dd7f58777133cb5d32e7a30f19a2ae
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2010-08-27 15:56:24 +0100

Refresh of try-to-make-gdk-and-gl-version

---

diff --git a/src/hid/gtk/gtkhid-gdk.c b/src/hid/gtk/gtkhid-gdk.c
index 28fcd8a..36f4f39 100644
--- a/src/hid/gtk/gtkhid-gdk.c
+++ b/src/hid/gtk/gtkhid-gdk.c
@@ -918,6 +918,17 @@ ghid_init_renderer (int *argc, char ***argv, GHidPort *port)
   port->render_priv = g_new0 (render_priv, 1);
 }
 
+GtkWidget *
+ghid_drawing_area_new (GHidPort *port)
+{
+  return gtk_drawing_area_new ();
+}
+
+void
+ghid_pinout_preview_init (GhidPinoutPreview *preview)
+{
+}
+
 void
 ghid_drawing_area_configure_hook (GHidPort *port)
 {
@@ -941,6 +952,17 @@ ghid_drawing_area_configure_hook (GHidPort *port)
     }
 }
 
+gboolean
+ghid_start_drawing (GHidPort *port)
+{
+  return TRUE;
+}
+
+void
+ghid_end_drawing (GHidPort *port)
+{
+}
+
 void
 ghid_screen_update (void)
 {
diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index e4b909b..02c592b 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -41,6 +41,10 @@ static hidGC current_gc = NULL;
 
 static int cur_mask = -1;
 
+typedef struct render_priv {
+  GdkGLConfig *glconfig;
+} render_priv;
+
 
 typedef struct hid_gc_struct
 {
@@ -766,6 +770,59 @@ ghid_show_crosshair (gboolean show)
   glDisable (GL_COLOR_LOGIC_OP);
 }
 
+void
+ghid_init_renderer (int *argc, char ***argv, GHidPort *port)
+{
+  render_priv *priv;
+
+  port->render_priv = priv = g_new0 (render_priv, 1);
+
+  gtk_gl_init(argc, argv);
+
+  /* setup GL-context */
+  priv->glconfig = gdk_gl_config_new_by_mode (GDK_GL_MODE_RGBA    |
+                                              GDK_GL_MODE_STENCIL |
+                                           // GDK_GL_MODE_DEPTH   |
+                                              GDK_GL_MODE_DOUBLE);
+  if (!priv->glconfig)
+    {
+      printf ("Could not setup GL-context!\n");
+      return; /* Should we abort? */
+    }
+}
+
+GtkWidget *
+ghid_drawing_area_new (GHidPort *port)
+{
+  GtkWidget *drawing_area;
+  render_priv *priv = port->render_priv;
+
+  drawing_area = gtk_drawing_area_new ();
+  gtk_widget_set_gl_capability (drawing_area,
+                                priv->glconfig,
+                                NULL,
+                                TRUE,
+                                GDK_GL_RGBA_TYPE);
+  return drawing_area;
+}
+
+void
+ghid_pinout_preview_init (GhidPinoutPreview *preview)
+{
+  render_priv *priv = gport->render_priv;
+
+  gtk_widget_set_gl_capability (GTK_WIDGET (preview),
+                                priv->glconfig,
+                                NULL,
+                                TRUE,
+                                GDK_GL_RGBA_TYPE);
+}
+
+void
+ghid_drawing_area_configure_hook (GHidPort *port)
+{
+}
+
 gboolean
 ghid_start_drawing (GHidPort *port)
 {
diff --git a/src/hid/gtk/gui-output-events.c b/src/hid/gtk/gui-output-events.c
index 15d64b7..0952462 100644
--- a/src/hid/gtk/gui-output-events.c
+++ b/src/hid/gtk/gui-output-events.c
@@ -543,13 +543,14 @@ ghid_port_drawing_area_configure_event_cb (GtkWidget * widget,
       else
 	gdk_color_white (gport->colormap, &gport->offlimits_color);
       first_time_done = TRUE;
+      ghid_drawing_area_configure_hook (out);
       PCBChanged (0, NULL, 0, 0);
     }
-//  if (gport->mask)
-//    {
-//      gdk_pixmap_unref (gport->mask);
-//      gport->mask = gdk_pixmap_new (0, gport->width, gport->height, 1);
-//    }
+  else
+    {
+      ghid_drawing_area_configure_hook (out);
+    }
+
   ghid_port_ranges_scale (FALSE);
   ghid_invalidate_all ();
   RestoreCrosshair (TRUE);
@@ -686,14 +687,9 @@ ghid_port_window_motion_cb (GtkWidget * widget,
   gdouble dx, dy;
   static gint x_prev = -1, y_prev = -1;
   gboolean moved;
-  GdkGLContext* pGlContext = gtk_widget_get_gl_context (widget);
-  GdkGLDrawable* pGlDrawable = gtk_widget_get_gl_drawable (widget);
 
-  /* make GL-context "current" */
-  if (!gdk_gl_drawable_gl_begin (pGlDrawable, pGlContext)) {
-    printf ("GL THingy returned\n");
+  if (!ghid_start_drawing (out))
     return FALSE;
-  }
 
   if (out->panning)
     {
@@ -718,13 +714,7 @@ ghid_port_window_motion_cb (GtkWidget * widget,
   if (moved && have_crosshair_attachments ())
     ghid_draw_area_update (gport, NULL);
 
-  if (gdk_gl_drawable_is_double_buffered (pGlDrawable))
-    gdk_gl_drawable_swap_buffers (pGlDrawable);
-  else
-    glFlush ();
-
-  /* end drawing to current GL-context */
-  gdk_gl_drawable_gl_end (pGlDrawable);
+  ghid_end_drawing (out);
   return FALSE;
 }
 
diff --git a/src/hid/gtk/gui-pinout-preview.c b/src/hid/gtk/gui-pinout-preview.c
index 1a1c8f4..7e2fb89 100644
--- a/src/hid/gtk/gui-pinout-preview.c
+++ b/src/hid/gtk/gui-pinout-preview.c
@@ -182,11 +182,7 @@ ghid_pinout_preview_constructor (GType type,
   object = G_OBJECT_CLASS (ghid_pinout_preview_parent_class)->
     constructor (type, n_construct_properties, construct_properties);
 
-  gtk_widget_set_gl_capability (GTK_WIDGET (object),
-                                gport->glconfig,
-                                NULL,
-                                TRUE,
-                                GDK_GL_RGBA_TYPE);
+  ghid_pinout_preview_init (GHID_PINOUT_PREVIEW (object));
 
   return object;
 }
diff --git a/src/hid/gtk/gui-top-window.c b/src/hid/gtk/gui-top-window.c
index aa1c9cc..68090b7 100644
--- a/src/hid/gtk/gui-top-window.c
+++ b/src/hid/gtk/gui-top-window.c
@@ -2296,12 +2296,7 @@ ghid_build_pcb_top_window (void)
   gtk_viewport_set_shadow_type (GTK_VIEWPORT (viewport), GTK_SHADOW_IN);
   gtk_box_pack_start (GTK_BOX (hbox), viewport, TRUE, TRUE, 0);
 
-  gport->drawing_area = gtk_drawing_area_new ();
-  gtk_widget_set_gl_capability (gport->drawing_area,
-                                gport->glconfig,
-                                NULL,
-                                TRUE,
-                                GDK_GL_RGBA_TYPE);
+  gport->drawing_area = ghid_drawing_area_new (port);
 
   gtk_widget_add_events (gport->drawing_area, GDK_EXPOSURE_MASK
 			 | GDK_LEAVE_NOTIFY_MASK | GDK_ENTER_NOTIFY_MASK
@@ -2677,21 +2672,12 @@ ghid_parse_arguments (int *argc, char ***argv)
   gtk_disable_setlocale ();
 
   gtk_init (argc, argv);
-  gtk_gl_init(argc, argv);
 
   gport = &ghid_port;
   gport->zoom = 300.0;
   pixel_slop = 300;
 
-  /* setup GL-context */
-  gport->glconfig = gdk_gl_config_new_by_mode (GDK_GL_MODE_RGBA    |
-                                               GDK_GL_MODE_STENCIL |
-//                                               GDK_GL_MODE_DEPTH   |
-                                               GDK_GL_MODE_DOUBLE);
-  if (!gport->glconfig) {
-    printf("Could not setup GL-context!\n");
-    return; /* Should we abort? */
-  }
+  ghid_init_renderer (argc, argv, gport);
 
   ghid_config_files_read (argc, argv);
 
diff --git a/src/hid/gtk/gui.h b/src/hid/gtk/gui.h
index aa24bbf..51ef3eb 100644
--- a/src/hid/gtk/gui.h
+++ b/src/hid/gtk/gui.h
@@ -38,18 +38,6 @@
 #include <gtk/gtk.h>
 #include "gui-pinout-preview.h"
 
-/* The Linux OpenGL ABI 1.0 spec requires that we define
- * GL_GLEXT_PROTOTYPES before including gl.h or glx.h for extensions
- * in order to get prototypes:
- *   http://www.opengl.org/registry/ABI/
- */
-#ifdef ENABLE_GL
-#  define GL_GLEXT_PROTOTYPES 1
-#  include <GL/gl.h>
-#  include <gtk/gtkgl.h>
-#  include "hid/common/hidgl.h"
-#endif
-
 
   /* Silk and rats lines are the two additional selectable to draw on.
      |  gui code in gui-top-window.c and group code in misc.c must agree
@@ -178,10 +166,6 @@ typedef struct
 
   struct render_priv *render_priv;
 
-#ifdef ENABLE_GL
-  GdkGLConfig *glconfig;
-#endif
-
   gint trans_lines;
 
   GdkColor bg_color, offlimits_color, grid_color;
@@ -515,6 +499,11 @@ void ghid_invalidate_lr ();
 void ghid_invalidate_all ();
 void ghid_show_crosshair (gboolean show);
 void ghid_init_renderer (int *, char ***, GHidPort *);
+GtkWidget *ghid_drawing_area_new (GHidPort *port);
+void ghid_pinout_preview_init (GhidPinoutPreview *preview);
+void ghid_drawing_area_configure_hook (GHidPort *port);
+gboolean ghid_start_drawing (GHidPort *port);
+void ghid_end_drawing (GHidPort *port);
 void ghid_screen_update (void);
 gboolean ghid_drawing_area_expose_cb (GtkWidget *, GdkEventExpose *,
                                       GHidPort *);
