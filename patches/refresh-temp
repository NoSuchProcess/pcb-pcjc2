Bottom: f55a754a482d95410f90de747077c1711431ba82
Top:    416d62e9d05cddb9f8956568d29685cbd849d40b
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2009-02-21 18:03:14 +0000

Refresh of add-support-for-filling-thindr

---

diff --git a/src/hid/common/draw_helpers.c b/src/hid/common/draw_helpers.c
index bc5bc6d..1b7c6b7 100644
--- a/src/hid/common/draw_helpers.c
+++ b/src/hid/common/draw_helpers.c
@@ -54,10 +54,10 @@ static void thindraw_contour (hidGC gc, PLINE *pl)
   while ((v = v->next) != pl->head.next);
 }
 
-static void poly_fill_first_contour (PolygonType *poly, void *user_data)
+static void fill_contour_cb (PLINE *pl, void *user_data)
 {
   hidGC gc = user_data;
-  fill_contour (gc, poly->Clipped->contours);
+  fill_contour (gc, pl);
 }
 
 void common_fill_pcb_polygon (hidGC gc, PolygonType *poly,
@@ -67,7 +67,7 @@ void common_fill_pcb_polygon (hidGC gc, PolygonType *poly,
             we are dicing for every case. Some GUIs
             rely on this, and need their flags fixing. */
 
-  NoHolesPolygonDicer (poly, clip_box, poly_fill_first_contour, gc);
+  NoHolesPolygonDicer (poly, clip_box, fill_contour_cb, gc);
 
   /* Draw other parts of the polygon if fullpoly flag is set */
   if (TEST_FLAG (FULLPOLYFLAG, poly))
@@ -77,7 +77,7 @@ void common_fill_pcb_polygon (hidGC gc, PolygonType *poly,
       for (p.Clipped = poly->Clipped->f;
            p.Clipped != poly->Clipped;
            p.Clipped = p.Clipped->f)
-        NoHolesPolygonDicer (&p, clip_box, poly_fill_first_contour, gc);
+        NoHolesPolygonDicer (&p, clip_box, fill_contour_cb, gc);
     }
 
 }
diff --git a/src/polygon.c b/src/polygon.c
index e0841af..bc7b555 100644
--- a/src/polygon.c
+++ b/src/polygon.c
@@ -58,10 +58,8 @@ intersection is "is the target shape inside POLYAREA.contours and NOT
 fully enclosed in any of POLYAREA.contours.next... (the holes)".
 
 The polygon dicer (NoHolesPolygonDicer and r_NoHolesPolygonDicer)
-emits a series of PolygonTypes with Clipped pointing to a "simple"
-shape.  That is, there is a single POLYAREA (the dlink pointers point
-to itself) and the contours list has only one element (the solid
-outline, with no "holes" oulines).  That's the meaning of the first
+emits a series of "simple" PLINE shapes.  That is, the PLINE isn't
+linked to any other "holes" oulines).  That's the meaning of the first
 test in r_NoHolesPolygonDicer.  It is testing to see if the PLINE
 contour (the first, making it a solid outline) has a valid next
 pointer (which would point to one or more holes).  The dicer works by
@@ -1509,7 +1507,7 @@ IsRectangleInPolygon (LocationType X1, LocationType Y1, LocationType X2,
 
 static void
 r_NoHolesPolygonDicer (PLINE * p,
-                       void (*emit) (PolygonTypePtr, void *), void *user_data)
+                       void (*emit) (PLINE *, void *), void *user_data)
 {
   POLYAREA *pa;
 
@@ -1518,26 +1516,7 @@ r_NoHolesPolygonDicer (PLINE * p,
   pa->contours = p;
   if (!p->next)                 /* no holes */
     {
-      PolygonType poly;
-      PointType pts[4];
-
-      poly.BoundingBox.X1 = p->xmin;
-      poly.BoundingBox.X2 = p->xmax;
-      poly.BoundingBox.Y1 = p->ymin;
-      poly.BoundingBox.Y2 = p->ymax;
-      poly.PointN = poly.PointMax = 4;
-      poly.Clipped = pa;
-      poly.Points = pts;
-      pts[0].X = pts[0].X2 = p->xmin;
-      pts[0].Y = pts[0].Y2 = p->ymin;
-      pts[1].X = pts[1].X2 = p->xmax;
-      pts[1].Y = pts[1].Y2 = p->ymin;
-      pts[2].X = pts[2].X2 = p->xmax;
-      pts[2].Y = pts[2].Y2 = p->ymax;
-      pts[3].X = pts[3].X2 = p->xmin;
-      pts[3].Y = pts[3].Y2 = p->ymax;
-      poly.Flags = MakeFlags (CLEARPOLYFLAG);
-      emit (&poly, user_data);
+      emit (p, user_data);
       poly_Free (&pa);
       return;
     }
@@ -1582,7 +1561,7 @@ r_NoHolesPolygonDicer (PLINE * p,
 
 void
 NoHolesPolygonDicer (PolygonTypePtr p, const BoxType * clip,
-                     void (*emit) (PolygonTypePtr, void *), void *user_data)
+                     void (*emit) (PLINE *, void *), void *user_data)
 {
   POLYAREA *save, *ans;
 
diff --git a/src/polygon.h b/src/polygon.h
index f6752a0..1ec0a04 100644
--- a/src/polygon.h
+++ b/src/polygon.h
@@ -64,6 +64,5 @@ Boolean IsRectangleInPolygon (LocationType, LocationType, LocationType,
 Boolean isects (POLYAREA *, PolygonTypePtr, Boolean);
 Boolean MorphPolygon (LayerTypePtr, PolygonTypePtr);
 void NoHolesPolygonDicer (PolygonType *p, const BoxType *clip,
-                          void (*emit) (PolygonTypePtr, void *),
-                          void *user_data);
+                          void (*emit) (PLINE *, void *), void *user_data);
 #endif
