Bottom: b3b5d9256853e012a88d38719bc47c53cc86efeb
Top:    3c0c4509d92220e3cd07cd416b6b707eee073e0a
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-09-05 00:01:46 +0100

Refresh of hid-gtk-file-change-notificati

---

diff --git a/src/hid/gtk/gui-top-window.c b/src/hid/gtk/gui-top-window.c
index fae0655..1abdfcc 100644
--- a/src/hid/gtk/gui-top-window.c
+++ b/src/hid/gtk/gui-top-window.c
@@ -607,6 +607,110 @@ make_actions (GHidPort * port)
                                 (GHID_LAYER_SELECTOR (ghidgui->layer_selector)));
 }
 
+static void
+info_bar_response_cb (GtkInfoBar *info_bar,
+                      gint        response_id,
+                      gpointer    user_data)
+{
+  GhidGui *_gui = (GhidGui *)user_data;
+
+  if (response_id == GTK_RESPONSE_ACCEPT)
+    hid_actionl ("LoadFrom", "revert", "none", NULL);
+
+  gtk_widget_destroy (_gui->info_bar);
+  _gui->info_bar = NULL;
+}
+
+static void
+file_changed_cb (GFileMonitor     *monitor,
+                 GFile            *file,
+                 GFile            *other_file,
+                 GFileMonitorEvent event_type,
+                 gpointer          user_data)
+{
+  GtkWidget *icon;
+  GtkWidget *label;
+  GtkWidget *content_area;
+  char *file_path;
+  char *file_path_utf8;
+  char *markup;
+
+  if (event_type != G_FILE_MONITOR_EVENT_CHANGED)
+    return;
+
+  /* File has changed on disk */
+
+  if (ghidgui->info_bar)
+    gtk_widget_destroy (ghidgui->info_bar);
+
+  ghidgui->info_bar = gtk_info_bar_new_with_buttons (_("Reload"),
+                                                     GTK_RESPONSE_ACCEPT,
+                                                     GTK_STOCK_CANCEL,
+                                                     GTK_RESPONSE_CANCEL,
+                                                     NULL);
+  gtk_box_pack_start (GTK_BOX (ghidgui->vbox_middle),
+                      ghidgui->info_bar, FALSE, FALSE, 0);
+  gtk_box_reorder_child (GTK_BOX (ghidgui->vbox_middle), ghidgui->info_bar, 0);
+
+  gtk_info_bar_set_message_type (GTK_INFO_BAR (ghidgui->info_bar),
+                                 GTK_MESSAGE_WARNING);
+
+  g_signal_connect (ghidgui->info_bar, "response",
+                    G_CALLBACK (info_bar_response_cb), user_data);
+
+  file_path = g_file_get_path (file);
+  file_path_utf8 = g_filename_to_utf8 (file_path, -1, NULL, NULL, NULL);
+  g_free (file_path);
+  markup =
+    g_markup_printf_escaped (_("<b>The file %s has changed on disk</b>\n"
+                               "\n"
+                               "Do you want to reload the file?"),
+                             file_path_utf8);
+  g_free (file_path_utf8);
+
+  content_area =
+    gtk_info_bar_get_content_area (GTK_INFO_BAR (ghidgui->info_bar));
+
+  icon = gtk_image_new_from_stock (GTK_STOCK_DIALOG_WARNING,
+                                   GTK_ICON_SIZE_DIALOG);
+  gtk_box_pack_start (GTK_BOX (content_area),
+                      icon, FALSE, FALSE, 0);
+
+  label = gtk_label_new ("");
+  gtk_box_pack_start (GTK_BOX (content_area),
+                      label, TRUE, TRUE, 6);
+
+  gtk_label_set_use_markup (GTK_LABEL (label), TRUE);
+  gtk_label_set_markup (GTK_LABEL (label), markup);
+  g_free (markup);
+
+  gtk_misc_set_alignment (GTK_MISC (label), 0., 0.5);
+
+  gtk_widget_show_all (ghidgui->info_bar);
+}
+
+static void
+connect_file_change_monitor (char *filename)
+{
+  GFile *file;
+
+  if (ghidgui->file_monitor)
+    g_object_unref (ghidgui->file_monitor);
+
+  file = g_file_new_for_path (filename);
+
+  /* XXX: Could hook up more error handling for g_file_monitor_file */
+  ghidgui->file_monitor = g_file_monitor_file (file,
+                                               G_FILE_MONITOR_NONE,
+                                               NULL,
+                                               NULL);
+
+  g_object_unref (file);
+
+  g_signal_connect (ghidgui->file_monitor, "changed",
+                    G_CALLBACK (file_changed_cb), ghidgui);
+}
+
 
 /* Refreshes the window title bar and sets the PCB name to the
  * window title bar or to a seperate label
@@ -636,6 +740,9 @@ ghid_window_set_name_label (gchar * name)
   gtk_window_set_title (GTK_WINDOW (gport->top_window), str);
   g_free (str);
   g_free (filename);
+
+  if (PCB->Filename && *PCB->Filename)
+    connect_file_change_monitor (PCB->Filename);
 }
 
 static void
@@ -1403,11 +1510,12 @@ ghid_build_pcb_top_window (void)
   gtk_box_pack_start(GTK_BOX(hbox), vbox, FALSE, FALSE, 4);
   make_route_style_buttons(vbox, port);
 
-  vbox = gtk_vbox_new (FALSE, 0);
-  gtk_box_pack_start (GTK_BOX (hbox_middle), vbox, TRUE, TRUE, 0);
+  ghidgui->vbox_middle = gtk_vbox_new (FALSE, 0);
+  gtk_box_pack_start (GTK_BOX (hbox_middle),
+                      ghidgui->vbox_middle, TRUE, TRUE, 0);
 
   hbox = gtk_hbox_new (FALSE, 0);
-  gtk_box_pack_start (GTK_BOX (vbox), hbox, TRUE, TRUE, 0);
+  gtk_box_pack_start (GTK_BOX (ghidgui->vbox_middle), hbox, TRUE, TRUE, 0);
 
   /* -- The PCB layout output drawing area */
 
@@ -1448,15 +1556,16 @@ ghid_build_pcb_top_window (void)
     gtk_hscrollbar_new (GTK_ADJUSTMENT (ghidgui->h_adjustment));
   gtk_range_set_update_policy (GTK_RANGE (ghidgui->h_range),
 			       GTK_UPDATE_CONTINUOUS);
-  gtk_box_pack_start (GTK_BOX (vbox), ghidgui->h_range, FALSE, FALSE, 0);
+  gtk_box_pack_start (GTK_BOX (ghidgui->vbox_middle),
+                      ghidgui->h_range, FALSE, FALSE, 0);
 
   g_signal_connect (G_OBJECT (ghidgui->h_adjustment), "value_changed",
 		    G_CALLBACK (h_adjustment_changed_cb), ghidgui);
 
   /* -- The bottom status line label */
   ghidgui->status_line_hbox = gtk_hbox_new (FALSE, 0);
-  gtk_box_pack_start (GTK_BOX (vbox), ghidgui->status_line_hbox,
-		      FALSE, FALSE, 2);
+  gtk_box_pack_start (GTK_BOX (ghidgui->vbox_middle),
+                      ghidgui->status_line_hbox, FALSE, FALSE, 2);
 
   label = gtk_label_new ("");
   gtk_label_set_use_markup (GTK_LABEL (label), TRUE);
diff --git a/src/hid/gtk/gui.h b/src/hid/gtk/gui.h
index 8abfd12..883e803 100644
--- a/src/hid/gtk/gui.h
+++ b/src/hid/gtk/gui.h
@@ -112,6 +112,10 @@ typedef struct
   GtkWidget *grid_units_button;
   GtkWidget *menu_bar, *layer_selector;
   GtkWidget *mode_toolbar;
+  GtkWidget *vbox_middle;
+
+  GtkWidget *info_bar;
+  GFileMonitor *file_monitor;
 
   GtkWidget *h_range, *v_range;
   GtkObject *h_adjustment, *v_adjustment;
