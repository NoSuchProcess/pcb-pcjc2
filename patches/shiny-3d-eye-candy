Bottom: 869b44b4e3e5f1d0347f61529bbdb02a7774fb3d
Top:    c6656083a7dff2261b77193135963bdc25e84cde
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2010-08-24 00:48:11 +0100

Shiny 3D eye-candy

Experiments in progress - don't expect this to work yet!


---

diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index 6b1e306..ae58cbb 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -68,6 +68,7 @@ ghid_draw_grid ()
   static int npoints = 0;
   int x1, y1, x2, y2, n, i;
   double x, y;
+  extern float global_depth;
 
   if (!Settings.DrawGrid)
     return;
@@ -119,23 +120,24 @@ ghid_draw_grid ()
     {
       npoints = n + 10;
       points =
-	MyRealloc (points, npoints * 2 * sizeof (GLfloat), "gtk_draw_grid");
+	MyRealloc (points, npoints * 3 * sizeof (GLfloat), "gtk_draw_grid");
     }
 
   glEnableClientState (GL_VERTEX_ARRAY);
-  glVertexPointer (2, GL_FLOAT, 0, points);
+  glVertexPointer (3, GL_FLOAT, 0, points);
 
   n = 0;
   for (x = x1; x <= x2; x += PCB->Grid)
     {
-      points[2 * n] = Vx (x);
+      points[3 * n] = Vx (x);
+      points[3 * n + 2] = global_depth;
       n++;
     }
   for (y = y1; y <= y2; y += PCB->Grid)
     {
       int vy = Vy (y);
       for (i = 0; i < n; i++)
-	points[2 * i + 1] = vy;
+	points[3 * i + 1] = vy;
       glDrawArrays (GL_POINTS, 0, n);
     }
 
diff --git a/src/hid/gtk/gtkhid-main.c b/src/hid/gtk/gtkhid-main.c
index e2bc158..7b01d27 100644
--- a/src/hid/gtk/gtkhid-main.c
+++ b/src/hid/gtk/gtkhid-main.c
@@ -346,6 +346,18 @@ ghid_set_layer (const char *name, int group, int empty)
   /* Flush out any existing geoemtry to be rendered */
   hidgl_flush_triangles (&buffer);
 
+  if (group >= 0 && group < max_layer) {
+    hidgl_set_depth ((max_layer - group) * 10);
+  } else {
+    if (SL_TYPE (idx) == SL_SILK) {
+      if (SL_SIDE (idx) == SL_TOP_SIDE && !Settings.ShowSolderSide) {
+        hidgl_set_depth (max_layer * 10 + 3);
+      } else {
+        hidgl_set_depth (10 - 3);
+      }
+    }
+  }
+
   glEnable (GL_STENCIL_TEST);                // Enable Stencil test
   glStencilOp (GL_KEEP, GL_KEEP, GL_REPLACE); // Stencil pass => replace stencil value (with 1)
   /* Reset stencil buffer so we can paint anywhere */
diff --git a/src/hid/gtk/gui-output-events.c b/src/hid/gtk/gui-output-events.c
index 1929d45..3295f23 100644
--- a/src/hid/gtk/gui-output-events.c
+++ b/src/hid/gtk/gui-output-events.c
@@ -483,16 +483,16 @@ have_crosshair_attachments (void)
 #define VCD		8
 
 static void
-draw_right_cross (gint x, gint y)
+draw_right_cross (gint x, gint y, gint z)
 {
-  glVertex2i (x, 0);
-  glVertex2i (x, gport->height);
-  glVertex2i (0, y);
-  glVertex2i (gport->width, y);
+  glVertex3i (x, 0, z);
+  glVertex3i (x, gport->height, z);
+  glVertex3i (0, y, z);
+  glVertex3i (gport->width, y, z);
 }
 
 static void
-draw_slanted_cross (gint x, gint y)
+draw_slanted_cross (gint x, gint y, gint z)
 {
   gint x0, y0, x1, y1;
 
@@ -504,8 +504,8 @@ draw_slanted_cross (gint x, gint y)
   y0 = MAX(0, MIN (y0, gport->height));
   y1 = y - x;
   y1 = MAX(0, MIN (y1, gport->height));
-  glVertex2i (x0, y0);
-  glVertex2i (x1, y1);
+  glVertex3i (x0, y0, z);
+  glVertex3i (x1, y1, z);
 
   x0 = x - (gport->height - y);
   x0 = MAX(0, MIN (x0, gport->width));
@@ -515,12 +515,12 @@ draw_slanted_cross (gint x, gint y)
   y0 = MAX(0, MIN (y0, gport->height));
   y1 = y - (gport->width - x);
   y1 = MAX(0, MIN (y1, gport->height));
-  glVertex2i (x0, y0);
-  glVertex2i (x1, y1);
+  glVertex3i (x0, y0, z);
+  glVertex3i (x1, y1, z);
 }
 
 static void
-draw_dozen_cross (gint x, gint y)
+draw_dozen_cross (gint x, gint y, gint z)
 {
   gint x0, y0, x1, y1;
   gdouble tan60 = sqrt (3);
@@ -533,8 +533,8 @@ draw_dozen_cross (gint x, gint y)
   y0 = MAX(0, MIN (y0, gport->height));
   y1 = y - x * tan60;
   y1 = MAX(0, MIN (y1, gport->height));
-  glVertex2i (x0, y0);
-  glVertex2i (x1, y1);
+  glVertex3i (x0, y0, z);
+  glVertex3i (x1, y1, z);
 
   x0 = x + (gport->height - y) * tan60;
   x0 = MAX(0, MIN (x0, gport->width));
@@ -544,8 +544,8 @@ draw_dozen_cross (gint x, gint y)
   y0 = MAX(0, MIN (y0, gport->height));
   y1 = y - x / tan60;
   y1 = MAX(0, MIN (y1, gport->height));
-  glVertex2i (x0, y0);
-  glVertex2i (x1, y1);
+  glVertex3i (x0, y0, z);
+  glVertex3i (x1, y1, z);
 
   x0 = x - (gport->height - y) / tan60;
   x0 = MAX(0, MIN (x0, gport->width));
@@ -555,8 +555,8 @@ draw_dozen_cross (gint x, gint y)
   y0 = MAX(0, MIN (y0, gport->height));
   y1 = y - (gport->width - x) * tan60;
   y1 = MAX(0, MIN (y1, gport->height));
-  glVertex2i (x0, y0);
-  glVertex2i (x1, y1);
+  glVertex3i (x0, y0, z);
+  glVertex3i (x1, y1, z);
 
   x0 = x - (gport->height - y) * tan60;
   x0 = MAX(0, MIN (x0, gport->width));
@@ -566,30 +566,31 @@ draw_dozen_cross (gint x, gint y)
   y0 = MAX(0, MIN (y0, gport->height));
   y1 = y - (gport->width - x) / tan60;
   y1 = MAX(0, MIN (y1, gport->height));
-  glVertex2i (x0, y0);
-  glVertex2i (x1, y1);
+  glVertex3i (x0, y0, z);
+  glVertex3i (x1, y1, z);
 }
 
 static void
-draw_crosshair (gint x, gint y)
+draw_crosshair (gint x, gint y, gint z)
 {
   static enum crosshair_shape prev = Basic_Crosshair_Shape;
 
-  draw_right_cross (x, y);
+  draw_right_cross (x, y, z);
   if (prev == Union_Jack_Crosshair_Shape)
-    draw_slanted_cross (x, y);
+    draw_slanted_cross (x, y, z);
   if (prev == Dozen_Crosshair_Shape)
-    draw_dozen_cross (x, y);
+    draw_dozen_cross (x, y, z);
   prev = Crosshair.shape;
 }
 
 void
 ghid_show_crosshair (gboolean show)
 {
-  gint x, y;
-  static gint x_prev = -1, y_prev = -1;
+  gint x, y, z;
+  static gint x_prev = -1, y_prev = -1, z_prev = -1;
   static int done_once = 0;
   static GdkColor cross_color;
+  extern float global_depth;
 
   if (gport->x_crosshair < 0 || ghidgui->creating) {// || !gport->has_entered) {
     printf ("Returning\n");
@@ -604,6 +605,7 @@ ghid_show_crosshair (gboolean show)
     }
   x = DRAW_X (gport->x_crosshair);
   y = DRAW_Y (gport->y_crosshair);
+  z = global_depth;
 
   glEnable (GL_COLOR_LOGIC_OP);
   glLogicOp (GL_XOR);
@@ -619,13 +621,13 @@ ghid_show_crosshair (gboolean show)
 #if 1
   if (x_prev >= 0)
     {
-      draw_crosshair (x_prev, y_prev);
+      draw_crosshair (x_prev, y_prev, z_prev);
     }
 #endif
 
   if (x >= 0 && show)
     {
-      draw_crosshair (x, y);
+      draw_crosshair (x, y, z);
     }
 
   glEnd ();
@@ -637,43 +639,43 @@ ghid_show_crosshair (gboolean show)
 #if 1
       if (x_prev >= 0)
         {
-          glVertex2i (0,                  y_prev - VCD);
-          glVertex2i (0,                  y_prev - VCD + VCW);
-          glVertex2i (VCD,                y_prev - VCD + VCW);
-          glVertex2i (VCD,                y_prev - VCD);
-          glVertex2i (gport->width,       y_prev - VCD);
-          glVertex2i (gport->width,       y_prev - VCD + VCW);
-          glVertex2i (gport->width - VCD, y_prev - VCD + VCW);
-          glVertex2i (gport->width - VCD, y_prev - VCD);
-          glVertex2i (x_prev - VCD,       0);
-          glVertex2i (x_prev - VCD,       VCD);
-          glVertex2i (x_prev - VCD + VCW, VCD);
-          glVertex2i (x_prev - VCD + VCW, 0);
-          glVertex2i (x_prev - VCD,       gport->height - VCD);
-          glVertex2i (x_prev - VCD,       gport->height);
-          glVertex2i (x_prev - VCD + VCW, gport->height);
-          glVertex2i (x_prev - VCD + VCW, gport->height - VCD);
+          glVertex3i (0,                  y_prev - VCD,        z_prev);
+          glVertex3i (0,                  y_prev - VCD + VCW,  z_prev);
+          glVertex3i (VCD,                y_prev - VCD + VCW,  z_prev);
+          glVertex3i (VCD,                y_prev - VCD,        z_prev);
+          glVertex3i (gport->width,       y_prev - VCD,        z_prev);
+          glVertex3i (gport->width,       y_prev - VCD + VCW,  z_prev);
+          glVertex3i (gport->width - VCD, y_prev - VCD + VCW,  z_prev);
+          glVertex3i (gport->width - VCD, y_prev - VCD,        z_prev);
+          glVertex3i (x_prev - VCD,       0,                   z_prev);
+          glVertex3i (x_prev - VCD,       VCD,                 z_prev);
+          glVertex3i (x_prev - VCD + VCW, VCD,                 z_prev);
+          glVertex3i (x_prev - VCD + VCW, 0,                   z_prev);
+          glVertex3i (x_prev - VCD,       gport->height - VCD, z_prev);
+          glVertex3i (x_prev - VCD,       gport->height,       z_prev);
+          glVertex3i (x_prev - VCD + VCW, gport->height,       z_prev);
+          glVertex3i (x_prev - VCD + VCW, gport->height - VCD, z_prev);
         }
 #endif
 
       if (x >= 0 && show)
         {
-          glVertex2i (0,                  y - VCD);
-          glVertex2i (0,                  y - VCD + VCW);
-          glVertex2i (VCD,                y - VCD + VCW);
-          glVertex2i (VCD,                y - VCD);
-          glVertex2i (gport->width,       y - VCD);
-          glVertex2i (gport->width,       y - VCD + VCW);
-          glVertex2i (gport->width - VCD, y - VCD + VCW);
-          glVertex2i (gport->width - VCD, y - VCD);
-          glVertex2i (x - VCD,            0);
-          glVertex2i (x - VCD,            VCD);
-          glVertex2i (x - VCD + VCW,      VCD);
-          glVertex2i (x - VCD + VCW,      0);
-          glVertex2i (x - VCD,            gport->height - VCD);
-          glVertex2i (x - VCD,            gport->height);
-          glVertex2i (x - VCD + VCW,      gport->height);
-          glVertex2i (x - VCD + VCW,      gport->height - VCD);
+          glVertex3i (0,                  y - VCD,             z);
+          glVertex3i (0,                  y - VCD + VCW,       z);
+          glVertex3i (VCD,                y - VCD + VCW,       z);
+          glVertex3i (VCD,                y - VCD,             z);
+          glVertex3i (gport->width,       y - VCD,             z);
+          glVertex3i (gport->width,       y - VCD + VCW,       z);
+          glVertex3i (gport->width - VCD, y - VCD + VCW,       z);
+          glVertex3i (gport->width - VCD, y - VCD,             z);
+          glVertex3i (x - VCD,            0,                   z);
+          glVertex3i (x - VCD,            VCD,                 z);
+          glVertex3i (x - VCD + VCW,      VCD,                 z);
+          glVertex3i (x - VCD + VCW,      0,                   z);
+          glVertex3i (x - VCD,            gport->height - VCD, z);
+          glVertex3i (x - VCD,            gport->height,       z);
+          glVertex3i (x - VCD + VCW,      gport->height,       z);
+          glVertex3i (x - VCD + VCW,      gport->height - VCD, z);
         }
 
       glEnd ();
@@ -683,9 +685,10 @@ ghid_show_crosshair (gboolean show)
     {
       x_prev = x;
       y_prev = y;
+      z_prev = z;
     }
   else
-    x_prev = y_prev = -1;
+    x_prev = y_prev = z_prev = -1;
 
   glDisable (GL_COLOR_LOGIC_OP);
 }
@@ -1165,6 +1168,11 @@ ghid_port_drawing_area_expose_event_cb (GtkWidget * widget,
   hidgl_flush_triangles (&buffer);
   glPopMatrix ();
 
+  /* Just prod the drawing code so the current depth gets set to
+     the right value for the layer we are editing */
+  gui->set_layer (NULL, GetLayerGroupNumberByNumber (INDEXOFCURRENT), 0);
+  gui->set_layer (NULL, SL_FINISHED, 0);
+
   ghid_draw_grid ();
 
   hidgl_init_triangle_array (&buffer);
