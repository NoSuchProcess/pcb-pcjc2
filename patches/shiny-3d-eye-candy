Bottom: 85605fba8953394ce0cd60fc88023eda76b12ce9
Top:    b48dddc04c8e45a3b42ac713a31d3d0cf355bfc1
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2009-10-22 14:43:07 +0100

Shiny 3D eye-candy

Experiments in progress - don't expect this to work yet!


---

diff --git a/src/draw.c b/src/draw.c
index 7e17cb9..0923586 100644
--- a/src/draw.c
+++ b/src/draw.c
@@ -309,6 +309,10 @@ hole_callback (const BoxType * b, void *cl)
 {
   PinTypePtr pin = (PinTypePtr) b;
   int plated = cl ? *(int *) cl : -1;
+
+  if (!TEST_FLAG (SQUAREFLAG,pin))
+    return;
+
   switch (plated)
     {
     case -1:
@@ -373,6 +377,30 @@ PrintAssembly (const BoxType * drawn_area, int side_group, int swap_ident)
   SWAP_IDENT = save_swap;
 }
 
+static int
+via_callback (const BoxType * b, void *cl)
+{
+  PinTypePtr via = (PinTypePtr) b;
+  DrawPlainVia (via, False);
+  return 1;
+}
+
+static int
+pin_callback (const BoxType * b, void *cl)
+{
+  DrawPlainPin ((PinTypePtr) b, False);
+  return 1;
+}
+
+static int
+pad_callback (const BoxType * b, void *cl)
+{
+  PadTypePtr pad = (PadTypePtr) b;
+  if (FRONT (pad))
+    DrawPad (pad, 0);
+  return 1;
+}
+
 /* ---------------------------------------------------------------------------
  * initializes some identifiers for a new zoom factor and redraws whole screen
  */
@@ -461,6 +489,20 @@ DrawEverything (BoxTypePtr drawn_area)
 		}
 	    }
 	  gui->set_layer (NULL, SL (FINISHED, 0), 0);
+	  if (gui->gui) {
+            /* draw element pins */
+            if (PCB->PinOn || doing_assy)
+              {
+                r_search (PCB->Data->pin_tree, drawn_area, NULL, pin_callback, NULL);
+//                r_search (PCB->Data->pin_tree, drawn_area, NULL, hole_callback, NULL);
+              }
+            /* draw vias */
+            if (PCB->ViaOn || doing_assy)
+              {
+                r_search (PCB->Data->via_tree, drawn_area, NULL, via_callback, NULL);
+//                r_search (PCB->Data->via_tree, drawn_area, NULL, hole_callback, NULL);
+              }
+          }
 	}
     }
   if (TEST_FLAG (CHECKPLANESFLAG, PCB) && gui->gui)
@@ -468,7 +510,14 @@ DrawEverything (BoxTypePtr drawn_area)
 
   /* Draw pins, pads, vias below silk */
   if (gui->gui)
-    DrawTop (drawn_area);
+    {
+      if (!Settings.ShowSolderSide)
+        gui->set_layer ("topsilk", SL (SILK, TOP), 0);
+      else
+        gui->set_layer ("bottomsilk", SL (SILK, BOTTOM), 0);
+      gui->set_layer (NULL, SL (FINISHED, 0), 0);
+      DrawTop (drawn_area);
+    }
   else
     {
       HoleCountStruct hcs;
@@ -627,30 +676,6 @@ DrawEMark (ElementTypePtr e, LocationType X, LocationType Y,
   
 }
 
-static int
-via_callback (const BoxType * b, void *cl)
-{
-  PinTypePtr via = (PinTypePtr) b;
-  DrawPlainVia (via, False);
-  return 1;
-}
-
-static int
-pin_callback (const BoxType * b, void *cl)
-{
-  DrawPlainPin ((PinTypePtr) b, False);
-  return 1;
-}
-
-static int
-pad_callback (const BoxType * b, void *cl)
-{
-  PadTypePtr pad = (PadTypePtr) b;
-  if (FRONT (pad))
-    DrawPad (pad, 0);
-  return 1;
-}
-
 /* ---------------------------------------------------------------------------
  * draws pins pads and vias
  */
@@ -668,10 +693,10 @@ DrawTop (const BoxType * screen)
   if (PCB->ViaOn || doing_assy)
     {
       r_search (PCB->Data->via_tree, screen, NULL, via_callback, NULL);
-      r_search (PCB->Data->via_tree, screen, NULL, hole_callback, NULL);
+//      r_search (PCB->Data->via_tree, screen, NULL, hole_callback, NULL);
     }
   if (PCB->PinOn || doing_assy)
-    r_search (PCB->Data->pin_tree, screen, NULL, hole_callback, NULL);
+      r_search (PCB->Data->pin_tree, screen, NULL, hole_callback, NULL);
 }
 
 struct pin_info
@@ -1100,7 +1125,12 @@ DrawPinOrViaLowLevel (PinTypePtr Ptr, Boolean drawHole)
 	}
       else
 	{
-	  gui->fill_circle (Output.fgGC, Ptr->X, Ptr->Y, Ptr->Thickness / 2);
+	  gui->set_line_cap (Output.fgGC, Round_Cap);
+	  gui->set_line_width (Output.fgGC, (Ptr->Thickness - Ptr->DrillingHole) / 2);
+	  gui->draw_arc (Output.fgGC, Ptr->X, Ptr->Y,
+			 (Ptr->Thickness + Ptr->DrillingHole) / 4,
+                         (Ptr->Thickness + Ptr->DrillingHole) / 4, 0, 360);
+//          gui->fill_circle (Output.fgGC, Ptr->X, Ptr->Y, Ptr->Thickness / 2);
 	}
     }
 
diff --git a/src/hid/gtk/gui-pinout-preview.c b/src/hid/gtk/gui-pinout-preview.c
index 89a3563..fbb89de 100644
--- a/src/hid/gtk/gui-pinout-preview.c
+++ b/src/hid/gtk/gui-pinout-preview.c
@@ -211,7 +211,7 @@ ghid_pinout_preview_expose (GtkWidget * widget, GdkEventExpose * ev)
   glOrtho (0, widget->allocation.width, widget->allocation.height, 0, -100000, 100000);
   glMatrixMode (GL_MODELVIEW);
   glLoadIdentity ();
-  glTranslatef (0.0f, 0.0f, -Z_NEAR);
+//  glTranslatef (0.0f, 0.0f, -Z_NEAR);
 
   glClearColor (gport->bg_color.red / 65535.,
                 gport->bg_color.green / 65535.,
