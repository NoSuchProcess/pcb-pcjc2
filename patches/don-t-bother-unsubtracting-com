Bottom: f7ac833393efb34184f8ec2f6235df597ea882f8
Top:    69f85640719a428336a4481e544b3fb75102f238
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2008-09-30 02:20:03 +0100

Don't bother unsubtracting complex polygons when doing incremental updates

Since the polygon is re-cleared against any objects existing within the
bounding box of the update region, there is no point wasting CPU cycles
intersecting a more complex polygon than necessary. Just take the UNION
of the polygon being unsubtracted, and the bounding box of the hole to
be filed in.


---

diff --git a/src/polygon.c b/src/polygon.c
index 9c65716..5bed963 100644
--- a/src/polygon.c
+++ b/src/polygon.c
@@ -65,6 +65,8 @@ RCSID ("$Id$");
 
 #define ROUND(x) ((long)(((x) >= 0 ? (x) + 0.5  : (x) - 0.5)))
 
+#define UNSUBTRACT_BLOAT 50
+
 /* ---------------------------------------------------------------------------
  * local prototypes
  */
@@ -643,6 +645,13 @@ PinPoly (PinType * pin, BDimension thick, BDimension clear)
   return CirclePoly (pin->X, pin->Y, size);
 }
 
+POLYAREA *
+BoxPolyBloated (BoxType *box, BDimension bloat)
+{
+  return RectPoly (box->X1 - bloat, box->X2 + bloat,
+                   box->Y1 - bloat, box->Y2 + bloat);
+}
+
 /* remove the pin clearance from the polygon */
 static int
 SubtractPin (DataType * d, PinType * pin, LayerType * l, PolygonType * p)
@@ -912,7 +921,7 @@ UnsubtractPin (PinType * pin, LayerType * l, PolygonType * p)
   POLYAREA *np;
 
   /* overlap a bit to prevent gaps from rounding errors */
-  np = PinPoly (pin, pin->Thickness, pin->Clearance * 1.1);
+  np = BoxPolyBloated (&pin->BoundingBox, UNSUBTRACT_BLOAT);
 
   if (!np)
     return 0;
@@ -926,12 +935,15 @@ UnsubtractPin (PinType * pin, LayerType * l, PolygonType * p)
 static int
 UnsubtractArc (ArcType * arc, LayerType * l, PolygonType * p)
 {
-  POLYAREA *np = NULL;
+  POLYAREA *np;
 
   if (!TEST_FLAG (CLEARLINEFLAG, arc))
     return 0;
-  /* overlap a bit to prevent notches from rounding errors */
-  if (!(np = ArcPoly (arc, arc->Thickness + arc->Clearance + 100)))
+
+  /* overlap a bit to prevent gaps from rounding errors */
+  np = BoxPolyBloated (&arc->BoundingBox, UNSUBTRACT_BLOAT);
+
+  if (!np)
     return 0;
   if (!Unsubtract (np, p))
     return 0;
@@ -942,12 +954,15 @@ UnsubtractArc (ArcType * arc, LayerType * l, PolygonType * p)
 static int
 UnsubtractLine (LineType * line, LayerType * l, PolygonType * p)
 {
-  POLYAREA *np = NULL;
+  POLYAREA *np;
 
   if (!TEST_FLAG (CLEARLINEFLAG, line))
     return 0;
+
   /* overlap a bit to prevent notches from rounding errors */
-  if (!(np = LinePoly (line, line->Thickness + line->Clearance + 100)))
+  np = BoxPolyBloated (&line->BoundingBox, UNSUBTRACT_BLOAT);
+
+  if (!np)
     return 0;
   if (!Unsubtract (np, p))
     return 0;
@@ -959,11 +974,14 @@ static int
 UnsubtractText (TextType * text, LayerType * l, PolygonType * p)
 {
   POLYAREA *np;
-  const BoxType *b = &text->BoundingBox;
 
   if (!TEST_FLAG (CLEARLINEFLAG, text))
     return 0;
-  if (!(np = RoundRect (b->X1, b->X2, b->Y1, b->Y2, PCB->Bloat + 100)))
+
+  /* overlap a bit to prevent notches from rounding errors */
+  np = BoxPolyBloated (&text->BoundingBox, UNSUBTRACT_BLOAT);
+
+  if (!np)
     return -1;
   if (!Unsubtract (np, p))
     return 0;
@@ -974,20 +992,11 @@ UnsubtractText (TextType * text, LayerType * l, PolygonType * p)
 static int
 UnsubtractPad (PadType * pad, LayerType * l, PolygonType * p)
 {
-  POLYAREA *np = NULL;
+  POLYAREA *np;
+
+  /* overlap a bit to prevent notches from rounding errors */
+  np = BoxPolyBloated (&pad->BoundingBox, UNSUBTRACT_BLOAT);
 
-  if (TEST_FLAG (SQUAREFLAG, pad))
-    {
-      if (!
-          (np = SquarePadPoly (pad, pad->Thickness + pad->Clearance + 100)))
-        return 0;
-    }
-  else
-    {
-      if (!
-          (np = LinePoly ((LineType *) pad, pad->Thickness + pad->Clearance + 100)))
-        return 0;
-    }
   if (!np)
     return 0;
   if (!Unsubtract (np, p))
diff --git a/src/polygon.h b/src/polygon.h
index 64eeea1..2c78e94 100644
--- a/src/polygon.h
+++ b/src/polygon.h
@@ -51,6 +51,7 @@ POLYAREA * OctagonPoly(LocationType x, LocationType y, BDimension radius);
 POLYAREA * LinePoly(LineType *l, BDimension thick);
 POLYAREA * ArcPoly(ArcType *l, BDimension thick);
 POLYAREA * PinPoly(PinType *l, BDimension thick, BDimension clear);
+POLYAREA * BoxPolyBloated (BoxType *box, BDimension radius);
 void frac_circle (PLINE *, LocationType, LocationType, Vector, int);
 int InitClip(DataType *d, LayerType *l, PolygonType *p);
 void RestoreToPolygon(DataType *, int, void *, void *);
