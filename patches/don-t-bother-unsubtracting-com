Bottom: f7ac833393efb34184f8ec2f6235df597ea882f8
Top:    57d63cdee3be381b4496f0b9648dc5c4e746a45a
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2008-09-30 02:20:03 +0100

Don't bother unsubtracting complex polygons when doing incremental updates

Since the polygon is re-cleared against any objects existing within the
bounding box of the update region, there is no point wasting CPU cycles
intersecting a more complex polygon than necessary. Just take the UNION
of the polygon being unsubtracted, and the bounding box of the hole to
be filed in.


---

diff --git a/src/polygon.c b/src/polygon.c
index 9c65716..75bf0c4 100644
--- a/src/polygon.c
+++ b/src/polygon.c
@@ -910,9 +910,12 @@ static int
 UnsubtractPin (PinType * pin, LayerType * l, PolygonType * p)
 {
   POLYAREA *np;
+  BoxType *bound;
 
   /* overlap a bit to prevent gaps from rounding errors */
-  np = PinPoly (pin, pin->Thickness, pin->Clearance * 1.1);
+//  np = PinPoly (pin, pin->Thickness, pin->Clearance * 1.1);
+  bound = &pin->BoundingBox;
+  np = RectPoly (bound->X1, bound->X2, bound->Y1, bound->Y2);
 
   if (!np)
     return 0;
@@ -927,11 +930,15 @@ static int
 UnsubtractArc (ArcType * arc, LayerType * l, PolygonType * p)
 {
   POLYAREA *np = NULL;
+  BoxType *bound;
 
   if (!TEST_FLAG (CLEARLINEFLAG, arc))
     return 0;
-  /* overlap a bit to prevent notches from rounding errors */
-  if (!(np = ArcPoly (arc, arc->Thickness + arc->Clearance + 100)))
+
+  bound = &arc->BoundingBox;
+  np = RectPoly (bound->X1, bound->X2, bound->Y1, bound->Y2);
+
+  if (!np)
     return 0;
   if (!Unsubtract (np, p))
     return 0;
@@ -943,11 +950,16 @@ static int
 UnsubtractLine (LineType * line, LayerType * l, PolygonType * p)
 {
   POLYAREA *np = NULL;
+  BoxType *bound;
 
   if (!TEST_FLAG (CLEARLINEFLAG, line))
     return 0;
+
+  bound = &line->BoundingBox;
+  np = RectPoly (bound->X1, bound->X2, bound->Y1, bound->Y2);
+
   /* overlap a bit to prevent notches from rounding errors */
-  if (!(np = LinePoly (line, line->Thickness + line->Clearance + 100)))
+  if (!np)
     return 0;
   if (!Unsubtract (np, p))
     return 0;
@@ -959,11 +971,15 @@ static int
 UnsubtractText (TextType * text, LayerType * l, PolygonType * p)
 {
   POLYAREA *np;
-  const BoxType *b = &text->BoundingBox;
+  BoxType *bound;
 
   if (!TEST_FLAG (CLEARLINEFLAG, text))
     return 0;
-  if (!(np = RoundRect (b->X1, b->X2, b->Y1, b->Y2, PCB->Bloat + 100)))
+
+  bound = &text->BoundingBox;
+  np = RectPoly (bound->X1, bound->X2, bound->Y1, bound->Y2);
+
+  if (!np)
     return -1;
   if (!Unsubtract (np, p))
     return 0;
@@ -975,19 +991,11 @@ static int
 UnsubtractPad (PadType * pad, LayerType * l, PolygonType * p)
 {
   POLYAREA *np = NULL;
+  BoxType *bound;
+
+  bound = &pad->BoundingBox;
+  np = RectPoly (bound->X1, bound->X2, bound->Y1, bound->Y2);
 
-  if (TEST_FLAG (SQUAREFLAG, pad))
-    {
-      if (!
-          (np = SquarePadPoly (pad, pad->Thickness + pad->Clearance + 100)))
-        return 0;
-    }
-  else
-    {
-      if (!
-          (np = LinePoly ((LineType *) pad, pad->Thickness + pad->Clearance + 100)))
-        return 0;
-    }
   if (!np)
     return 0;
   if (!Unsubtract (np, p))
