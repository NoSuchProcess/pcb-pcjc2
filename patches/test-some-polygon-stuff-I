Bottom: 7d2bc2ae2f791334f778a516c39094ffba18466d
Top:    5cf783fcffefe75921125b982ac90f46ae7080de
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2009-11-15 23:20:40 +0000

Test some polygon stuff


---

diff --git a/src/polygon1.c b/src/polygon1.c
index ed38594..b369960 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -2033,6 +2033,7 @@ M_POLYAREA_update_primary (jmp_buf * e, POLYAREA ** pieces,
   int del_inside = 0;
   int del_outside = 0;
   int finished;
+  int everything_holes;
 
   if (a == NULL)
     return;
@@ -2070,6 +2071,7 @@ M_POLYAREA_update_primary (jmp_buf * e, POLYAREA ** pieces,
 	{
 	  anext = a->f;
 	  finished = (anext == *pieces);
+	  everything_holes = 0;
 
 	  /* Test the outer contour first, as we may need to remove all children */
 
@@ -2091,6 +2093,9 @@ M_POLYAREA_update_primary (jmp_buf * e, POLYAREA ** pieces,
 	      /* a->contours now points to the remaining holes */
 	      poly_DelContour (&curc);
 
+	      everything_holes = 1;
+
+#if 1
 	      if (a->contours != NULL)
 		{
 		  /* Find the end of the list of holes */
@@ -2108,6 +2113,7 @@ M_POLYAREA_update_primary (jmp_buf * e, POLYAREA ** pieces,
 	      poly_Free (&a);	/* NB: Sets a to NULL */
 
 	      continue;
+#endif
 	    }
 
 	  /* Loop whilst we find INSIDE contours to delete */
@@ -2150,6 +2156,25 @@ M_POLYAREA_update_primary (jmp_buf * e, POLYAREA ** pieces,
 	    }
 	  /* End check for deleted holes */
 
+	  if (everything_holes)
+	    {
+	      if (a->contours != NULL)
+		{
+		  /* Find the end of the list of holes */
+		  curc = a->contours;
+		  while (curc->next != NULL)
+		    curc = curc->next;
+
+		  /* Take the holes and prepend to the holes queue */
+		  curc->next = *holes;
+		  *holes = a->contours;
+		  a->contours = NULL;
+		}
+
+	      remove_polyarea (pieces, a);
+	      poly_Free (&a);	/* NB: Sets a to NULL */
+	    }
+
 	  /* If we deleted all the pieces of the polyarea, *pieces is NULL */
 	}
       while ((a = anext), *pieces != NULL && !finished);
