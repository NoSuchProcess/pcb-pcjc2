Bottom: f10d15930d523af1419d9012771d689ad04528d2
Top:    33dbffcb180ed0ce33c0c7a5d45b842ed7c85ad1
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-09-05 13:10:03 +0100

hid/gtk: Use accessors to get the vbox from GtkDialog

In GTK3.0, direct access to dialog->vbox will be impossible.


---

diff --git a/src/hid/gtk/ghid-route-style-selector.c b/src/hid/gtk/ghid-route-style-selector.c
index ad8c26f..4bc4748 100644
--- a/src/hid/gtk/ghid-route-style-selector.c
+++ b/src/hid/gtk/ghid-route-style-selector.c
@@ -160,7 +160,9 @@ ghid_route_style_selector_edit_dialog (GHidRouteStyleSelector *rss)
   struct _dialog dialog_data;
   GtkCellRenderer *renderer = gtk_cell_renderer_text_new ();
   GtkWidget *window = gtk_widget_get_toplevel (GTK_WIDGET (rss));
-  GtkWidget *dialog, *vbox, *hbox, *sub_vbox, *table;
+  GtkWidget *dialog;
+  GtkWidget *content_area;
+  GtkWidget *vbox, *hbox, *sub_vbox, *table;
   GtkWidget *label, *select_box, *check_box;
 
   /* Build dialog */
@@ -178,10 +180,10 @@ ghid_route_style_selector_edit_dialog (GHidRouteStyleSelector *rss)
   gtk_cell_layout_set_attributes (GTK_CELL_LAYOUT(select_box), renderer,
                                   "text", TEXT_COL, NULL);
 
-  vbox = GTK_DIALOG (dialog)->vbox;
+  content_area = gtk_dialog_get_content_area (GTK_DIALOG (dialog));
 
   hbox = gtk_hbox_new (FALSE, 4);
-  gtk_box_pack_start (GTK_BOX (vbox), hbox, TRUE, TRUE, 4);
+  gtk_box_pack_start (GTK_BOX (content_area), hbox, TRUE, TRUE, 4);
   vbox = gtk_vbox_new (FALSE, 4);
   gtk_box_pack_start (GTK_BOX (hbox), vbox, TRUE, TRUE, 4);
 
diff --git a/src/hid/gtk/gtkhid-main.c b/src/hid/gtk/gtkhid-main.c
index 6df553e..e201d3c 100644
--- a/src/hid/gtk/gtkhid-main.c
+++ b/src/hid/gtk/gtkhid-main.c
@@ -717,6 +717,7 @@ static struct progress_dialog *
 make_progress_dialog (void)
 {
   struct progress_dialog *pd;
+  GtkWidget *content_area;
   GtkWidget *alignment;
   GtkWidget *vbox;
 
@@ -751,8 +752,8 @@ make_progress_dialog (void)
   gtk_alignment_set_padding (GTK_ALIGNMENT (alignment), 8, 8, 8, 8);
   gtk_container_add (GTK_CONTAINER (alignment), vbox);
 
-  gtk_box_pack_start (GTK_BOX (GTK_DIALOG (pd->dialog)->vbox),
-                      alignment, true, true, 0);
+  content_area = gtk_dialog_get_content_area (GTK_DIALOG (pd->dialog));
+  gtk_box_pack_start (GTK_BOX (content_area), alignment, true, true, 0);
 
   gtk_widget_show_all (alignment);
 
@@ -984,6 +985,7 @@ attributes_delete_callback (GtkWidget *w, void *v)
 static void
 ghid_attributes (char *owner, AttributeListType *attrs)
 {
+  GtkWidget *content_area;
   int response;
 
   attributes_list = attrs;
@@ -1001,8 +1003,9 @@ ghid_attributes (char *owner, AttributeListType *attrs)
 
   attr_table = gtk_table_new (attrs->Number, 3, 0);
 
-  gtk_box_pack_start (GTK_BOX (GTK_DIALOG (attributes_dialog)->vbox), attr_table, FALSE, FALSE, 0);
-    
+  content_area = gtk_dialog_get_content_area (GTK_DIALOG (attributes_dialog));
+  gtk_box_pack_start (GTK_BOX (content_area), attr_table, FALSE, FALSE, 0);
+
   gtk_widget_show (attr_table);
 
   ghid_attributes_revert ();
diff --git a/src/hid/gtk/gui-dialog-print.c b/src/hid/gtk/gui-dialog-print.c
index ce98f13..13da605 100644
--- a/src/hid/gtk/gui-dialog-print.c
+++ b/src/hid/gtk/gui-dialog-print.c
@@ -106,7 +106,9 @@ ghid_attribute_dialog (HID_Attribute * attrs,
 		       const char * title,
 		       const char * descr)
 {
-  GtkWidget *dialog, *main_vbox, *vbox, *vbox1, *hbox, *entry;
+  GtkWidget *dialog;
+  GtkWidget *content_area;
+  GtkWidget *main_vbox, *vbox, *vbox1, *hbox, *entry;
   GtkWidget *combo;
   GtkWidget *widget;
   GHidPort *out = &ghid_port;
@@ -124,9 +126,11 @@ ghid_attribute_dialog (HID_Attribute * attrs,
 					GTK_STOCK_OK, GTK_RESPONSE_OK, NULL);
   gtk_window_set_wmclass (GTK_WINDOW (dialog), "PCB_attribute_editor", "PCB");
 
+  content_area = gtk_dialog_get_content_area (GTK_DIALOG (dialog));
+
   main_vbox = gtk_vbox_new (FALSE, 6);
   gtk_container_set_border_width (GTK_CONTAINER (main_vbox), 6);
-  gtk_container_add (GTK_CONTAINER (GTK_DIALOG (dialog)->vbox), main_vbox);
+  gtk_container_add (GTK_CONTAINER (content_area), main_vbox);
 
   vbox = ghid_category_vbox (main_vbox, descr != NULL ? descr : "",
 			     4, 2, TRUE, TRUE);
@@ -424,6 +428,7 @@ ghid_dialog_print (HID *hid)
 void
 ghid_dialog_export (void)
 {
+  GtkWidget *content_area;
   GtkWidget *vbox, *button;
   GHidPort *out = &ghid_port;
   int i;
@@ -442,9 +447,11 @@ ghid_dialog_export (void)
 					       GTK_RESPONSE_CANCEL, NULL);
   gtk_window_set_wmclass (GTK_WINDOW (export_dialog), "PCB_Export", "PCB");
 
+  content_area = gtk_dialog_get_content_area (GTK_DIALOG (export_dialog));
+
   vbox = gtk_vbox_new (FALSE, 6);
   gtk_container_set_border_width (GTK_CONTAINER (vbox), 6);
-  gtk_container_add (GTK_CONTAINER (GTK_DIALOG (export_dialog)->vbox), vbox);
+  gtk_container_add (GTK_CONTAINER (content_area), vbox);
 
   /* 
    * Iterate over all the export HID's and build up a dialog box that
diff --git a/src/hid/gtk/gui-dialog.c b/src/hid/gtk/gui-dialog.c
index c079464..93cea47 100644
--- a/src/hid/gtk/gui-dialog.c
+++ b/src/hid/gtk/gui-dialog.c
@@ -48,7 +48,9 @@ RCSID ("$Id$");
 gchar *
 ghid_dialog_input (const char * prompt, const char * initial)
 {
-  GtkWidget *dialog, *vbox, *label, *entry;
+  GtkWidget *dialog;
+  GtkWidget *content_area;
+  GtkWidget *vbox, *label, *entry;
   gchar *string;
   gboolean response;
   GHidPort *out = &ghid_port;
@@ -75,7 +77,9 @@ ghid_dialog_input (const char * prompt, const char * initial)
 
   gtk_entry_set_activates_default (GTK_ENTRY (entry), TRUE);
   gtk_box_pack_start_defaults (GTK_BOX (vbox), entry);
-  gtk_container_add (GTK_CONTAINER (GTK_DIALOG (dialog)->vbox), vbox);
+
+  content_area = gtk_dialog_get_content_area (GTK_DIALOG (dialog));
+  gtk_container_add (GTK_CONTAINER (content_area), vbox);
   gtk_widget_show_all (dialog);
 
   response = gtk_dialog_run (GTK_DIALOG (dialog));
@@ -109,7 +113,9 @@ ghid_dialog_about (void)
 gint
 ghid_dialog_confirm_all (gchar * all_message)
 {
-  GtkWidget *dialog, *label, *vbox;
+  GtkWidget *dialog;
+  GtkWidget *content_area;
+  GtkWidget *label, *vbox;
   gint response;
   GHidPort *out = &ghid_port;
 
@@ -122,7 +128,8 @@ ghid_dialog_confirm_all (gchar * all_message)
 					"Sequence OK",
 					GUI_DIALOG_RESPONSE_ALL, NULL);
 
-  vbox = ghid_framed_vbox (GTK_DIALOG (dialog)->vbox, NULL, 6, FALSE, 4, 6);
+  content_area = gtk_dialog_get_content_area (GTK_DIALOG (dialog));
+  vbox = ghid_framed_vbox (content_area, NULL, 6, FALSE, 4, 6);
 
   label = gtk_label_new (all_message);
   gtk_box_pack_start (GTK_BOX (vbox), label, FALSE, FALSE, 3);
diff --git a/src/hid/gtk/gui-library-window.c b/src/hid/gtk/gui-library-window.c
index 2cda08e..8234899 100644
--- a/src/hid/gtk/gui-library-window.c
+++ b/src/hid/gtk/gui-library-window.c
@@ -785,7 +785,7 @@ library_window_constructor (GType type,
 {
   GObject *object;
   GhidLibraryWindow *library_window;
-
+  GtkWidget *content_area;
   GtkWidget *hpaned, *notebook;
   GtkWidget *libview;
   GtkWidget *preview;
@@ -806,7 +806,7 @@ library_window_constructor (GType type,
 		"modal", FALSE, "window-position", GTK_WIN_POS_NONE,
 		/* GtkDialog */
 		"has-separator", TRUE, NULL);
-  g_object_set (GTK_DIALOG (library_window)->vbox,
+  g_object_set (gtk_dialog_get_content_area (GTK_DIALOG (library_window)),
 		"homogeneous", FALSE, NULL);
 
   /* horizontal pane containing selection and preview */
@@ -853,9 +853,9 @@ library_window_constructor (GType type,
 
   gtk_paned_pack2 (GTK_PANED (hpaned), frame, FALSE, FALSE);
 
-  /* add the hpaned to the dialog vbox */
-  gtk_box_pack_start (GTK_BOX (GTK_DIALOG (library_window)->vbox), hpaned,
-		      TRUE, TRUE, 0);
+  /* add the hpaned to the dialog content area */
+  content_area = gtk_dialog_get_content_area (GTK_DIALOG (library_window));
+  gtk_box_pack_start (GTK_BOX (content_area), hpaned, TRUE, TRUE, 0);
   gtk_widget_show_all (hpaned);
 
 
diff --git a/src/hid/gtk/gui-utils.c b/src/hid/gtk/gui-utils.c
index db61f77..e3852d6 100644
--- a/src/hid/gtk/gui-utils.c
+++ b/src/hid/gtk/gui-utils.c
@@ -670,6 +670,7 @@ ghid_dialog_report (gchar * title, gchar * message)
 {
   GtkWidget *top_win;
   GtkWidget *dialog;
+  GtkWidget *content_area;
   GtkWidget *scrolled;
   GtkWidget *vbox, *vbox1;
   GtkWidget *label;
@@ -690,10 +691,11 @@ ghid_dialog_report (gchar * title, gchar * message)
 			    GTK_OBJECT (dialog));
   gtk_window_set_wmclass (GTK_WINDOW (dialog), "PCB_Dialog", "PCB");
 
+  content_area = gtk_dialog_get_content_area (GTK_DIALOG (dialog));
+
   vbox = gtk_vbox_new (FALSE, 0);
   gtk_container_set_border_width (GTK_CONTAINER (vbox), 8);
-  gtk_box_pack_start (GTK_BOX (GTK_DIALOG (dialog)->vbox), vbox,
-		      FALSE, FALSE, 0);
+  gtk_box_pack_start (GTK_BOX (content_area), vbox, FALSE, FALSE, 0);
 
   label = gtk_label_new (message);
   gtk_label_set_justify (GTK_LABEL (label), GTK_JUSTIFY_LEFT);
