Bottom: 07296553d1a305d1747a19dc0c51888f52a2f1d3
Top:    21c66440fac07a7f32442f4ef2cfb362a31b083d
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-12-24 01:13:54 +0000

DEBUG FIND CRASH


---

diff --git a/src/hid/gtk/gui-netlist-window.c b/src/hid/gtk/gui-netlist-window.c
index 51192c6..722783e 100644
--- a/src/hid/gtk/gui-netlist-window.c
+++ b/src/hid/gtk/gui-netlist-window.c
@@ -340,6 +340,9 @@ net_model_create (void)
   int path_depth;
   int try_depth;
 
+  printf ("net_model_create for NetlistLib %p, %i entries starting at %p\n",
+          &PCB->NetlistLib, PCB->NetlistLib.MenuN, PCB->NetlistLib.Menu);
+
   store = gtk_tree_store_new (N_NET_COLUMNS,
 			      G_TYPE_STRING, G_TYPE_STRING, G_TYPE_POINTER);
 
@@ -421,6 +424,7 @@ net_model_create (void)
 			NET_ENABLED_COLUMN, menu->flag ? "" : "*",
 			NET_NAME_COLUMN, path_segments[path_depth - 1],
 			NET_LIBRARY_COLUMN, menu, -1);
+    printf ("  Adding net %s at %p\n", path_segments[path_depth - 1], menu);
     g_strfreev (path_segments);
   }
   END_LOOP;
@@ -1009,6 +1013,7 @@ ghid_netlist_window_update (gboolean init_nodes)
 static gint
 GhidNetlistChanged (int argc, char **argv, Coord x, Coord y)
 {
+  printf ("GhidNetlistChanged called\n");
   loading_new_netlist = TRUE;
   ghid_netlist_window_update (TRUE);
   gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (disable_all_button),
diff --git a/src/mymem.c b/src/mymem.c
index f7939e7..9a1134b 100644
--- a/src/mymem.c
+++ b/src/mymem.c
@@ -427,15 +427,23 @@ LibraryMenuTypePtr
 GetLibraryMenuMemory (LibraryTypePtr lib)
 {
   LibraryMenuTypePtr menu = lib->Menu;
+  int incr = STEP_LIBRARYMENU;
 
   /* realloc new memory if necessary and clear it */
   if (lib->MenuN >= lib->MenuMax)
     {
-      lib->MenuMax += STEP_LIBRARYMENU;
+      if (lib->MenuMax == 0)
+        incr = 1;
+      else if (lib->MenuMax == 1)
+        incr = 1;
+      else
+        incr = 1;
+      lib->MenuMax += incr;
       menu = (LibraryMenuTypePtr)realloc (menu, lib->MenuMax * sizeof (LibraryMenuType));
+      if (menu != lib->Menu)
+        printf ("Reallocing LibraryMenuMemory, moved from %p to %p\n", lib->Menu, menu);
       lib->Menu = menu;
-      memset (menu + lib->MenuN, 0,
-	      STEP_LIBRARYMENU * sizeof (LibraryMenuType));
+      memset (menu + lib->MenuN, 0, incr * sizeof (LibraryMenuType));
     }
   return (menu + lib->MenuN++);
 }
diff --git a/src/pcbtest.sh.in b/src/pcbtest.sh.in
index 516a526..d2779ba 100755
--- a/src/pcbtest.sh.in
+++ b/src/pcbtest.sh.in
@@ -84,7 +84,9 @@ if test $use_gdb = yes ; then
 	cat > $tmpf << EOF
 set args $arg_list
 EOF
-	exec gdb -x $tmpf ./pcb
+        export G_SLICE=all
+        valgrind ./pcb $arg_list
+	#exec gdb -x $tmpf ./pcb
 	rm -fr $tmpd
 else
 	exec @TOP_BUILDDIR@/src/pcb $arg_list
diff --git a/src/rtree.c b/src/rtree.c
index 6558427..ef22984 100644
--- a/src/rtree.c
+++ b/src/rtree.c
@@ -459,9 +459,9 @@ __r_search (struct rtree_node *node, const BoxType * query, r_arg * arg)
 {
   assert (node);
   /** assert that starting_region is well formed */
-  assert (query->X1 < query->X2 && query->Y1 < query->Y2);
-  assert (node->box.X1 < query->X2 && node->box.X2 > query->X1 &&
-          node->box.Y1 < query->Y2 && node->box.Y2 > query->Y1);
+//  assert (query->X1 < query->X2 && query->Y1 < query->Y2);
+//  assert (node->box.X1 < query->X2 && node->box.X2 > query->X1 &&
+//          node->box.Y1 < query->Y2 && node->box.Y2 > query->Y1);
 #ifdef SLOW_ASSERTS
   /** assert that node is well formed */
   assert (__r_node_is_good (node));
