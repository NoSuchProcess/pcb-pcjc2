Bottom: 3a0e9ef4c6aab64612aefa5ac0b2fefafb8b98c9
Top:    8bd33a082dd467546b8e168612d4bfd1d6d89e2b
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2009-02-08 02:04:33 +0000

More work on trying to speed up polygon algebra






---

diff --git a/src/polygon1.c b/src/polygon1.c
index 74e2d02..579368c 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -873,7 +873,8 @@ M_POLYAREA_intersect2 (jmp_buf * e, POLYAREA * afst, POLYAREA * bfst, int add)
     {
       do
 	{
-	  if (a->contours->xmax >= b->contours->xmin &&
+	  if (a->contours &&
+              a->contours->xmax >= b->contours->xmin &&
 	      a->contours->ymax >= b->contours->ymin &&
 	      a->contours->xmin <= b->contours->xmax &&
 	      a->contours->ymin <= b->contours->ymax)
@@ -946,85 +947,52 @@ M_POLYAREA_intersect (jmp_buf * e, POLYAREA * afst, POLYAREA * bfst, int add)
   while (add && (a = a->f) != afst);
 }				/* M_POLYAREA_intersect */
 
+
 static void
-M_POLYAREA_intersect_separate_isected (jmp_buf * e, POLYAREA *afst,
-                                                    POLYAREA *bfst,
-                                                    PLINE **a_isected,
-                                                    PLINE **b_isected)
+M_POLYAREA_separate_isected (POLYAREA **afst, PLINE **a_isected)
 {
-  POLYAREA *a = afst, *b = bfst;
-  PLINE *curcA, *curcB, *prev, *next;
-  CVCList *the_list = NULL;
+  POLYAREA **a = afst;
+  PLINE *curc, *prev, *next;
 
-  if (a == NULL || b == NULL) {
-    printf ("a or b is null in M_POLYAREA_intersect_separate_isected\n");
-    error (err_bad_parm);
-  }
+  assert (a != NULL);
 
-  do { /* LOOP OVER B's POLYAREA PIECES */
+//  printf ("M_POLYAREA_separate_isected: afst %p, *afst %p\n", afst, *afst);
 
-    do { /* LOOP OVER A's POLYAREA PIECES */
-      if (a->contours &&
-          a->contours->xmax >= b->contours->xmin &&
-          a->contours->ymax >= b->contours->ymin &&
-          a->contours->xmin <= b->contours->xmax &&
-          a->contours->ymin <= b->contours->ymax &&
-          intersect (e, a, b, TRUE)) {
-        error (err_no_memory);
-      }
-    } while ((a = a->f) != afst);
-
-    /* LOOP OVER THE CONTOURS OF THE CURRENT B POLYAREA */
+  do { /* LOOP OVER THE POLYAREA PIECES */
+    /* LOOP OVER THE CONTOURS OF THE CURRENT POLYAREA PIECE */
     prev = NULL;
-    for (curcB = b->contours; curcB != NULL; curcB = next) {
-      next = curcB->next;
+    for (curc = (*a)->contours; curc != NULL; curc = next) {
+      next = curc->next;
 
-      if (curcB->Flags.status != ISECTED) {
-        prev = curcB;
+      if (curc->Flags.status != ISECTED) {
+        prev = curc;
         continue;
       }
 
-      if (!(the_list = add_descriptors (curcB, 'B', the_list)))
-        error (err_no_memory);
-
-#if 0
-      /* Unlink from the b contour list, and prepend to the b_isected list */
-      if (prev == NULL)
-        b->contours = next;
-      else
-        prev->next = next;
-      curcB->next = *b_isected;
-      *b_isected = curcB;
-      r_delete_entry (b->contour_tree, (BoxType *)curcB);
-#endif
-    }
-  } while ((b = b->f) != bfst);
-
-  do { /* LOOP OVER A's POLYAREA PIECES */
-    /* LOOP OVER THE CONTOURS OF THE CURRENT A POLYAREA */
-    prev = NULL;
-    for (curcA = a->contours; curcA != NULL; curcA = curcA->next) {
-      next = curcA->next;
-
-      if (curcA->Flags.status != ISECTED) {
-        prev = curcA;
-        continue;
-      }
-
-      if (!(the_list = add_descriptors (curcA, 'A', the_list)))
-        error (err_no_memory);
-
       /* Unlink from the a contour list, and prepend to the a_isected list */
-      if (prev == NULL)
-        a->contours = next;
-      else
+      if (prev == NULL) {
+        (*a)->contours = next;
+        if (next == NULL) {
+//          printf ("M_POLYAREA_separate_isected: Delete the whole polygon piece\n");
+          (*a)->b->f = (*a)->f;
+          (*a)->f->b = (*a)->b;
+          (*a)->f = (*a)->b = (*a);
+          poly_Free (a);
+        }
+      } else {
         prev->next = next;
-      curcA->next = *a_isected;
-      *a_isected = curcA;
-      r_delete_entry (a->contour_tree, (BoxType *)curcA);
+      }
+      curc->next = *a_isected;
+      *a_isected = curc;
+      if (prev != NULL && next != NULL) /* Only remove the r-tree entry if we didn't delete the r-tree above */
+        r_delete_entry ((*a)->contour_tree, (BoxType *)curc); /* Actually, we might want to keep those for a bit */
     }
-  } while ((a = a->f) != afst);
-} /* M_POLYAREA_intersect_separate_isected */
+    if (*a == NULL) {
+//      printf ("M_POLYAREA_separate_isected: Deleted _all_ of the existing polygon pieces\n");
+      break;
+    }
+  } while (*(a = &(*a)->f) != *afst);
+} /* M_POLYAREA_separate_isected */
 
 static inline int
 cntrbox_inside (PLINE * c1, PLINE * c2)
@@ -1400,8 +1368,8 @@ PutContour (jmp_buf * e, PLINE * cntr, POLYAREA ** contours, PLINE ** holes,
   assert (cntr->Count > 2);
   cntr->next = NULL;
 
-  printf ("PutContour %p, %p, %p, %p, %p, %p\n",
-          cntr, contours, holes, owner, parent, parent_contour);
+//  printf ("PutContour %p, %p, %p, %p, %p, %p\n",
+//          cntr, contours, holes, owner, parent, parent_contour);
 
   if (cntr->Flags.orient == PLF_DIR)
     {
@@ -1791,7 +1759,7 @@ Collect1 (jmp_buf * e, VNODE *cur, DIRECTION dir, POLYAREA **contours, PLINE **
 	    DEBUGP ("adding contour with %d verticies and direction %c\n",
 		    p->Count, p->Flags.orient ? 'F' : 'B');
 #endif
-            printf ("1: ");
+//            printf ("1: ");
 	    PutContour (e, p, contours, holes, NULL, NULL, NULL);
 	  }
 	else
@@ -1828,12 +1796,11 @@ static int
 cntr_Collect_avoid_self (jmp_buf * e, PLINE ** A, POLYAREA ** contours, PLINE ** holes,
 	                 int action, POLYAREA *owner)
 {
-  PLINE *tmprev;
+//  PLINE *tmprev;
   int put_contour = 0;
   int inv_contour = 0;
 
-  printf ("cntr_Collect_avoid_self %p, %p, %p, %i, %p\n",
-          A, contours, holes, action, owner);
+//  printf ("cntr_Collect_avoid_self %p, %p, %p, %i, %p\n", A, contours, holes, action, owner);
 
   switch (action) {
     case PBO_ISECT:
@@ -1875,8 +1842,8 @@ cntr_Collect (jmp_buf * e, PLINE ** A, POLYAREA ** contours, PLINE ** holes,
 {
   PLINE *tmprev;
 
-  printf ("cntr_Collect %p, %p, %p, %i, %p, %p, %p\n",
-          A, contours, holes, action, owner, parent, parent_contour);
+//  printf ("cntr_Collect %p, %p, %p, %i, %p, %p, %p\n",
+//          A, contours, holes, action, owner, parent, parent_contour);
 
   if ((*A)->Flags.status == ISECTED)
     {
@@ -1907,7 +1874,7 @@ cntr_Collect (jmp_buf * e, PLINE ** A, POLYAREA ** contours, PLINE ** holes,
 	      /* disappear this contour (rtree entry remove int PutContour) */
 	      *A = tmprev->next;
 	      tmprev->next = NULL;
-              printf ("2: ");
+//              printf ("2: ");
 	      PutContour (e, tmprev, contours, holes, owner, NULL, NULL);
 	      return TRUE;
 	    }
@@ -1920,11 +1887,12 @@ cntr_Collect (jmp_buf * e, PLINE ** A, POLYAREA ** contours, PLINE ** holes,
 	      *A = tmprev->next;
 	      tmprev->next = NULL;
 	      poly_InvContour (tmprev);
-              printf ("3: ");
+//              printf ("3: ");
 	      PutContour (e, tmprev, contours, holes, owner, NULL, NULL);
 	      return TRUE;
 	    }
-	  break;
+          /* BUG? Should we put this contour non-inverted if it is outside B? */
+	  /* break; */ /* Fall through */
 	case PBO_UNITE:
 	case PBO_SUB:
 	  if ((*A)->Flags.status == OUTSIDE)
@@ -1933,7 +1901,7 @@ cntr_Collect (jmp_buf * e, PLINE ** A, POLYAREA ** contours, PLINE ** holes,
 	      /* disappear this contour (rtree entry remove int PutContour) */
 	      *A = tmprev->next;
 	      tmprev->next = NULL;
-              printf ("4: ");
+//              printf ("4: ");
 	      PutContour (e, tmprev, contours, holes, owner, parent, parent_contour);
 	      return TRUE;
 	    }
@@ -1965,7 +1933,7 @@ M_B_AREA_Collect_separated (jmp_buf * e, PLINE * bfst, POLYAREA ** contours,
           next = cur;
           tmp->next = NULL;
           tmp->Flags.status = UNKNWN;
-          printf ("5: ");
+//          printf ("5: ");
           PutContour (e, tmp, contours, holes, NULL, NULL, NULL); /* b */
           break;
         case PBO_UNITE:
@@ -1981,7 +1949,7 @@ M_B_AREA_Collect_separated (jmp_buf * e, PLINE * bfst, POLYAREA ** contours,
           next = cur;
           tmp->next = NULL;
           tmp->Flags.status = UNKNWN;
-          printf ("6: ");
+//          printf ("6: ");
           PutContour (e, tmp, contours, holes, NULL, NULL, NULL); /* b */
           break;
         case PBO_ISECT:
@@ -2021,7 +1989,7 @@ M_B_AREA_Collect (jmp_buf * e, POLYAREA * bfst, POLYAREA ** contours,
 		next = cur;
 		tmp->next = NULL;
 		tmp->Flags.status = UNKNWN;
-                printf ("5: ");
+//                printf ("5: ");
 		PutContour (e, tmp, contours, holes, NULL, NULL, NULL); /* b */
 		break;
 	      case PBO_UNITE:
@@ -2038,7 +2006,7 @@ M_B_AREA_Collect (jmp_buf * e, POLYAREA * bfst, POLYAREA ** contours,
 		next = cur;
 		tmp->next = NULL;
 		tmp->Flags.status = UNKNWN;
-                printf ("6: ");
+//                printf ("6: ");
 		PutContour (e, tmp, contours, holes, NULL, NULL, NULL); /* b */
 		break;
 	      case PBO_ISECT:
@@ -2052,39 +2020,105 @@ M_B_AREA_Collect (jmp_buf * e, POLYAREA * bfst, POLYAREA ** contours,
 
 
 static void
-M_POLYAREA_Collect_avoid_self (jmp_buf * e, POLYAREA * afst, POLYAREA ** contours,
-                               PLINE ** holes, int action, BOOLp maybe)
+M_POLYAREA_update_primary (jmp_buf * e, POLYAREA ** pieces,
+                           PLINE ** holes, int action)
 {
-  POLYAREA *a = afst;
-  PLINE **cur, **next;
+  POLYAREA **a = pieces;
+  PLINE **cur, **next, *prev;
+  int del_contour = 0;
 
-  printf ("M_POLYAREA_Collect %p, %p, %p, %i, %i\n",
-          afst, contours, holes, action, maybe);
+//  printf ("M_POLYAREA_update_primary %p, %p, %i\n", pieces, holes, action);
+
+  if (*a == NULL) {
+//    printf ("M_POLYAREA_update_primary: No polygon pieces to play with\n");
+    return;
+  }
 
-  assert (a != NULL);
   /* now the non-intersect parts are collected in temp/holes */
   do {
-    /* Take care of the first contour - so we know if we
-     * can shortcut reparenting some of its children
-     */
-    cur = &a->contours;
-    if (*cur != NULL) {
+//    printf ("Playing with a piece of the polygon\n");
+    prev = NULL;
+    for (cur = &(*a)->contours; *cur != NULL; cur = next) {
       next = &((*cur)->next);
-      /* if we disappear a contour, don't advance twice */
-      printf ("1: ");
-      if (cntr_Collect_avoid_self (e, cur, contours, holes, action, a)) {
+
+      switch (action) {
+        case PBO_ISECT:
+//          printf ("PBO_ISECT: Delete any contours OUTSIDE b\n");
+          if ((*cur)->Flags.status == INSIDE) {
+            // put_contour = 1;
+          } else {
+            del_contour = 1;
+          }
+          break;
+
+        case PBO_XOR: /* NOT IMPLEMENTED OR USED */
+//          printf ("PBO_XOR: Invert any which are INSIDE B\n");
+          if ((*cur)->Flags.status == INSIDE) {
+            // put_contour = 1;
+            // inv_contour = 1;
+          }
+          /* BUG? Should we put this contour non-inverted if it is outside B? */
+          if ((*cur)->Flags.status == OUTSIDE) {
+            // put_contour = 1;
+          }
+          break;
+
+        case PBO_UNITE:
+//          printf ("PBO_UNITE: Delete any contours INSIDE B (B's contour replaces it)\n");
+          if ((*cur)->Flags.status == OUTSIDE) {
+            // put_contour = 1;
+          } else {
+            del_contour = 1;
+          }
+          break;
+
+        case PBO_SUB:
+//          printf ("PBO_SUB: Delete any contours INSIDE B (B's contour marks it for deletion\n");
+          if ((*cur)->Flags.status == OUTSIDE) {
+            // put_contour = 1;
+          } else {
+            del_contour = 1;
+          }
+          break;
+      }
+
+      if (del_contour) {
+        /* Delete a contour */
+
+        if (prev != NULL && next != NULL) /* Only remove the r-tree entry if we won't delete it below */
+          r_delete_entry ((*a)->contour_tree, (BoxType *)cur);
+        poly_DelContour (cur);
+
+        if (prev == NULL) {
+          (*a)->contours = *next;
+          if (*next == NULL) {
+            printf ("M_POLYAREA_update_primary: Delete the whole polygon piece\n");
+            (*a)->b->f = (*a)->f;
+            (*a)->f->b = (*a)->b;
+            (*a)->f = (*a)->b = (*a);
+            poly_Free (a);
+          }
+        } else {
+          prev->next = *next;
+        }
+        /* if we disappear a contour, don't advance twice */
         next = cur;
+      } else {
+        /* Note the item we just didn't delete as the next candidate for having its "next" pointer adjusted */
+        prev = *cur;
       }
-      cur = next;
-    }
-    for ( ; *cur != NULL; cur = next) {
-      next = &((*cur)->next);
+
       /* if we disappear a contour, don't advance twice */
-      printf ("2: ");
-      if (cntr_Collect_avoid_self (e, cur, contours, holes, action, a))
-        next = cur;
+//      if (cntr_Collect_avoid_self (e, cur, pieces, holes, action, a))
+//        next = cur;
     }
-  } while ((a = a->f) != afst);
+
+    if (*a == NULL) {
+      printf ("M_POLYAREA_update_primary: Deleted _all_ of the existing polygon pieces\n");
+      break;
+    }
+  } while (*(a = &(*a)->f) != *pieces);
+//  printf ("Bye!\n");
 }
 
 
@@ -2095,8 +2129,7 @@ M_POLYAREA_Collect_separated (jmp_buf * e, PLINE * afst, POLYAREA ** contours,
   POLYAREA *parent = NULL; /* Quiet GCC warning */
   PLINE **cur, **next;
 
-  printf ("M_POLYAREA_Collect %p, %p, %p, %i, %i\n",
-          afst, contours, holes, action, maybe);
+//  printf ("M_POLYAREA_Collect_separated %p, %p, %p, %i, %i\n", afst, contours, holes, action, maybe);
 
   assert (a != NULL);
 
@@ -2107,7 +2140,7 @@ M_POLYAREA_Collect_separated (jmp_buf * e, PLINE * afst, POLYAREA ** contours,
   if (*cur != NULL) {
     next = &((*cur)->next);
     /* if we disappear a contour, don't advance twice */
-    printf ("1: ");
+//    printf ("1: ");
     if (cntr_Collect (e, cur, contours, holes, action, NULL, NULL, NULL)) {
       parent = *contours;
       next = cur;
@@ -2119,7 +2152,7 @@ M_POLYAREA_Collect_separated (jmp_buf * e, PLINE * afst, POLYAREA ** contours,
   for ( ; *cur != NULL; cur = next) {
     next = &((*cur)->next);
     /* if we disappear a contour, don't advance twice */
-    printf ("2: ");
+//    printf ("2: ");
     if (cntr_Collect (e, cur, contours, holes, action, NULL, NULL, NULL))
       next = cur;
   }
@@ -2133,8 +2166,7 @@ M_POLYAREA_Collect (jmp_buf * e, POLYAREA * afst, POLYAREA ** contours,
   POLYAREA *parent = NULL; /* Quiet GCC warning */
   PLINE **cur, **next, *parent_contour;
 
-  printf ("M_POLYAREA_Collect %p, %p, %p, %i, %i\n",
-          afst, contours, holes, action, maybe);
+//  printf ("M_POLYAREA_Collect %p, %p, %p, %i, %i\n", afst, contours, holes, action, maybe);
 
   assert (a != NULL);
   while ((a = a->f) != afst);
@@ -2154,7 +2186,7 @@ M_POLYAREA_Collect (jmp_buf * e, POLYAREA * afst, POLYAREA ** contours,
         {
           next = &((*cur)->next);
           /* if we disappear a contour, don't advance twice */
-          printf ("1: ");
+//          printf ("1: ");
           if (cntr_Collect (e, cur, contours, holes, action, a, NULL, NULL))
             {
               parent = *contours;
@@ -2170,7 +2202,7 @@ M_POLYAREA_Collect (jmp_buf * e, POLYAREA * afst, POLYAREA ** contours,
           /* if we disappear a contour, don't advance twice */
           if (*cur == parent_contour)
             printf ("WTF??\n");
-          printf ("2: ");
+//          printf ("2: ");
           if (cntr_Collect (e, cur, contours, holes, action, a, parent,
                             (*cur == parent_contour) ? NULL : parent_contour))
             next = cur;
@@ -2194,8 +2226,8 @@ Touching (POLYAREA * a, POLYAREA * b)
       if (!poly_Valid (b))
 	return -1;
 #endif
-      M_POLYAREA_intersect (&e, a, b, False);
-//      M_POLYAREA_intersect2 (&e, a, b, False);
+//      M_POLYAREA_intersect (&e, a, b, False);
+      M_POLYAREA_intersect2 (&e, a, b, False);
 
       if (M_POLYAREA_label (a, b, TRUE))
 	return TRUE;
@@ -2235,7 +2267,7 @@ poly_Boolean (const POLYAREA * a_org, const POLYAREA * b_org,
       M_POLYAREA_label (a, b, FALSE);
       M_POLYAREA_label (b, a, FALSE);
 
-      printf ("1:");
+//      printf ("1:");
       M_POLYAREA_Collect (&e, a, res, &holes, action, b->f == b
 			  && !b->contours->next
 			  && b->contours->Flags.status != ISECTED);
@@ -2267,7 +2299,6 @@ poly_Boolean_free (POLYAREA * ai, POLYAREA * bi, POLYAREA ** res, int action)
 {
   POLYAREA *a = ai, *b = bi;
   PLINE *a_isected = NULL;
-  PLINE *b_isected = NULL;
   PLINE *p, *holes = NULL;
   jmp_buf e;
   int code;
@@ -2299,6 +2330,11 @@ poly_Boolean_free (POLYAREA * ai, POLYAREA * bi, POLYAREA ** res, int action)
 	}
     }
 
+  if (a->contours == NULL) {
+    fprintf (stderr, "A has no contours bye!\n");
+    return -1;
+  }
+
   if ((code = setjmp (e)) == 0)
     {
 #ifdef DEBUG
@@ -2306,29 +2342,44 @@ poly_Boolean_free (POLYAREA * ai, POLYAREA * bi, POLYAREA ** res, int action)
       assert (poly_Valid (b));
 #endif
 
-      M_POLYAREA_intersect_separate_isected (&e, a, b, &a_isected, &b_isected);
       /* intersect needs to make a list of the contours in a and b which are relevant */
       /* Not sure if this needs to include any wholey containing, but non-intersecting contours */
+      M_POLYAREA_intersect (&e, a, b, TRUE);
 
       /* We could speed things up a little here if we only processed the relevant contours */
+      M_POLYAREA_label (a, b, FALSE);
+      M_POLYAREA_label (b, a, FALSE);
+
+      *res = a;
+      M_POLYAREA_separate_isected (res, &a_isected);
+
+      M_POLYAREA_update_primary (&e, res, &holes, action);
+      M_POLYAREA_Collect_separated (&e, a_isected, res, &holes, action, FALSE);
+      M_B_AREA_Collect (&e, b, res, &holes, action);
+      poly_Free (&b);
+
+#if 0
       M_POLYAREA_label_separated (a_isected, b, FALSE);
       M_POLYAREA_label (a, b, FALSE);
       M_POLYAREA_label_non_isected (b, a, FALSE);
       M_POLYAREA_label_isected (b, a_isected, FALSE);
+#endif
 
-      /* And speed things up _A LOT_ here by only processing the relevant contours, specifically
-         keeping the source "a" as a starting point for the output polygon */
 //      M_POLYAREA_Collect (&e, a, res, &holes, action, b->f == b
 //			  && !b->contours->next
 //			  && b->contours->Flags.status != ISECTED);
-//      *res = a;
+
+#if 0
+      /* And speed things up _A LOT_ here by only processing the relevant
+         contours, specifically keeping the source "a" as a starting point
+         for the output polygon */
       M_POLYAREA_Collect_separated (&e, a_isected, res, &holes, action, FALSE);
       M_POLYAREA_Collect (&e, a, res, &holes, action, FALSE);
-//      M_POLYAREA_Collect_avoid_self (&e, a, res, &holes, action, FALSE);
       poly_Free (&a);
       M_B_AREA_Collect (&e, b, res, &holes, action);
 //      M_B_AREA_Collect_separated (&e, b_isected, res, &holes, action);
       poly_Free (&b);
+#endif
 
       InsertHoles (&e, *res, &holes);
     }
@@ -2399,7 +2450,7 @@ poly_AndSubtract_free (POLYAREA * ai, POLYAREA * bi,
       M_POLYAREA_label (a, b, FALSE);
       M_POLYAREA_label (b, a, FALSE);
 
-      printf ("3:");
+//      printf ("3:");
       M_POLYAREA_Collect (&e, a, aandb, &holes, PBO_ISECT, FALSE);
       InsertHoles (&e, *aandb, &holes);
       assert (poly_Valid (*aandb));
@@ -2412,7 +2463,7 @@ poly_AndSubtract_free (POLYAREA * ai, POLYAREA * bi,
       holes = NULL;
       clear_marks (a);
       clear_marks (b);
-      printf ("4:");
+//      printf ("4:");
       M_POLYAREA_Collect (&e, a, aminusb, &holes, PBO_SUB, FALSE);
       InsertHoles (&e, *aminusb, &holes);
       poly_Free (&a);
