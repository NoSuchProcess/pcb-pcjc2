Bottom: 335652c037c611042518784cfbb9c4fadce8d782
Top:    bea6449b58d7f770abfa647dcd838d330217180d
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-04-23 16:16:12 +0100

draw.c: Remove unused parameter from various calls:

  DrawObject
  DrawVia
  DrawViaName
  DrawLine
  DrawArc
  DrawText
  DrawRegularText
  DrawPolygon
  DrawElement
  DrawElementPackage
  DrawElementPackageLowLevel
  DrawElementName
  DrawElementPinsAndPads
  DrawRat
  DrawPin
  DrawPinName
  DrawPad
  DrawPadName


---

diff --git a/src/action.c b/src/action.c
index e5a463f..cc1355e 100644
--- a/src/action.c
+++ b/src/action.c
@@ -1151,7 +1151,7 @@ NotifyMode (void)
 	    /* always re-draw it since I'm too lazy
 	     * to tell if a selected flag changed
 	     */
-	    DrawElement (element, 0);
+	    DrawElement (element);
 	    Draw ();
 	    hid_actionl ("Report", "Object", NULL);
 	  }
@@ -1594,7 +1594,7 @@ NotifyMode (void)
 		    r_insert_entry (PCB->Data->name_tree[i],
 				    (BoxType *) & (e->Name[i]), 0);
 		    if (i == save_n)
-		      DrawElementName (e, 0);
+		      DrawElementName (e);
 		  }
 	      }
 	  }
@@ -2718,7 +2718,7 @@ ActionDisplay (int argc, char **argv, int childX, int childY)
 	    }
 	  ELEMENT_LOOP (PCB->Data);
 	  {
-	    DrawElementName (element, 0);
+	    DrawElementName (element);
 	  }
 	  END_LOOP;
 	  Draw ();
@@ -4772,7 +4772,7 @@ ActionToggleHideName (int argc, char **argv, int x, int y)
 		AddObjectToFlagUndoList (type, ptr1, ptr2, ptr3);
 		EraseElementName ((ElementTypePtr) ptr2);
 		TOGGLE_FLAG (HIDENAMEFLAG, (ElementTypePtr) ptr2);
-		DrawElementName ((ElementTypePtr) ptr2, 0);
+		DrawElementName ((ElementTypePtr) ptr2);
 		Draw ();
 		IncrementUndoSerialNumber ();
 	      }
@@ -4793,7 +4793,7 @@ ActionToggleHideName (int argc, char **argv, int x, int y)
 					   element, element);
 		  EraseElementName (element);
 		  TOGGLE_FLAG (HIDENAMEFLAG, element);
-		  DrawElementName (element, 0);
+		  DrawElementName (element);
 		  changed = true;
 		}
 	    }
diff --git a/src/change.c b/src/change.c
index 21e2bd9..32c84c8 100644
--- a/src/change.c
+++ b/src/change.c
@@ -899,7 +899,7 @@ ChangeElementSize (ElementTypePtr Element)
   END_LOOP;
   if (PCB->ElementOn)
     {
-      DrawElement (Element, 0);
+      DrawElement (Element);
     }
   if (changed)
     return (Element);
@@ -931,7 +931,7 @@ ChangeElementNameSize (ElementTypePtr Element)
 	r_insert_entry (PCB->Data->name_tree[n], (BoxType *) text, 0);
       }
       END_LOOP;
-      DrawElementName (Element, 0);
+      DrawElementName (Element);
       return (Element);
     }
   return (NULL);
@@ -1035,7 +1035,7 @@ ChangeElementText (PCBType *pcb, DataType *data, ElementTypePtr Element, int whi
 		  & Element->Name[which].BoundingBox, 0);
 
   if (pcb && which == NAME_INDEX (pcb))
-    DrawElementName (Element, 0);
+    DrawElementName (Element);
 
   return old;
 }
@@ -1106,7 +1106,7 @@ ChangeElementSide (ElementTypePtr Element, LocationType yoff)
   EraseElement (Element);
   AddObjectToMirrorUndoList (ELEMENT_TYPE, Element, Element, Element, yoff);
   MirrorElementCoordinates (PCB->Data, Element, yoff);
-  DrawElement (Element, 0);
+  DrawElement (Element);
   return (true);
 }
 
diff --git a/src/copy.c b/src/copy.c
index ee831b9..8bb7f6f 100644
--- a/src/copy.c
+++ b/src/copy.c
@@ -305,13 +305,13 @@ CopyElement (ElementTypePtr Element)
   AddObjectToCreateUndoList (ELEMENT_TYPE, element, element, element);
   if (PCB->ElementOn && (FRONT (element) || PCB->InvisibleObjectsOn))
     {
-      DrawElementName (element, 0);
-      DrawElementPackage (element, 0);
+      DrawElementName (element);
+      DrawElementPackage (element);
       didDraw = true;
     }
   if (PCB->PinOn)
     {
-      DrawElementPinsAndPads (element, 0);
+      DrawElementPinsAndPads (element);
       didDraw = true;
     }
 #ifdef DEBUG
diff --git a/src/draw.c b/src/draw.c
index d6dce62..b9baa0f 100644
--- a/src/draw.c
+++ b/src/draw.c
@@ -94,7 +94,7 @@ static void DrawLineLowLevel (LineTypePtr);
 static void DrawRegularText (LayerTypePtr, TextTypePtr, int);
 static void DrawPolygonLowLevel (PolygonTypePtr);
 static void DrawArcLowLevel (ArcTypePtr);
-static void DrawElementPackageLowLevel (ElementTypePtr Element, int);
+static void DrawElementPackageLowLevel (ElementTypePtr Element);
 static void DrawPlainPolygon (LayerTypePtr Layer, PolygonTypePtr Polygon);
 static void AddPart (void *);
 static void SetPVColor (PinTypePtr, int);
@@ -235,7 +235,7 @@ backE_callback (const BoxType * b, void *cl)
 
   if (!FRONT (element))
     {
-      DrawElementPackage (element, 0);
+      DrawElementPackage (element);
     }
   return 1;
 }
@@ -247,7 +247,7 @@ backN_callback (const BoxType * b, void *cl)
   ElementTypePtr element = (ElementTypePtr) text->Element;
 
   if (!FRONT (element) && !TEST_FLAG (HIDENAMEFLAG, element))
-    DrawElementName (element, 0);
+    DrawElementName (element);
   return 0;
 }
 
@@ -268,7 +268,7 @@ frontE_callback (const BoxType * b, void *cl)
 
   if (FRONT (element))
     {
-      DrawElementPackage (element, 0);
+      DrawElementPackage (element);
     }
   return 1;
 }
@@ -289,7 +289,7 @@ frontN_callback (const BoxType * b, void *cl)
   ElementTypePtr element = (ElementTypePtr) text->Element;
 
   if (FRONT (element) && !TEST_FLAG (HIDENAMEFLAG, element))
-    DrawElementName (element, 0);
+    DrawElementName (element);
   return 0;
 }
 
@@ -1252,7 +1252,7 @@ DrawArcLowLevel (ArcTypePtr Arc)
  * draws the package of an element
  */
 static void
-DrawElementPackageLowLevel (ElementTypePtr Element, int unused)
+DrawElementPackageLowLevel (ElementTypePtr Element)
 {
   /* draw lines, arcs, text and pins */
   ELEMENTLINE_LOOP (Element);
@@ -1622,18 +1622,18 @@ DrawPlainPolygon (LayerTypePtr Layer, PolygonTypePtr Polygon)
  * draws an element
  */
 void
-DrawElement (ElementTypePtr Element, int unused)
+DrawElement (ElementTypePtr Element)
 {
-  DrawElementPackage (Element, unused);
-  DrawElementName (Element, unused);
-  DrawElementPinsAndPads (Element, unused);
+  DrawElementPackage (Element);
+  DrawElementName (Element);
+  DrawElementPinsAndPads (Element);
 }
 
 /* ---------------------------------------------------------------------------
  * draws the name of an element
  */
 void
-DrawElementName (ElementTypePtr Element, int unused)
+DrawElementName (ElementTypePtr Element)
 {
   if (gui->gui && TEST_FLAG (HIDENAMESFLAG, PCB))
     return;
@@ -1654,7 +1654,7 @@ DrawElementName (ElementTypePtr Element, int unused)
  * draws the package of an element
  */
 void
-DrawElementPackage (ElementTypePtr Element, int unused)
+DrawElementPackage (ElementTypePtr Element)
 {
   /* set color and draw lines, arcs, text and pins */
   if (doing_pinout || doing_assy)
@@ -1665,14 +1665,14 @@ DrawElementPackage (ElementTypePtr Element, int unused)
     gui->set_color (Output.fgGC, PCB->ElementColor);
   else
     gui->set_color (Output.fgGC, PCB->InvisibleObjectsColor);
-  DrawElementPackageLowLevel (Element, unused);
+  DrawElementPackageLowLevel (Element);
 }
 
 /* ---------------------------------------------------------------------------
  * draw pins of an element
  */
 void
-DrawElementPinsAndPads (ElementTypePtr Element, int unused)
+DrawElementPinsAndPads (ElementTypePtr Element)
 {
   PAD_LOOP (Element);
   {
@@ -1934,7 +1934,7 @@ DrawObject (int type, void *ptr1, void *ptr2, int unused)
     case ELEMENT_TYPE:
       if (PCB->ElementOn &&
 	  (FRONT ((ElementTypePtr) ptr2) || PCB->InvisibleObjectsOn))
-	DrawElement ((ElementTypePtr) ptr2, 0);
+	DrawElement ((ElementTypePtr) ptr2);
       break;
     case RATLINE_TYPE:
       if (PCB->RatOn)
@@ -1951,7 +1951,7 @@ DrawObject (int type, void *ptr1, void *ptr2, int unused)
     case ELEMENTNAME_TYPE:
       if (PCB->ElementOn &&
 	  (FRONT ((ElementTypePtr) ptr2) || PCB->InvisibleObjectsOn))
-	DrawElementName ((ElementTypePtr) ptr1, 0);
+	DrawElementName ((ElementTypePtr) ptr1);
       break;
     }
 }
@@ -1983,7 +1983,7 @@ hid_expose_callback (HID * hid, BoxType * region, void *item)
   if (item)
     {
       doing_pinout = true;
-      DrawElement ((ElementTypePtr)item, 0);
+      DrawElement ((ElementTypePtr)item);
       doing_pinout = false;
     }
   else
diff --git a/src/move.c b/src/move.c
index 3ded0d0..5546d69 100644
--- a/src/move.c
+++ b/src/move.c
@@ -192,7 +192,7 @@ MoveElementName (ElementTypePtr Element)
 	  r_insert_entry (PCB->Data->name_tree[n], (BoxType *) text, 0);
       }
       END_LOOP;
-      DrawElementName (Element, 0);
+      DrawElementName (Element);
       Draw ();
     }
   else
@@ -222,8 +222,8 @@ MoveElement (ElementTypePtr Element)
     {
       EraseElement (Element);
       MoveElementLowLevel (PCB->Data, Element, DeltaX, DeltaY);
-      DrawElementName (Element, 0);
-      DrawElementPackage (Element, 0);
+      DrawElementName (Element);
+      DrawElementPackage (Element);
       didDraw = true;
     }
   else
@@ -234,7 +234,7 @@ MoveElement (ElementTypePtr Element)
     }
   if (PCB->PinOn)
     {
-      DrawElementPinsAndPads (Element, 0);
+      DrawElementPinsAndPads (Element);
       didDraw = true;
     }
   if (didDraw)
diff --git a/src/rotate.c b/src/rotate.c
index 9e19581..6ebc0f7 100644
--- a/src/rotate.c
+++ b/src/rotate.c
@@ -319,7 +319,7 @@ RotateElement (ElementTypePtr Element)
 {
   EraseElement (Element);
   RotateElementLowLevel (PCB->Data, Element, CenterX, CenterY, Number);
-  DrawElement (Element, 0);
+  DrawElement (Element);
   Draw ();
   return (Element);
 }
@@ -338,7 +338,7 @@ RotateElementName (ElementTypePtr Element)
     r_insert_entry (PCB->Data->name_tree[n], (BoxType *) text, 0);
   }
   END_LOOP;
-  DrawElementName (Element, 0);
+  DrawElementName (Element);
   Draw ();
   return (Element);
 }
diff --git a/src/select.c b/src/select.c
index 3e978bb..ce6b2ca 100644
--- a/src/select.c
+++ b/src/select.c
@@ -218,7 +218,7 @@ SelectObject (void)
 	  TOGGLE_FLAG (SELECTEDFLAG, text);
 	}
 	END_LOOP;
-	DrawElementName (element, 0);
+	DrawElementName (element);
 	break;
       }
 
@@ -252,11 +252,11 @@ SelectObject (void)
 	     PCB->InvisibleObjectsOn))
 	  if (PCB->ElementOn)
 	    {
-	      DrawElementName (element, 0);
-	      DrawElementPackage (element, 0);
+	      DrawElementName (element);
+	      DrawElementPackage (element);
 	    }
 	if (PCB->PinOn)
-	  DrawElementPinsAndPads (element, 0);
+	  DrawElementPinsAndPads (element);
 	break;
       }
     }
@@ -394,7 +394,7 @@ SelectBlock (BoxTypePtr Box, bool Flag)
 	      }
 	      END_LOOP;
 	      if (PCB->ElementOn)
-		DrawElementName (element, 0);
+		DrawElementName (element);
 	      changed = true;
 	    }
 	  if ((PCB->PinOn || !Flag) && ELEMENT_IN_BOX (element, Box))
@@ -428,7 +428,7 @@ SelectBlock (BoxTypePtr Box, bool Flag)
 		}
 		END_LOOP;
 		if (PCB->PinOn)
-		  DrawElement (element, 0);
+		  DrawElement (element);
 		changed = true;
 		gotElement = true;
 	      }
@@ -964,8 +964,8 @@ SelectObjectByName (int Type, char *Pattern, bool Flag)
 	      ASSIGN_FLAG (SELECTEDFLAG, Flag, text);
 	    }
 	    END_LOOP;
-	    DrawElementName (element, 0);
-	    DrawElement (element, 0);
+	    DrawElementName (element);
+	    DrawElement (element);
 	    changed = true;
 	  }
       }
diff --git a/src/undo.c b/src/undo.c
index b14e3ec..0c35fa8 100644
--- a/src/undo.c
+++ b/src/undo.c
@@ -591,7 +591,7 @@ UndoMirror (UndoListTypePtr Entry)
 	EraseElement (element);
       MirrorElementCoordinates (PCB->Data, element, Entry->Data.Move.DY);
       if (andDraw)
-	DrawElement (element, 0);
+	DrawElement (element);
       return (true);
     }
   Message ("hace Internal error: UndoMirror on object type %d\n", type);
