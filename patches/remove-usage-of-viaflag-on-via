Bottom: cb3bb45a40eeb62177b5e30d0f0a619962ad3931
Top:    edbddd22f9dcc0f354bf616adaaac8e02ed0adac
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2012-12-23 19:12:20 +0000

Remove usage of VIAFLAG on via objects.

Nowhere cares, so avoid the code to handle this. The only use of the
VIAFLAG now is for rats, where it is used to indicate a possible
connection to a polygon using a via.


---

diff --git a/src/buffer.c b/src/buffer.c
index d5cb7c8..1b45c96 100644
--- a/src/buffer.c
+++ b/src/buffer.c
@@ -878,7 +878,6 @@ SmashBufferElement (BufferType *Buffer)
   PIN_LOOP (element);
   {
     FlagType f = NoFlags ();
-    AddFlags (f, VIAFLAG);
     if (TEST_FLAG (HOLEFLAG, pin))
       AddFlags (f, HOLEFLAG);
 
@@ -981,7 +980,7 @@ ConvertBufferToElement (BufferType *Buffer)
       CreateNewPin (Element, via->X, via->Y, via->Thickness,
 		    via->Clearance, via->Mask, via->DrillingHole,
 		    NULL, via->Name, MaskFlags (via->Flags,
-						VIAFLAG | NOCOPY_FLAGS |
+						NOCOPY_FLAGS |
 						SELECTEDFLAG | WARNFLAG));
     else
       {
@@ -989,8 +988,8 @@ ConvertBufferToElement (BufferType *Buffer)
 	CreateNewPin (Element, via->X, via->Y, via->Thickness,
 		      via->Clearance, via->Mask, via->DrillingHole,
 		      NULL, num, MaskFlags (via->Flags,
-					    VIAFLAG | NOCOPY_FLAGS | SELECTEDFLAG
-					    | WARNFLAG));
+					    NOCOPY_FLAGS |
+					    SELECTEDFLAG | WARNFLAG));
       }
     hasParts = true;
   }
diff --git a/src/const.h b/src/const.h
index 66a583f..698eae4 100644
--- a/src/const.h
+++ b/src/const.h
@@ -119,7 +119,7 @@ the numeric value followed by the symbolic name.
 @item 0x0001 pin
 If set, this object is a pin.  This flag is for internal use only.
 @item 0x0002 via
-Likewise, for vias.
+Set on a rat if it should connect to a polygon with a via / pin and a thermal.
 @item 0x0004 found
 If set, this object has been found by @code{FindConnection()}.
 @item 0x0008 hole
@@ -183,7 +183,7 @@ Marker used internally to avoid revisiting an object.
 
 #define NOFLAG                  0x0000
 #define PINFLAG                 0x0001  /* is a pin */
-#define VIAFLAG                 0x0002  /* is a via */
+#define VIAFLAG                 0x0002  /* a rat should connect to a polygon with a via */
 #define FOUNDFLAG               0x0004  /* used by 'FindConnection()' */
 #define HOLEFLAG                0x0008  /* pin or via is only a hole */
 #define NOPASTEFLAG             0x0008  /* pad should not receive
diff --git a/src/create.c b/src/create.c
index 992c49e..617fc4e 100644
--- a/src/create.c
+++ b/src/create.c
@@ -274,7 +274,6 @@ CreateNewVia (DataType *Data,
   Via->Name = STRDUP (Name);
   Via->Flags = Flags;
   CLEAR_FLAG (WARNFLAG, Via);
-  SET_FLAG (VIAFLAG, Via);
   Via->ID = ID++;
 
   /* 
diff --git a/src/strflags.c b/src/strflags.c
index 3699c53..d803e7e 100644
--- a/src/strflags.c
+++ b/src/strflags.c
@@ -87,7 +87,7 @@ typedef struct
 
 static FlagBitsType object_flagbits[] = {
   { PINFLAG, N ("pin"), ALL_TYPES },
-  { VIAFLAG, N ("via"), ALL_TYPES },
+  { VIAFLAG, N ("via"), RATLINE_TYPES },
   { FOUNDFLAG, N ("found"), ALL_TYPES },
   { HOLEFLAG, N ("hole"), PIN_TYPES },
   { RATFLAG, N ("rat"), RATLINE_TYPE },
@@ -463,7 +463,7 @@ string_to_pcbflags (const char *flagstring,
  *
  * Note that this function knows a little about what kinds of flags
  * will be automatically set by parsing, so it won't (for example)
- * include the "via" flag for VIA_TYPEs because it knows those get
+ * include the "rat" flag for RATLINE_TYPEs because it knows those get
  * forcibly set when vias are parsed.
  */
 
@@ -483,9 +483,6 @@ common_flags_to_string (FlagType flags,
 #ifndef FLAG_TEST
   switch (object_type)
     {
-    case VIA_TYPE:
-      CLEAR_FLAG (VIAFLAG, &fh);
-      break;
     case RATLINE_TYPE:
       CLEAR_FLAG (RATFLAG, &fh);
       break;
