Bottom: 2848d53fc9b8d8ea91ce866ebbd9debc67f79d75
Top:    418067421d689a516f6e1fab3d97df2268b1b200
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2015-01-11 15:52:24 +0000

TMP


---

diff --git a/src/draw.c b/src/draw.c
index 3083038..87dbef5 100644
--- a/src/draw.c
+++ b/src/draw.c
@@ -1533,14 +1533,14 @@ draw_element (ElementType *element)
  */
 
 void
-hid_expose_callback (HID * hid, BoxType * region, void *item)
+hid_expose_callback (HID *hid, HID_DRAW *hid_draw, BoxType * region, void *item)
 {
   HID *old_gui = gui;
 
   gui = hid;
-  Output.fgGC = hid_draw_make_gc (hid->graphics);
-  Output.bgGC = hid_draw_make_gc (hid->graphics);
-  Output.pmGC = hid_draw_make_gc (hid->graphics);
+  Output.fgGC = hid_draw_make_gc (hid_draw);
+  Output.bgGC = hid_draw_make_gc (hid_draw);
+  Output.pmGC = hid_draw_make_gc (hid_draw);
 
   hid_draw_set_color (Output.pmGC, "erase");
   hid_draw_set_color (Output.bgGC, "drill");
diff --git a/src/hid.h b/src/hid.h
index ef6edb2..3123939 100644
--- a/src/hid.h
+++ b/src/hid.h
@@ -557,7 +557,7 @@ typedef enum
    Do *not* assume that the hid that is passed is the GUI hid.  This
    callback is also used for printing and exporting. */
   struct BoxType;
-  void hid_expose_callback (HID * hid_, struct BoxType *region_, void *item_);
+  void hid_expose_callback (HID *hid_, HID_DRAW *hid_draw, struct BoxType *region_, void *item_);
 
 /* This is initially set to a "no-gui" gui, and later reset by
    main. hid_expose_callback also temporarily set it for drawing. */
diff --git a/src/hid/common/extents.c b/src/hid/common/extents.c
index fa608fc..a0c9e9e 100644
--- a/src/hid/common/extents.c
+++ b/src/hid/common/extents.c
@@ -222,7 +222,7 @@ hid_get_extents (void *item)
   region.Y1 = -COORD_MAX - 1;
   region.X2 = COORD_MAX;
   region.Y2 = COORD_MAX;
-  hid_expose_callback (&extents_hid, &region, item);
+  hid_expose_callback (&extents_hid, &extents_graphcis, &region, item);
 
   return &box;
 }
diff --git a/src/hid/gcode/gcode.c b/src/hid/gcode/gcode.c
index 99b8653..e94cfbb 100644
--- a/src/hid/gcode/gcode.c
+++ b/src/hid/gcode/gcode.c
@@ -469,7 +469,7 @@ gcode_start_png_export ()
   linewidth = -1;
   lastbrush = (gdImagePtr)((void *) -1);
 
-  hid_expose_callback (&gcode_hid, &region, 0);
+  hid_expose_callback (&gcode_hid, &gcode_graphics, &region, 0);
 }
 
 static FILE *
diff --git a/src/hid/gerber/gerber.c b/src/hid/gerber/gerber.c
index 153b2e4..2d8dde4 100644
--- a/src/hid/gerber/gerber.c
+++ b/src/hid/gerber/gerber.c
@@ -682,11 +682,11 @@ gerber_do_export (HID_Attr_Val * options)
   lastgroup = -1;
   layer_list_idx = 0;
   finding_apertures = 1;
-  hid_expose_callback (&gerber_hid, &region, 0);
+  hid_expose_callback (&gerber_hid, &gerber_graphics, &region, 0);
 
   layer_list_idx = 0;
   finding_apertures = 0;
-  hid_expose_callback (&gerber_hid, &region, 0);
+  hid_expose_callback (&gerber_hid, &gerber_graphics, &region, 0);
 
   memcpy (LayerStack, saved_layer_stack, sizeof (LayerStack));
 
diff --git a/src/hid/gtk/gtkhid-gdk.c b/src/hid/gtk/gtkhid-gdk.c
index ff31cbe..c745cbe 100644
--- a/src/hid/gtk/gtkhid-gdk.c
+++ b/src/hid/gtk/gtkhid-gdk.c
@@ -801,7 +801,7 @@ redraw_region (GdkRectangle *rect)
 
   ghid_draw_bg_image();
 
-  hid_expose_callback (&ghid_hid, &region, 0);
+  hid_expose_callback (&ghid_hid, &ghid_graphics, &region, 0);
   ghid_draw_grid ();
 
   /* In some cases we are called with the crosshair still off */
@@ -1179,7 +1179,7 @@ ghid_pinout_preview_expose (GtkWidget *widget,
                       0, 0, allocation.width, allocation.height);
 
   /* call the drawing routine */
-  hid_expose_callback (&ghid_hid, NULL, pinout->element);
+  hid_expose_callback (&ghid_hid, &ghid_graphics, NULL, pinout->element);
 
   gport->drawable = save_drawable;
   gport->view = save_view;
@@ -1236,7 +1236,7 @@ ghid_render_pixmap (int cx, int cy, double zoom, int width, int height, int dept
   region.Y1 = MAX (0, MIN (PCB->MaxHeight, region.Y1));
   region.Y2 = MAX (0, MIN (PCB->MaxHeight, region.Y2));
 
-  hid_expose_callback (&ghid_hid, &region, NULL);
+  hid_expose_callback (&ghid_hid, &ghid_graphics, &region, NULL);
 
   gport->drawable = save_drawable;
   gport->view = save_view;
diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index 0d0d542..944e0be 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -1038,7 +1038,7 @@ ghid_drawing_area_expose_cb (GtkWidget *widget,
   ghid_draw_bg_image ();
 
   ghid_invalidate_current_gc ();
-  hid_expose_callback (&ghid_hid, &region, 0);
+  hid_expose_callback (&ghid_hid, &ghid_graphics, &region, 0);
   hidgl_flush_triangles (priv->hidgl);
 
   ghid_draw_grid (priv->crosshair_gc, &region);
@@ -1192,7 +1192,7 @@ ghid_pinout_preview_expose (GtkWidget *widget,
                 gport->view.flip_y ? gport->view.y0 - PCB->MaxHeight :
                                     -gport->view.y0, 0);
 
-  hid_expose_callback (&ghid_hid, NULL, pinout->element);
+  hid_expose_callback (&ghid_hid, &ghid_graphics, NULL, pinout->element);
   hidgl_flush_triangles (priv->hidgl);
   glPopMatrix ();
 
@@ -1306,7 +1306,7 @@ ghid_render_pixmap (int cx, int cy, double zoom, int width, int height, int dept
   region.Y1 = MAX (0, MIN (PCB->MaxHeight, region.Y1));
   region.Y2 = MAX (0, MIN (PCB->MaxHeight, region.Y2));
 
-  hid_expose_callback (&ghid_hid, &region, NULL);
+  hid_expose_callback (&ghid_hid, &ghid_graphics, &region, NULL);
   hidgl_flush_triangles (priv->hidgl);
   glPopMatrix ();
 
diff --git a/src/hid/lesstif/main.c b/src/hid/lesstif/main.c
index a5184a0..5b2f899 100644
--- a/src/hid/lesstif/main.c
+++ b/src/hid/lesstif/main.c
@@ -830,7 +830,7 @@ Benchmark (int argc, char **argv, Coord x, Coord y)
   do
     {
       XFillRectangle (display, pixmap, bg_gc, 0, 0, view_width, view_height);
-      hid_expose_callback (&lesstif_hid, &region, 0);
+      hid_expose_callback (&lesstif_hid, &lesstif_graphics, &region, 0);
       XSync (display, 0);
       time (&end);
       i++;
@@ -2578,7 +2578,7 @@ idle_proc (XtPointer dummy)
 	    }
 	}
       DrawBackgroundImage();
-      hid_expose_callback (&lesstif_hid, &region, 0);
+      hid_expose_callback (&lesstif_hid, &lesstif_graphics, &region, 0);
       draw_grid ();
       lesstif_use_mask (HID_MASK_OFF);
       show_crosshair (0); /* To keep the drawn / not drawn info correct */
@@ -3802,7 +3802,7 @@ pinout_callback (Widget da, PinoutData * pd,
   region.Y2 = PCB->MaxHeight;
 
   XFillRectangle (display, pixmap, bg_gc, 0, 0, pd->v_width, pd->v_height);
-  hid_expose_callback (&lesstif_hid, &region, pd->item);
+  hid_expose_callback (&lesstif_hid, &lesstif_graphics, &region, pd->item);
 
   pinout = 0;
   view_left_x = save_vx;
diff --git a/src/hid/nelma/nelma.c b/src/hid/nelma/nelma.c
index b11c415..395d650 100644
--- a/src/hid/nelma/nelma.c
+++ b/src/hid/nelma/nelma.c
@@ -648,7 +648,7 @@ nelma_start_png_export()
 	linewidth = -1;
 	lastbrush = (gdImagePtr)((void *) -1);
 
-	hid_expose_callback(&nelma_hid, &region, 0);
+	hid_expose_callback(&nelma_hid, &nelma_graphics, &region, 0);
 }
 
 static void 
diff --git a/src/hid/png/png.c b/src/hid/png/png.c
index 2bdf931..b9c97c9 100644
--- a/src/hid/png/png.c
+++ b/src/hid/png/png.c
@@ -654,7 +654,7 @@ png_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
 	}
     }
 
-  hid_expose_callback (&png_hid, bounds, 0);
+  hid_expose_callback (&png_hid, &png_graphics, bounds, 0);
 
   memcpy (LayerStack, saved_layer_stack, sizeof (LayerStack));
   PCB->Flags = save_flags;
diff --git a/src/hid/ps/eps.c b/src/hid/ps/eps.c
index 6893cd5..19c1f48 100644
--- a/src/hid/ps/eps.c
+++ b/src/hid/ps/eps.c
@@ -302,7 +302,7 @@ eps_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
   fprintf (f,
 	   "/a { gsave setlinewidth translate scale 0 0 1 5 3 roll arc stroke grestore} bind def\n");
 
-  hid_expose_callback (&eps_hid, bounds, 0);
+  hid_expose_callback (&eps_hid, &eps_graphics, bounds, 0);
 
   fprintf (f, "showpage\n");
 
diff --git a/src/hid/ps/ps.c b/src/hid/ps/ps.c
index cc53448..b4a8ec5 100644
--- a/src/hid/ps/ps.c
+++ b/src/hid/ps/ps.c
@@ -692,13 +692,13 @@ ps_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
 
       global.doing_toc = 1;
       global.pagecount = 1;  /* 'pagecount' is modified by hid_expose_callback() call */
-      hid_expose_callback (&ps_hid, &global.region, 0);
+      hid_expose_callback (&ps_hid, &ps_graphics, &global.region, 0);
     }
 
   global.pagecount = 1; /* Reset 'pagecount' if single file */
   global.doing_toc = 0;
   ps_set_layer (NULL, 0, -1);  /* reset static vars */
-  hid_expose_callback (&ps_hid, &global.region, 0);
+  hid_expose_callback (&ps_hid, &ps_graphics, &global.region, 0);
 
   if (the_file)
     fprintf (the_file, "showpage\n");
