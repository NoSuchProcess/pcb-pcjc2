Bottom: 7667315eaae9ce07bd33ddfd9f5fddccdd43ade1
Top:    22dbf93a793c94f35897c64f5a5c1ea0ab420980
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2014-06-29 23:08:24 +0100

Remove debug rendering for polygons


---

diff --git a/src/hid/common/draw_helpers.c b/src/hid/common/draw_helpers.c
index 22bdf3b..685b614 100644
--- a/src/hid/common/draw_helpers.c
+++ b/src/hid/common/draw_helpers.c
@@ -151,14 +151,12 @@ thindraw_contour (hidGC gc, PLINE *pl)
   gui->graphics->set_line_width (gc, 0);
   gui->graphics->set_line_cap (gc, Round_Cap);
 
-#if 0
   /* If the contour is round, use an arc drawing routine. */
   if (pl->is_round)
     {
       gui->graphics->draw_arc (gc, pl->cx, pl->cy, pl->radius, pl->radius, 0, 360);
       return;
     }
-#endif
 
   /* Need at least two points in the contour */
   if (pl->head.next == NULL)
@@ -173,33 +171,8 @@ thindraw_contour (hidGC gc, PLINE *pl)
       this_x = v->point[0];
       this_y = v->point[1];
 
-      if (v->prev->is_round)
-        {
-          Angle start_angle, end_angle, delta_angle;
-
-          start_angle = TO_DEGREES (atan2 ((v->prev->point[1] - v->prev->cy), -(v->prev->point[0] - v->prev->cx)));
-          end_angle   = TO_DEGREES (atan2 ((      v->point[1] - v->prev->cy), -(      v->point[0] - v->prev->cx)));
-          delta_angle = end_angle - start_angle;
-
-          if (delta_angle > 180.) delta_angle -= 360.;
-          if (delta_angle < -180.) delta_angle += 360.;
-
-          gui->graphics->draw_arc (gc, v->prev->cx, v->prev->cy, v->prev->radius, v->prev->radius, start_angle, delta_angle);
-
-          /* Fill the head vertex */
-          if (v == &pl->head)
-            gui->graphics->fill_circle (gc, this_x, this_y, MIL_TO_COORD (3));
-          else
-            gui->graphics->draw_arc (gc, this_x, this_y, MIL_TO_COORD (3), MIL_TO_COORD (3), 0, 360);
-        }
-      else
-        {
-          if (v == &pl->head)
-            gui->graphics->fill_circle (gc, this_x, this_y, MIL_TO_COORD (1.5));
-          else
-            gui->graphics->draw_arc (gc, this_x, this_y, MIL_TO_COORD (1.5), MIL_TO_COORD (1.5), 0, 360);
-          gui->graphics->draw_line (gc, last_x, last_y, this_x, this_y);
-        }
+      gui->graphics->draw_line (gc, last_x, last_y, this_x, this_y);
+      // gui->graphics->fill_circle (gc, this_x, this_y, 30);
 
       last_x = this_x;
       last_y = this_y;
diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index db8a28e..44c811d 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -849,11 +849,9 @@ ghid_thindraw_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box)
 {
   double old_alpha_mult = gc->alpha_mult;
   common_thindraw_pcb_polygon (gc, poly, clip_box);
-#if 0
   ghid_set_alpha_mult (gc, gc->alpha_mult * 0.25);
   gui->graphics->fill_pcb_polygon (gc, poly, clip_box);
   ghid_set_alpha_mult (gc, old_alpha_mult);
-#endif
 }
 
 void
@@ -1602,8 +1600,7 @@ fill_board_outline (hidGC gc, const BoxType *drawn_area)
     polygon.BoundingBox = *drawn_area;
   polygon.Flags = NoFlags ();
   SET_FLAG (FULLPOLYFLAG, &polygon);
-//  gui->graphics->fill_pcb_polygon (gc, &polygon, drawn_area);
-  gui->graphics->thindraw_pcb_polygon (gc, &polygon, drawn_area);
+  gui->graphics->fill_pcb_polygon (gc, &polygon, drawn_area);
   poly_FreeContours (&polygon.NoHoles);
 }
 
@@ -2655,7 +2652,7 @@ ghid_drawing_area_expose_cb (GtkWidget *widget,
   glDisable (GL_LIGHTING);
 
   draw_crosshair (priv);
-  //object3d_draw_debug ();
+  object3d_draw_debug ();
 
   hidgl_flush_triangles (&buffer);
