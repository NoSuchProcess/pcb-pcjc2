Bottom: b18ff0542719b3c4900b3df9454ecb64b180e252
Top:    b9baf5878a4f6c16227d23cac5225b3b98941a98
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2008-10-08 15:53:55 +0100

Fix IsPointInBox to work with wide as well as tall boxes


---

diff --git a/src/search.c b/src/search.c
index 4304ec3..0d75500 100644
--- a/src/search.c
+++ b/src/search.c
@@ -1005,15 +1005,50 @@ IsPointInPad (LocationType X, LocationType Y, BDimension Radius,
 Boolean
 IsPointInBox (LocationType X, LocationType Y, BoxTypePtr box, BDimension Radius)
 {
-  PadType pad;
-
-  pad.Thickness = (box->X1 - box->X2); ASSIGN_FLAG (SQUAREFLAG, True, &pad);
-  if (pad.Thickness < 0)
-    pad.Thickness = - pad.Thickness;
-  pad.Point1.X = pad.Point2.X = (box->X1 + box->X2) / 2; 
-  pad.Point1.Y = MIN (box->Y1, box->Y2) + pad.Thickness / 2; 
-  pad.Point2.Y = MAX (box->Y1, box->Y2) - pad.Thickness / 2;
-  return IsPointInPad (X, Y, Radius, &pad);
+  BDimension width, height, range;
+
+  /* NB: Assumes box has point1 with numerically lower X and Y coordinates */
+
+  /* Compute coordinates relative to Point1 */
+  X -= box->X1;
+  Y -= box->Y1;
+
+  width =  box->X2 - box->X1;
+  height = box->Y2 - box->Y1;
+
+  if (X <= 0)
+    {
+      if (Y < 0)
+        return (Radius >= 0) && (Radius * (double)Radius >
+                (double)Y * Y + (double)X * X);
+      else if (Y > height)
+        return (Radius >= 0) && (Radius * (double)Radius >
+                (double)(Y - height) * (Y - height) + (double)X * X);
+      else
+        range = -X;
+    }
+  else if (X >= width)
+    {
+      if (Y < 0)
+        return (Radius >= 0) && (Radius * (double)Radius >
+                (double)Y * Y + (double)(X - width) * (X - width));
+      else if (Y > height)
+        return (Radius >= 0) && (Radius * (double)Radius >
+                (double)(Y - height) * (Y - height) + (double)(X - width) * (X - width));
+      else
+        range = X - width;
+    }
+  else
+    {
+      if (Y < 0)
+        range = -Y;
+      else if (Y > height)
+        range = Y - height;
+      else
+        return True;
+    }
+
+  return range < Radius;
 }
 
 int ClosestArcPoint (float X, float Y, ArcTypePtr Arc)
