Bottom: 4bc9717ae3945b6d9303a0dedbc923bf66c4021d
Top:    e49dc90c679abe2678467d8cac24a85e48705846
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-04-26 19:33:19 +0100

Remove live drawing from auto-router

This doesn't play nice with rendering models where the GUI needs to be
in charge of the repaint cycle - and the feature is not in general use.


---

diff --git a/src/autoroute.c b/src/autoroute.c
index 40b3cda..94457be 100644
--- a/src/autoroute.c
+++ b/src/autoroute.c
@@ -94,13 +94,6 @@ RCSID ("$Id$");
 
 /*
 #define ROUTE_DEBUG
-//#define DEBUG_SHOW_ROUTE_BOXES
-#define DEBUG_SHOW_EXPANSION_BOXES
-//#define DEBUG_SHOW_EDGES
-//#define DEBUG_SHOW_VIA_BOXES
-#define DEBUG_SHOW_TARGETS
-#define DEBUG_SHOW_SOURCES
-//#define DEBUG_SHOW_ZIGZAG
 */
 
 static direction_t
@@ -420,7 +413,6 @@ static void ResetSubnet (routebox_t * net);
 #ifdef ROUTE_DEBUG
 static int showboxen = -2;
 static int aabort = 0;
-static void showroutebox (routebox_t * rb);
 #endif
 
 /* ---------------------------------------------------------------------------
@@ -750,9 +742,6 @@ AddLine (PointerListType layergroupboxes[], int layergroup, LineTypePtr line,
       (*rbpp)->flags.bl_to_ur =
 	(MIN (line->Point1.X, line->Point2.X) == line->Point1.X) !=
 	(MIN (line->Point1.Y, line->Point2.Y) == line->Point1.Y);
-#if defined(ROUTE_DEBUG) && defined(DEBUG_SHOW_ZIGZAG)
-      showroutebox (*rbpp);
-#endif
     }
   /* set aux. properties */
   (*rbpp)->type = LINE;
@@ -1475,17 +1464,6 @@ showbox (BoxType b, Dimension thickness, int group)
   if (showboxen != -1 && showboxen != group)
     return;
 
-
-  gui->set_line_width (Output.fgGC, thickness);
-  gui->set_line_cap (Output.fgGC, Trace_Cap);
-  gui->set_color (Output.fgGC, SLayer->Color);
-
-  gui->draw_line (Output.fgGC, b.X1, b.Y1, b.X2, b.Y1);
-  gui->draw_line (Output.fgGC, b.X1, b.Y2, b.X2, b.Y2);
-  gui->draw_line (Output.fgGC, b.X1, b.Y1, b.X1, b.Y2);
-  gui->draw_line (Output.fgGC, b.X2, b.Y1, b.X2, b.Y2);
-  gui->use_mask (HID_FLUSH_DRAW_Q);
-
 #if 1
   if (b.Y1 == b.Y2 || b.X1 == b.X2)
     thickness = 5;
@@ -1523,45 +1501,6 @@ showbox (BoxType b, Dimension thickness, int group)
 }
 #endif
 
-#if defined(ROUTE_DEBUG)
-static void
-showedge (edge_t * e)
-{
-  BoxType *b = (BoxType *) e->rb;
-
-  gui->set_line_cap (Output.fgGC, Trace_Cap);
-  gui->set_line_width (Output.fgGC, 1);
-  gui->set_color (Output.fgGC, Settings.MaskColor);
-
-  switch (e->expand_dir)
-    {
-    case NORTH:
-      gui->draw_line (Output.fgGC, b->X1, b->Y1, b->X2, b->Y1);
-      break;
-    case SOUTH:
-      gui->draw_line (Output.fgGC, b->X1, b->Y2, b->X2, b->Y2);
-      break;
-    case WEST:
-      gui->draw_line (Output.fgGC, b->X1, b->Y1, b->X1, b->Y2);
-      break;
-    case EAST:
-      gui->draw_line (Output.fgGC, b->X2, b->Y1, b->X2, b->Y2);
-      break;
-    default:
-      break;
-    }
-}
-#endif
-
-#if defined(ROUTE_DEBUG)
-static void
-showroutebox (routebox_t * rb)
-{
-  showbox (rb->sbox, rb->flags.source ? 20 : (rb->flags.target ? 10 : 1),
-	   rb->flags.is_via ? component_silk_layer : rb->group);
-}
-#endif
-
 static void
 EraseRouteBox (routebox_t * rb)
 {
@@ -1835,9 +1774,6 @@ CreateViaEdge (const BoxType * area, Cardinal group,
   rb = CreateExpansionArea (area, group, parent, true, previous_edge);
   rb->flags.is_via = 1;
   rb->came_from = ALL;
-#if defined(ROUTE_DEBUG) && defined(DEBUG_SHOW_VIA_BOXES)
-  showroutebox (rb);
-#endif /* ROUTE_DEBUG && DEBUG_SHOW_VIA_BOXES */
   /* for planes, choose a point near the target */
   if (previous_edge->flags.in_plane)
     {
@@ -2092,9 +2028,6 @@ CreateExpansionArea (const BoxType * area, Cardinal group,
  * are *ONLY* used for path searching. No need to call  InitLists ()
  */
   rb->came_from = src_edge->expand_dir;
-#if defined(ROUTE_DEBUG) && defined(DEBUG_SHOW_EXPANSION_BOXES)
-  showroutebox (rb);
-#endif /* ROUTE_DEBUG && DEBUG_SHOW_EXPANSION_BOXES */
   return rb;
 }
 
@@ -2486,9 +2419,6 @@ CreateBridge (const BoxType * area, routebox_t * parent, direction_t dir)
   rb->flags.nobloat = 1;
   rb->style = parent->style;
   rb->conflicts_with = parent->conflicts_with;
-#if defined(ROUTE_DEBUG) && defined(DEBUG_SHOW_EDGES)
-  showroutebox (rb);
-#endif
   return rb;
 }
 
@@ -3584,12 +3514,9 @@ TracePath (routedata_t * rd, routebox_t * path, const routebox_t * target,
 				       lastpoint, nextpoint, halfwidth,
 				       path->group, subnet, is_bad, last_x);
     }
-#if defined(ROUTE_DEBUG) && defined(DEBUG_SHOW_ROUTE_BOXES)
-  showroutebox (path);
-#if defined(ROUTE_VERBOSE)
+#if defined(ROUTE_DEBUG) && defined(ROUTE_VERBOSE)
   printf ("TRACEPOINT start (%d, %d)\n", nextpoint.X, nextpoint.Y);
 #endif
-#endif
 
   do
     {
@@ -3643,9 +3570,6 @@ TracePath (routedata_t * rd, routebox_t * path, const routebox_t * target,
 
       assert (lastpath->flags.is_via || path->group == lastpath->group);
 
-#if defined(ROUTE_DEBUG) && defined(DEBUG_SHOW_ROUTE_BOXES)
-      showroutebox (path);
-#endif /* ROUTE_DEBUG && DEBUG_SHOW_ROUTE_BOXES */
       /* if this is connected to a plane, draw the thermal */
       if (path->flags.is_thermal || path->type == PLANE)
 	RD_DrawThermal (rd, lastpoint.X, lastpoint.Y, path->group,
@@ -3900,23 +3824,6 @@ list_conflicts (routebox_t * rb)
     printf ("%p, ", vector_element (rb->conflicts_with, i));
 }
 
-static void
-show_area_vec (int lay)
-{
-  int n, save;
-
-  if (!area_vec)
-    return;
-  save = showboxen;
-  showboxen = lay;
-  for (n = 0; n < vector_size (area_vec); n++)
-    {
-      routebox_t *rb = (routebox_t *) vector_element (area_vec, n);
-      showroutebox (rb);
-    }
-  showboxen = save;
-}
-
 static bool
 net_id (routebox_t * rb, long int id)
 {
@@ -3942,41 +3849,6 @@ trace_parents (routebox_t * rb)
     printf ("NULL!\n");
 }
 
-static void
-show_one (routebox_t * rb)
-{
-  int save = showboxen;
-  showboxen = -1;
-  showroutebox (rb);
-  showboxen = save;
-}
-
-static void
-show_path (routebox_t * rb)
-{
-  while (rb && rb->type == EXPANSION_AREA)
-    {
-      show_one (rb);
-      rb = rb->parent.expansion_area;
-    }
-  show_one (rb);
-}
-
-static void
-show_sources (routebox_t * rb)
-{
-  routebox_t *p;
-  if (!rb->flags.source && !rb->flags.target)
-    {
-      printf ("start with a source or target please\n");
-      return;
-    }
-  LIST_LOOP (rb, same_net, p);
-  if (p->flags.source)
-    show_one (p);
-  END_LOOP;
-}
-
 int
 __show_tree (const BoxType * b, void *cl)
 {
@@ -4125,9 +3997,6 @@ RouteOne (routedata_t * rd, routebox_t * from, routebox_t * to, int max_edges)
   if (p->flags.target)
     {
       target_list[i++] = &p->box;
-#if defined(ROUTE_DEBUG) && defined(DEBUG_SHOW_TARGETS)
-      showroutebox (p);
-#endif
     }
   END_LOOP;
   targets = r_create_tree ((const BoxType **)target_list, i, 0);
@@ -4148,9 +4017,6 @@ RouteOne (routedata_t * rd, routebox_t * from, routebox_t * to, int max_edges)
 	edge_t *e;
 	BoxType b = shrink_routebox (p);
 
-#if defined(ROUTE_DEBUG) && defined(DEBUG_SHOW_SOURCES)
-	showroutebox (p);
-#endif
 	/* may expand in all directions from source; center edge cost point. */
 	/* note that planes shouldn't really expand, but we need an edge */
 
@@ -4222,9 +4088,6 @@ RouteOne (routedata_t * rd, routebox_t * from, routebox_t * to, int max_edges)
 	}
       /* we should never add edges on inactive layer groups to the heap. */
       assert (is_layer_group_active[e->rb->group]);
-#if defined(ROUTE_DEBUG) && defined(DEBUG_SHOW_EXPANSION_BOXES)
-      //showedge (e);
-#endif
       if (e->rb->flags.is_thermal)
 	{
 	  best_path_candidate (&s, e, e->mincost_target);
