Bottom: d14d4f3b6207ff8c5335aea6113220627db80a7a
Top:    99ddaea865f548cfe3fa2bf3086138ac132f896d
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2008-10-13 19:11:15 +0100

Change penalty function in rtree.c to use doubles, not long long.

FPU is faster?
Exact integer result doesn't matter.



---

diff --git a/src/rtree.c b/src/rtree.c
index c444e61..3b30a56 100644
--- a/src/rtree.c
+++ b/src/rtree.c
@@ -79,7 +79,6 @@ RCSID ("$Id$");
 #define SORT_NONLEAF
 
 #define DELETE_BY_POINTER
-typedef long long bigun;
 
 typedef struct
 {
@@ -878,21 +877,20 @@ contained (struct rtree_node *node, const BoxType * query)
 }
 
 
-static inline bigun
+static inline double
 penalty (struct rtree_node *node, const BoxType * query)
 {
-  long long score;
+  double score;
 
   /* Compute the area penalty for inserting here and return.
    * The penalty is the increase in area necessary
    * to include the query->
    */
-  score = (MAX (node->box.X2, query->X2) - MIN (node->box.X1, query->X1));
-  score *=
-    (MAX (node->box.Y2, query->Y2) - MIN (node->box.Y1, query->Y1));
+  score  = (MAX (node->box.X2, query->X2) - MIN (node->box.X1, query->X1));
+  score *= (MAX (node->box.Y2, query->Y2) - MIN (node->box.Y1, query->Y1));
   score -=
-    ((long long) node->box.X2 -
-     node->box.X1) * ((long long) node->box.Y2 - node->box.Y1);
+    (double)(node->box.X2 - node->box.X1) *
+    (double)(node->box.Y2 - node->box.Y1);
   return score;
 }
 
@@ -957,7 +955,7 @@ __r_insert_node (struct rtree_node *node, const BoxType * query,
     {
       int i;
       struct rtree_node *best_node;
-      long long score, best_score;
+      double score, best_score;
 
       if (force)
         {
