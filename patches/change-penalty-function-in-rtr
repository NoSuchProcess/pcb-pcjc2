Bottom: 9c90818d400a26a5af531a976b532aec7617c548
Top:    c0ff75de42e22a28228eb7cc711a404767a4d99b
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2008-10-13 20:14:45 +0100

Change penalty function in rtree.c to use doubles, not long long.

Since the exact integer result doesn't matter, this is ok. Seems
to be marginally faster on Core Duo machine.


---

diff --git a/src/rtree.c b/src/rtree.c
index 1f20585..af6c8cc 100644
--- a/src/rtree.c
+++ b/src/rtree.c
@@ -79,7 +79,6 @@ RCSID ("$Id$");
 #define SORT_NONLEAF
 
 #define DELETE_BY_POINTER
-typedef long long bigun;
 
 typedef struct
 {
@@ -878,21 +877,20 @@ contained (struct rtree_node *node, const BoxType * query)
 }
 
 
-static inline bigun
+static inline double
 penalty (struct rtree_node *node, const BoxType * query)
 {
-  long long score;
+  double score;
 
   /* Compute the area penalty for inserting here and return.
    * The penalty is the increase in area necessary
    * to include the query->
    */
-  score = (MAX (node->box.X2, query->X2) - MIN (node->box.X1, query->X1));
-  score *=
-    (MAX (node->box.Y2, query->Y2) - MIN (node->box.Y1, query->Y1));
+  score  = (MAX (node->box.X2, query->X2) - MIN (node->box.X1, query->X1));
+  score *= (MAX (node->box.Y2, query->Y2) - MIN (node->box.Y1, query->Y1));
   score -=
-    ((long long) node->box.X2 -
-     node->box.X1) * ((long long) node->box.Y2 - node->box.Y1);
+    (double)(node->box.X2 - node->box.X1) *
+    (double)(node->box.Y2 - node->box.Y1);
   return score;
 }
 
@@ -957,7 +955,7 @@ __r_insert_node (struct rtree_node *node, const BoxType * query,
     {
       int i;
       struct rtree_node *best_node;
-      long long score, best_score;
+      double score, best_score;
 
       if (force)
         {
