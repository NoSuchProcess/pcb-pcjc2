Bottom: ebd9271e8c683df67d07d1f0ff97fff1379de2fa
Top:    046307cacdd3a4d68504bbc2ef27663011fdbf5f
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2009-11-15 23:19:30 +0000

Debug self intersecting nastiness 2


---

diff --git a/src/polygon1.c b/src/polygon1.c
index 82cb08b..0dcf060 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -630,6 +630,17 @@ seg_in_seg (const BoxType * b, void *cl)
 		      i->v->point, i->v->next->point, s1, s2);
   if (!cnt)
     return 0;
+
+  printf ("Intersection between (%d, %d)-(%d, %d) and \n"
+          "                     (%d, %d)-(%d, %d), point at (%d, %d)\n",
+          s->v->point[0], s->v->point[1], s->v->next->point[0], s->v->next->point[1],
+          i->v->point[0], i->v->point[1], i->v->next->point[0], i->v->next->point[1],
+          s1[0], s1[1]);
+  if (cnt == 2)
+    printf(
+          "                                          and at (%d, %d)\n",
+          s2[0], s2[1]);
+
   if (i->touch)			/* if checking touches one find and we're done */
     longjmp (*i->touch, TOUCHES);
   i->s->p->Flags.status = ISECTED;
@@ -664,8 +675,8 @@ seg_in_seg (const BoxType * b, void *cl)
       if (done_insert)
 	{
 //        printf ("Long-jmping back, since we intersected on i\n");
-	  longjmp (*i->env, 1);	/* Skip this contour if we intersected on i */
 	  i->need_restart = 1;	/* If we skip some processing, we definately need a restart */
+	  longjmp (*i->env, 1);	/* Skip this contour if we intersected on i */
 	  return 0;
 	}
     }
@@ -933,8 +944,10 @@ static int
 intersect (jmp_buf * jb, POLYAREA * b, POLYAREA * a, int add)
 {
   int call_count = 1;
-  while (intersect_impl (jb, b, a, add))
+  while (intersect_impl (jb, b, a, add)) {
+    poly_Valid (b);
     call_count++;
+  }
   return 0;
 }
 
@@ -2375,13 +2388,21 @@ poly_Boolean_free (POLYAREA * ai, POLYAREA * bi, POLYAREA ** res, int action)
   if ((code = setjmp (e)) == 0)
     {
 #ifdef DEBUG
+      printf ("Checking input poygon A\n");
       assert (poly_Valid (a));
+      printf ("Checking input poygon B\n");
       assert (poly_Valid (b));
 #endif
 
       /* intersect needs to make a list of the contours in a and b which are intersected */
       M_POLYAREA_intersect (&e, a, b, TRUE);
 
+#ifdef DEBUG
+      printf ("Checking output poygon A\n");
+      assert (poly_Valid (a));
+      printf ("Checking output poygon B\n");
+      assert (poly_Valid (b));
+#endif
       /* We could speed things up a lot here if we only processed the relevant contours */
       /* NB: Relevant parts of a are labeled below */
       M_POLYAREA_label (b, a, FALSE);
