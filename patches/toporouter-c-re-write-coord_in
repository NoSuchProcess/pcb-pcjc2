Bottom: a63621f3f4d5f67d12a39afb183c8eddb08f7d40
Top:    8454fc5e0e44c278f6a8a76c326c143097e4e3f2
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-10-01 14:51:21 +0100

toporouter.c: Re-write coord_intersect_prop() to increase clariry.

Since the wind_* values computed in this function can be -1, 0 or 1,
it is clearer to test them using equality relations, not perform XOR
operations on their bit-patterns.

I believe the old code worked, but it would return an strange constant
for "true". To ram the point home, I've changed the function to return
bool.


---

diff --git a/src/toporouter.c b/src/toporouter.c
index 9c7ba12..48bb306 100644
--- a/src/toporouter.c
+++ b/src/toporouter.c
@@ -1333,17 +1333,22 @@ vertex_outside_segment(toporouter_spoint_t *a, toporouter_spoint_t *b, gdouble r
  * AB and CD must share a point interior to both segments.
  * returns TRUE if AB properly intersects CD.
  */
-gint
-coord_intersect_prop(gdouble ax, gdouble ay, gdouble bx, gdouble by, gdouble cx, gdouble cy, gdouble dx, gdouble dy)
-{
-  gint wind_abc = coord_wind(ax, ay, bx, by, cx, cy);
-  gint wind_abd = coord_wind(ax, ay, bx, by, dx, dy);
-  gint wind_cda = coord_wind(cx, cy, dx, dy, ax, ay);
-  gint wind_cdb = coord_wind(cx, cy, dx, dy, bx, by);
-
-  if( !wind_abc || !wind_abd || !wind_cda || !wind_cdb ) return 0;
-
-  return ( wind_abc ^ wind_abd ) && ( wind_cda ^ wind_cdb );
+static bool
+coord_intersect_prop (double ax, double ay,
+                      double bx, double by,
+                      double cx, double cy,
+                      double dx, double dy)
+{
+  int wind_abc = coord_wind (ax, ay, bx, by, cx, cy);
+  int wind_abd = coord_wind (ax, ay, bx, by, dx, dy);
+  int wind_cda = coord_wind (cx, cy, dx, dy, ax, ay);
+  int wind_cdb = coord_wind (cx, cy, dx, dy, bx, by);
+
+  /* If any of the line end-points are colinear with the other line, return false */
+  if (wind_abc == 0 || wind_abd == 0 || wind_cda == 0 || wind_cdb == 0)
+    return false;
+
+  return (wind_abc != wind_abd) && (wind_cda != wind_cdb);
 }
 
 /* proper intersection:
