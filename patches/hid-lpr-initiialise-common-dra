Bottom: f152e24cae7e3d7296980f047805bf5daf58e087
Top:    100e266652f60367706725e156902c99f6fcd27b
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2012-11-19 23:28:17 +0000

hid/lpr: Don't initiialise the graphics API vtable

Just being picky here..

I spent ages trying to work out why the old code didn't segfault, given
it does not call common_draw_helpers_init() to setup the various pad,
pin and polygon drawing routines.

It turns out that when we actually go to export, we call into the ps HID
directly - and ignore the lpr.c HID vtables.

Lets avoid confusion by partly setting up the lpr vtables, and leave the
graphics HID member as NULL.


---

diff --git a/src/hid/lpr/lpr.c b/src/hid/lpr/lpr.c
index b33773e..a03b19c 100644
--- a/src/hid/lpr/lpr.c
+++ b/src/hid/lpr/lpr.c
@@ -120,17 +120,14 @@ lpr_calibrate (double xval, double yval)
 }
 
 static HID lpr_hid;
-static HID_DRAW_API lpr_graphics;
 
 void
 hid_lpr_init ()
 {
   memset (&lpr_hid, 0, sizeof (HID));
-  memset (&lpr_graphics, 0, sizeof (HID_DRAW_API));
 
   common_nogui_init (&lpr_hid);
   ps_ps_init (&lpr_hid);
-  ps_ps_graphics_init (&lpr_graphics);
 
   lpr_hid.struct_size         = sizeof (HID);
   lpr_hid.name                = "lpr";
@@ -143,7 +140,5 @@ hid_lpr_init ()
   lpr_hid.parse_arguments     = lpr_parse_arguments;
   lpr_hid.calibrate           = lpr_calibrate;
 
-  lpr_hid.graphics            = &lpr_graphics;
-
   hid_register_hid (&lpr_hid);
 }
