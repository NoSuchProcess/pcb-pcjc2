Bottom: 1075de348334c40df41b8e97a04a0178be191a32
Top:    926b018a0c9a8483c86888bffe3e061f53ffb7f6
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2009-11-14 23:17:55 +0000

Make rats snap to the center of pads, not the edges












---

diff --git a/src/find.c b/src/find.c
index b24512a..dba0e3a 100644
--- a/src/find.c
+++ b/src/find.c
@@ -2191,10 +2191,12 @@ LOCtoPad_callback (const BoxType * b, void *cl)
   struct rat_info *i = (struct rat_info *) cl;
 
   if (!TEST_FLAG (TheFlag, pad) && i->layer ==
-      (TEST_FLAG (ONSOLDERFLAG, pad) ? SOLDER_LAYER : COMPONENT_LAYER)
-      && (((pad->Point1.X == i->Point->X && pad->Point1.Y == i->Point->Y)) ||
-          ((pad->Point2.X == i->Point->X && pad->Point2.Y == i->Point->Y)))
-      && ADD_PAD_TO_LIST (i->layer, pad))
+	(TEST_FLAG (ONSOLDERFLAG, pad) ? SOLDER_LAYER : COMPONENT_LAYER) &&
+      ((pad->Point1.X == i->Point->X && pad->Point1.Y == i->Point->Y) ||
+       (pad->Point2.X == i->Point->X && pad->Point2.Y == i->Point->Y) ||
+       ((pad->Point1.X + pad->Point2.X) / 2 == i->Point->X &&
+        (pad->Point1.Y + pad->Point2.Y) / 2 == i->Point->Y)) &&
+      ADD_PAD_TO_LIST (i->layer, pad))
     longjmp (i->env, 1);
   return 0;
 }
@@ -2306,19 +2308,15 @@ LOCtoPadRat_callback (const BoxType * b, void *cl)
   if (!TEST_FLAG (TheFlag, rat))
     {
       if (rat->group1 == i->layer &&
-          ((rat->Point1.X == i->pad.Point1.X
-            && rat->Point1.Y == i->pad.Point1.Y)
-           || (rat->Point1.X == i->pad.Point2.X
-               && rat->Point1.Y == i->pad.Point2.Y)))
+          rat->Point1.X == (i->pad.Point1.X + i->pad.Point2.X) / 2 &&
+          rat->Point1.Y == (i->pad.Point1.Y + i->pad.Point2.Y) / 2)
         {
           if (ADD_RAT_TO_LIST (rat))
             longjmp (i->env, 1);
         }
       else if (rat->group2 == i->layer &&
-               ((rat->Point2.X == i->pad.Point1.X
-                 && rat->Point2.Y == i->pad.Point1.Y)
-                || (rat->Point2.X == i->pad.Point2.X
-                    && rat->Point2.Y == i->pad.Point2.Y)))
+               rat->Point2.X == (i->pad.Point1.X + i->pad.Point2.X) / 2 &&
+               rat->Point2.Y == (i->pad.Point1.Y + i->pad.Point2.Y) / 2)
         {
           if (ADD_RAT_TO_LIST (rat))
             longjmp (i->env, 1);
diff --git a/src/netlist.c b/src/netlist.c
index d9592b0..7cb923e 100644
--- a/src/netlist.c
+++ b/src/netlist.c
@@ -137,8 +137,10 @@ pin_name_to_xy (LibraryEntryType * pin, int *x, int *y)
       *y = ((PinType *) (conn.ptr2))->Y;
       return 0;
     case PAD_TYPE:
-      *x = ((PadType *) (conn.ptr2))->Point1.X;
-      *y = ((PadType *) (conn.ptr2))->Point1.Y;
+      *x = (((PadType *) (conn.ptr2))->Point1.X +
+            ((PadType *) (conn.ptr2))->Point2.X) / 2;
+      *y = (((PadType *) (conn.ptr2))->Point1.Y +
+            ((PadType *) (conn.ptr2))->Point2.Y) / 2;
       return 0;
     }
   return 1;
diff --git a/src/rats.c b/src/rats.c
index 35047b5..85a3f93 100644
--- a/src/rats.c
+++ b/src/rats.c
@@ -139,16 +139,8 @@ FindPad (char *ElementName, char *PinNum, ConnectionType * conn, Boolean Same)
 	    conn->ptr2 = &element->Pad[i];
 	    conn->group =
 	      TEST_FLAG (ONSOLDERFLAG, &element->Pad[i]) ? SLayer : CLayer;
-	    if (TEST_FLAG (EDGE2FLAG, &element->Pad[i]))
-	      {
-		conn->X = element->Pad[i].Point2.X;
-		conn->Y = element->Pad[i].Point2.Y;
-	      }
-	    else
-	      {
-		conn->X = element->Pad[i].Point1.X;
-		conn->Y = element->Pad[i].Point1.Y;
-	      }
+	      conn->X = (element->Pad[i].Point1.X + element->Pad[i].Point2.X) / 2;
+	      conn->Y = (element->Pad[i].Point1.Y + element->Pad[i].Point2.Y) / 2;
 	    break;
 	  }
       if (i == element->PadN)
diff --git a/src/rubberband.c b/src/rubberband.c
index a806d6d..ec4920f 100644
--- a/src/rubberband.c
+++ b/src/rubberband.c
@@ -293,6 +293,16 @@ rat_callback (const BoxType * box, void *cl)
 	if (rat->Point2.X == i->pad->Point2.X &&
 	    rat->Point2.Y == i->pad->Point2.Y && rat->group2 == i->group)
 	CreateNewRubberbandEntry (NULL, (LineTypePtr) rat, &rat->Point2);
+      else
+	if (rat->Point1.X == (i->pad->Point1.X + i->pad->Point2.X) / 2 &&
+	    rat->Point1.Y == (i->pad->Point1.Y + i->pad->Point2.Y) / 2 &&
+	    rat->group1 == i->group)
+	CreateNewRubberbandEntry (NULL, (LineTypePtr) rat, &rat->Point1);
+      else
+	if (rat->Point2.X == (i->pad->Point1.X + i->pad->Point2.X) / 2 &&
+	    rat->Point2.Y == (i->pad->Point1.Y + i->pad->Point2.Y) / 2 &&
+	    rat->group2 == i->group)
+	CreateNewRubberbandEntry (NULL, (LineTypePtr) rat, &rat->Point2);
       break;
     case LINEPOINT_TYPE:
       if (rat->group1 == i->group &&
