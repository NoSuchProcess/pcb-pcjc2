Bottom: e0c2390bc0268e2e55cf18323da8754307b2885f
Top:    d29f68788329b814342fb7ed0b61fdf1f6397319
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2009-11-07 10:34:57 +0000

Play with making selected / found objects ignore subcompositing rules

If an area on screen touched by this layer is already painted, draw anyway




---

diff --git a/src/draw.c b/src/draw.c
index d5a0a57..f04f2fa 100644
--- a/src/draw.c
+++ b/src/draw.c
@@ -113,6 +113,8 @@ static void DrawMask (BoxType *);
 static int pin_callback (const BoxType * b, void *cl);
 static int pad_callback (const BoxType * b, void *cl);
 
+void hidgl_hack_ignore_stencil (int ignore);
+
 /*--------------------------------------------------------------------------------------
  * setup color for pin or via
  */
@@ -132,6 +134,7 @@ SetPVColor (PinTypePtr Pin, int Type)
 	    color = PCB->ViaSelectedColor;
 	  else
 	    color = PCB->ConnectedColor;
+          hidgl_hack_ignore_stencil (1);
 	}
       else
 	color = PCB->ViaColor;
@@ -147,6 +150,7 @@ SetPVColor (PinTypePtr Pin, int Type)
 	    color = PCB->PinSelectedColor;
 	  else
 	    color = PCB->ConnectedColor;
+          hidgl_hack_ignore_stencil (1);
 	}
       else
 	color = PCB->PinColor;
@@ -1115,9 +1119,15 @@ DrawHole (PinTypePtr Ptr)
   if (TEST_FLAG (HOLEFLAG, Ptr))
     {
       if (TEST_FLAG (WARNFLAG, Ptr))
-	gui->set_color (Output.fgGC, PCB->WarnColor);
+        {
+          gui->set_color (Output.fgGC, PCB->WarnColor);
+          hidgl_hack_ignore_stencil (1);
+        }
       else if (TEST_FLAG (SELECTEDFLAG, Ptr))
-	gui->set_color (Output.fgGC, PCB->ViaSelectedColor);
+        {
+          gui->set_color (Output.fgGC, PCB->ViaSelectedColor);
+          hidgl_hack_ignore_stencil (1);
+        }
       else
 	gui->set_color (Output.fgGC, Settings.BlackColor);
 
@@ -1126,6 +1136,7 @@ DrawHole (PinTypePtr Ptr)
       gui->draw_arc (Output.fgGC,
 		     Ptr->X, Ptr->Y, Ptr->DrillingHole / 2,
 		     Ptr->DrillingHole / 2, 0, 360);
+      hidgl_hack_ignore_stencil (0);
     }
 }
 
@@ -1702,6 +1713,7 @@ DrawVia (PinTypePtr Via, int unused)
   if (!Gathering)
     SetPVColor (Via, VIA_TYPE);
   DrawPinOrViaLowLevel (Via, true);
+  hidgl_hack_ignore_stencil (0);
   if (!TEST_FLAG (HOLEFLAG, Via) && TEST_FLAG (DISPLAYNAMEFLAG, Via))
     DrawPinOrViaNameLowLevel (Via);
 }
@@ -1715,6 +1727,7 @@ DrawPlainVia (PinTypePtr Via, bool holeToo)
   if (!Gathering)
     SetPVColor (Via, VIA_TYPE);
   DrawPinOrViaLowLevel (Via, holeToo);
+  hidgl_hack_ignore_stencil (0);
   if (!TEST_FLAG (HOLEFLAG, Via) && TEST_FLAG (DISPLAYNAMEFLAG, Via))
     DrawPinOrViaNameLowLevel (Via);
 }
@@ -1728,11 +1741,15 @@ DrawViaName (PinTypePtr Via, int unused)
   if (!Gathering)
     {
       if (TEST_FLAG (SELECTEDFLAG, Via))
-	gui->set_color (Output.fgGC, PCB->ViaSelectedColor);
+        {
+	  gui->set_color (Output.fgGC, PCB->ViaSelectedColor);
+          hidgl_hack_ignore_stencil (1);
+        }
       else
 	gui->set_color (Output.fgGC, PCB->ViaColor);
     }
   DrawPinOrViaNameLowLevel (Via);
+  hidgl_hack_ignore_stencil (0);
 }
 
 /* ---------------------------------------------------------------------------
@@ -1745,6 +1762,7 @@ DrawPin (PinTypePtr Pin, int unused)
     if (!Gathering)
       SetPVColor (Pin, PIN_TYPE);
     DrawPinOrViaLowLevel (Pin, true);
+    hidgl_hack_ignore_stencil (0);
   }
   if ((!TEST_FLAG (HOLEFLAG, Pin) && TEST_FLAG (DISPLAYNAMEFLAG, Pin))
       || doing_pinout)
@@ -1759,6 +1777,7 @@ DrawPlainPin (PinTypePtr Pin, bool holeToo)
 {
   if (!Gathering)
     SetPVColor (Pin, PIN_TYPE);
+  hidgl_hack_ignore_stencil (0);
   DrawPinOrViaLowLevel (Pin, holeToo);
   if (!TEST_FLAG (HOLEFLAG, Pin) && TEST_FLAG (DISPLAYNAMEFLAG, Pin))
     DrawPinOrViaNameLowLevel (Pin);
@@ -1773,11 +1792,15 @@ DrawPinName (PinTypePtr Pin, int unused)
   if (!Gathering)
     {
       if (TEST_FLAG (SELECTEDFLAG, Pin))
-	gui->set_color (Output.fgGC, PCB->PinSelectedColor);
+        {
+	  gui->set_color (Output.fgGC, PCB->PinSelectedColor);
+          hidgl_hack_ignore_stencil (1);
+        }
       else
 	gui->set_color (Output.fgGC, PCB->PinColor);
     }
   DrawPinOrViaNameLowLevel (Pin);
+  hidgl_hack_ignore_stencil (0);
 }
 
 /* ---------------------------------------------------------------------------
@@ -1798,6 +1821,7 @@ DrawPad (PadTypePtr Pad, int unused)
 	    gui->set_color (Output.fgGC, PCB->PinSelectedColor);
 	  else
 	    gui->set_color (Output.fgGC, PCB->ConnectedColor);
+          hidgl_hack_ignore_stencil (1);
 	}
       else if (FRONT (Pad))
 	gui->set_color (Output.fgGC, PCB->PinColor);
@@ -1807,6 +1831,7 @@ DrawPad (PadTypePtr Pad, int unused)
   DrawPadLowLevel (Output.fgGC, Pad, false, false);
   if (doing_pinout || TEST_FLAG (DISPLAYNAMEFLAG, Pad))
     DrawPadNameLowLevel (Pad);
+  hidgl_hack_ignore_stencil (0);
 }
 
 /* ---------------------------------------------------------------------------
@@ -1818,13 +1843,17 @@ DrawPadName (PadTypePtr Pad, int unused)
   if (!Gathering)
     {
       if (TEST_FLAG (SELECTEDFLAG, Pad))
-	gui->set_color (Output.fgGC, PCB->PinSelectedColor);
+        {
+	  gui->set_color (Output.fgGC, PCB->PinSelectedColor);
+          hidgl_hack_ignore_stencil (1);
+        }
       else if (FRONT (Pad))
 	gui->set_color (Output.fgGC, PCB->PinColor);
       else
 	gui->set_color (Output.fgGC, PCB->InvisibleObjectsColor);
     }
   DrawPadNameLowLevel (Pad);
+  hidgl_hack_ignore_stencil (0);
 }
 
 /* ---------------------------------------------------------------------------
@@ -1841,11 +1870,13 @@ DrawLine (LayerTypePtr Layer, LineTypePtr Line, int unused)
 	    gui->set_color (Output.fgGC, Layer->SelectedColor);
 	  else
 	    gui->set_color (Output.fgGC, PCB->ConnectedColor);
+          hidgl_hack_ignore_stencil (1);
 	}
       else
 	gui->set_color (Output.fgGC, Layer->Color);
     }
   DrawLineLowLevel (Line);
+  hidgl_hack_ignore_stencil (0);
 }
 
 /* ---------------------------------------------------------------------------
@@ -1862,6 +1893,7 @@ DrawRat (RatTypePtr Line, int unused)
 	    gui->set_color (Output.fgGC, PCB->RatSelectedColor);
 	  else
 	    gui->set_color (Output.fgGC, PCB->ConnectedColor);
+          hidgl_hack_ignore_stencil (1);
 	}
       else
 	gui->set_color (Output.fgGC, PCB->RatColor);
@@ -1895,6 +1927,7 @@ DrawRat (RatTypePtr Line, int unused)
     }
   else
     DrawLineLowLevel ((LineTypePtr) Line);
+  hidgl_hack_ignore_stencil (0);
 }
 
 /* ---------------------------------------------------------------------------
@@ -1913,11 +1946,13 @@ DrawArc (LayerTypePtr Layer, ArcTypePtr Arc, int unused)
 	    gui->set_color (Output.fgGC, Layer->SelectedColor);
 	  else
 	    gui->set_color (Output.fgGC, PCB->ConnectedColor);
+          hidgl_hack_ignore_stencil (1);
 	}
       else
 	gui->set_color (Output.fgGC, Layer->Color);
     }
   DrawArcLowLevel (Arc);
+  hidgl_hack_ignore_stencil (0);
 }
 
 /* ---------------------------------------------------------------------------
@@ -1930,7 +1965,10 @@ DrawText (LayerTypePtr Layer, TextTypePtr Text, int unused)
   if (!Layer->On)
     return;
   if (TEST_FLAG (SELECTEDFLAG, Text))
-    gui->set_color (Output.fgGC, Layer->SelectedColor);
+    {
+      gui->set_color (Output.fgGC, Layer->SelectedColor);
+      hidgl_hack_ignore_stencil (1);
+    }
   else
     gui->set_color (Output.fgGC, Layer->Color);
   if (Layer == & PCB->Data->SILKLAYER
@@ -1939,6 +1977,7 @@ DrawText (LayerTypePtr Layer, TextTypePtr Text, int unused)
   else
     min_silk_line = PCB->minWid;
   DrawTextLowLevel (Text, min_silk_line);
+  hidgl_hack_ignore_stencil (0);
 }
 
 /* ---------------------------------------------------------------------------
@@ -1949,7 +1988,10 @@ DrawRegularText (LayerTypePtr Layer, TextTypePtr Text, int unused)
 {
   int min_silk_line;
   if (TEST_FLAG (SELECTEDFLAG, Text))
-    gui->set_color (Output.fgGC, Layer->SelectedColor);
+    {
+      gui->set_color (Output.fgGC, Layer->SelectedColor);
+      hidgl_hack_ignore_stencil (1);
+    }
   else
     gui->set_color (Output.fgGC, Layer->Color);
   if (Layer == & PCB->Data->SILKLAYER
@@ -1958,6 +2000,7 @@ DrawRegularText (LayerTypePtr Layer, TextTypePtr Text, int unused)
   else
     min_silk_line = PCB->minWid;
   DrawTextLowLevel (Text, min_silk_line);
+  hidgl_hack_ignore_stencil (0);
 }
 
 /* ---------------------------------------------------------------------------
@@ -1967,6 +2010,7 @@ void
 DrawPolygon (LayerTypePtr Layer, PolygonTypePtr Polygon, int unused)
 {
   DrawPolygonLowLevel (Polygon);
+  hidgl_hack_ignore_stencil (0);
 }
 
 int
@@ -2016,7 +2060,10 @@ DrawPlainPolygon (LayerTypePtr Layer, PolygonTypePtr Polygon)
     }
 
   if (TEST_FLAG (SELECTEDFLAG, Polygon))
-    color = Layer->SelectedColor;
+    {
+      color = Layer->SelectedColor;
+      hidgl_hack_ignore_stencil (1);
+    }
   else if (TEST_FLAG (FOUNDFLAG, Polygon))
     color = PCB->ConnectedColor;
   else
@@ -2042,6 +2089,7 @@ DrawPlainPolygon (LayerTypePtr Layer, PolygonTypePtr Polygon)
            poly.Clipped = poly.Clipped->f)
         gui->thindraw_pcb_polygon (Output.fgGC, &poly, clip_box);
     }
+  hidgl_hack_ignore_stencil (0);
 }
 
 /* ---------------------------------------------------------------------------
@@ -2094,12 +2142,16 @@ DrawElementName (ElementTypePtr Element, int unused)
   if (doing_pinout || doing_assy)
     gui->set_color (Output.fgGC, PCB->ElementColor);
   else if (TEST_FLAG (SELECTEDFLAG, &ELEMENT_TEXT (PCB, Element)))
-    gui->set_color (Output.fgGC, PCB->ElementSelectedColor);
+    {
+      gui->set_color (Output.fgGC, PCB->ElementSelectedColor);
+      hidgl_hack_ignore_stencil (1);
+    }
   else if (FRONT (Element))
     gui->set_color (Output.fgGC, PCB->ElementColor);
   else
     gui->set_color (Output.fgGC, PCB->InvisibleObjectsColor);
   DrawStrippedText (Element, PCB->minSlk);
+  hidgl_hack_ignore_stencil (0);
 }
 
 /* ---------------------------------------------------------------------------
@@ -2110,14 +2162,18 @@ DrawElementPackage (ElementTypePtr Element, int unused)
 {
   /* set color and draw lines, arcs, text and pins */
   if (doing_pinout || doing_assy)
-    gui->set_color (Output.fgGC, PCB->ElementColor);
+      gui->set_color (Output.fgGC, PCB->ElementColor);
   else if (TEST_FLAG (SELECTEDFLAG, Element))
-    gui->set_color (Output.fgGC, PCB->ElementSelectedColor);
+    {
+      gui->set_color (Output.fgGC, PCB->ElementSelectedColor);
+      hidgl_hack_ignore_stencil (1);
+    }
   else if (FRONT (Element))
     gui->set_color (Output.fgGC, PCB->ElementColor);
   else
     gui->set_color (Output.fgGC, PCB->InvisibleObjectsColor);
   DrawElementPackageLowLevel (Element, unused);
+  hidgl_hack_ignore_stencil (0);
 }
 
 /* ---------------------------------------------------------------------------
diff --git a/src/hid/gtk/gtkhid-main.c b/src/hid/gtk/gtkhid-main.c
index 10006df..db7507a 100644
--- a/src/hid/gtk/gtkhid-main.c
+++ b/src/hid/gtk/gtkhid-main.c
@@ -380,6 +380,33 @@ int compute_depth (int group)
   return depth;
 }
 
+/* These calls should be matched as an ignore==1, ignore==0 pair!! */
+/* BUT.. we often call with ingore == 0 without having ignore==1'd */
+void hidgl_hack_ignore_stencil (int ignore)
+{
+  return 0;
+  static GLint ref = 0;
+  static GLuint mask = 0;
+  static int ignored = 0;
+
+  if (ignore)
+    {
+      hidgl_flush_triangles (&buffer);
+      ignored = 1;
+      glPushAttrib (GL_STENCIL_BUFFER_BIT);
+      glGetIntegerv (GL_STENCIL_REF, &ref);
+      glGetIntegerv (GL_STENCIL_VALUE_MASK, (GLint *)&mask);
+      glStencilFunc (GL_ALWAYS, ref, mask);
+    }
+  else if (ignored)
+    {
+      hidgl_flush_triangles (&buffer);
+      ignored = 0;
+      glPopAttrib ();
+//      glStencilFunc (GL_GREATER, ref, mask);
+    }
+}
+
 int
 ghid_set_layer (const char *name, int group, int empty)
 {
