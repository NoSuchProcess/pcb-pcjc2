Bottom: 205ac43bfdfaaba7942b05f030dd4d93d564a56d
Top:    961b5319eee9c4d9610d813d3d963caff9bc0c89
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2015-01-10 15:19:09 +0000

Adjust mask API to include hidGC pointer

XXX: Adds some #warnings where we pass NULL to the gc (BROKEN)


---

diff --git a/src/draw.c b/src/draw.c
index 3cbb710..0641799 100644
--- a/src/draw.c
+++ b/src/draw.c
@@ -537,7 +537,7 @@ DrawSilk (int side, const BoxType * drawn_area)
 #if 0
   if (gui->poly_before)
     {
-      hid_draw_use_mask (gui->graphics, HID_MASK_BEFORE);
+      hid_draw_use_mask (Output.fgGC, HID_MASK_BEFORE);
 #endif
       dapi->draw_layer (LAYER_PTR (max_copper_layer + side), drawn_area, NULL);
       /* draw package */
@@ -546,20 +546,20 @@ DrawSilk (int side, const BoxType * drawn_area)
 #if 0
     }
 
-  hid_draw_use_mask (gui->graphics, HID_MASK_CLEAR);
+  hid_draw_use_mask (Output.fgGC, HID_MASK_CLEAR);
   r_search (PCB->Data->pin_tree, drawn_area, NULL, pin_mask_callback, NULL);
   r_search (PCB->Data->via_tree, drawn_area, NULL, via_mask_callback, NULL);
   r_search (PCB->Data->pad_tree, drawn_area, NULL, pad_mask_callback, &side);
 
   if (gui->poly_after)
     {
-      hid_draw_use_mask (gui->graphics, HID_MASK_AFTER);
+      hid_draw_use_mask (Output.fgGC, HID_MASK_AFTER);
       dapi->draw_layer (LAYER_PTR (max_copper_layer + layer), drawn_area, NULL);
       /* draw package */
       r_search (PCB->Data->element_tree, drawn_area, NULL, element_callback, &side);
       r_search (PCB->Data->name_tree[NAME_INDEX (PCB)], drawn_area, NULL, name_callback, &side);
     }
-  hid_draw_use_mask (gui->graphics, HID_MASK_OFF);
+  hid_draw_use_mask (Output.fgGC, HID_MASK_OFF);
 #endif
 }
 
@@ -572,7 +572,7 @@ DrawMaskBoardArea (int mask_type, const BoxType *drawn_area)
       (mask_type == HID_MASK_AFTER  && !gui->poly_after))
     return;
 
-  hid_draw_use_mask (gui->graphics, mask_type);
+  hid_draw_use_mask (Output.fgGC, mask_type);
   hid_draw_set_color (Output.fgGC, PCB->MaskColor);
   if (drawn_area == NULL)
     hid_draw_fill_rect (Output.fgGC, 0, 0, PCB->MaxWidth, PCB->MaxHeight);
@@ -645,7 +645,7 @@ DrawMask (int side, const BoxType *screen)
   else
     {
       DrawMaskBoardArea (HID_MASK_BEFORE, screen);
-      hid_draw_use_mask (gui->graphics, HID_MASK_CLEAR);
+      hid_draw_use_mask (Output.fgGC, HID_MASK_CLEAR);
     }
 
   info.layer = Layer;
@@ -664,7 +664,7 @@ DrawMask (int side, const BoxType *screen)
   else
     {
       DrawMaskBoardArea (HID_MASK_AFTER, screen);
-      hid_draw_use_mask (gui->graphics, HID_MASK_OFF);
+      hid_draw_use_mask (Output.fgGC, HID_MASK_OFF);
     }
 }
 
@@ -694,10 +694,10 @@ DrawRats (const BoxType *drawn_area)
   int can_mask = strcmp(gui->name, "lesstif") == 0;
 
   if (can_mask)
-    hid_draw_use_mask (gui->graphics, HID_MASK_CLEAR);
+    hid_draw_use_mask (Output.fgGC, HID_MASK_CLEAR);
   r_search (PCB->Data->rat_tree, drawn_area, NULL, rat_callback, NULL);
   if (can_mask)
-    hid_draw_use_mask (gui->graphics, HID_MASK_OFF);
+    hid_draw_use_mask (Output.fgGC, HID_MASK_OFF);
 }
 
 /* ---------------------------------------------------------------------------
diff --git a/src/hid/batch/batch.c b/src/hid/batch/batch.c
index 3acbb79..e164bef 100644
--- a/src/hid/batch/batch.c
+++ b/src/hid/batch/batch.c
@@ -177,7 +177,7 @@ batch_destroy_gc (hidGC gc)
 }
 
 static void
-batch_use_mask (enum mask_mode mode)
+batch_use_mask (hidGC gc, enum mask_mode mode)
 {
 }
 
diff --git a/src/hid/common/extents.c b/src/hid/common/extents.c
index d9bfe61..af3f33b 100644
--- a/src/hid/common/extents.c
+++ b/src/hid/common/extents.c
@@ -70,7 +70,7 @@ extents_destroy_gc (hidGC gc)
 }
 
 static void
-extents_use_mask (enum mask_mode mode)
+extents_use_mask (hidGC gc, enum mask_mode mode)
 {
 }
 
diff --git a/src/hid/common/hidnogui.c b/src/hid/common/hidnogui.c
index 4d98614..14788b2 100644
--- a/src/hid/common/hidnogui.c
+++ b/src/hid/common/hidnogui.c
@@ -77,7 +77,7 @@ nogui_destroy_gc (hidGC gc)
 }
 
 static void
-nogui_use_mask (enum mask_mode mode)
+nogui_use_mask (hidGC gc, enum mask_mode mode)
 {
   CRASH;
 }
diff --git a/src/hid/gcode/gcode.c b/src/hid/gcode/gcode.c
index bab217c..9631210 100644
--- a/src/hid/gcode/gcode.c
+++ b/src/hid/gcode/gcode.c
@@ -1196,7 +1196,7 @@ gcode_destroy_gc (hidGC gc)
 }
 
 static void
-gcode_use_mask (enum mask_mode mode)
+gcode_use_mask (hidGC gc, enum mask_mode mode)
 {
   /* does nothing */
 }
diff --git a/src/hid/gerber/gerber.c b/src/hid/gerber/gerber.c
index 64b568f..a2efb02 100644
--- a/src/hid/gerber/gerber.c
+++ b/src/hid/gerber/gerber.c
@@ -50,7 +50,6 @@ static void gerber_parse_arguments (int *argc, char ***argv);
 static int gerber_set_layer (const char *name, int group, int empty);
 static hidGC gerber_make_gc (void);
 static void gerber_destroy_gc (hidGC gc);
-static void gerber_use_mask (enum mask_mode mode);
 static void gerber_set_color (hidGC gc, const char *name);
 static void gerber_set_line_cap (hidGC gc, EndCapStyle style);
 static void gerber_set_line_width (hidGC gc, Coord width);
@@ -956,7 +955,7 @@ gerber_destroy_gc (hidGC gc)
 }
 
 static void
-gerber_use_mask (enum mask_mode mode)
+gerber_use_mask (hidGC gc, enum mask_mode mode)
 {
   current_mask = mode;
 }
diff --git a/src/hid/gtk/gtkhid-gdk.c b/src/hid/gtk/gtkhid-gdk.c
index 23b159c..36e1acc 100644
--- a/src/hid/gtk/gtkhid-gdk.c
+++ b/src/hid/gtk/gtkhid-gdk.c
@@ -324,7 +324,7 @@ ghid_draw_bg_image (void)
 #define WHICH_GC(gtk_gc) (cur_mask == HID_MASK_CLEAR ? priv->mask_gc : (gtk_gc)->gdk_gc)
 
 void
-ghid_use_mask (enum mask_mode mode)
+ghid_use_mask (hidGC gc, enum mask_mode mode)
 {
   static int mask_seq_id = 0;
   GdkColor color;
diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index 13ae58d..c43f402 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -540,7 +540,7 @@ ghid_draw_bg_image (void)
 }
 
 void
-ghid_use_mask (enum mask_mode mode)
+ghid_use_mask (hidGC gc, enum mask_mode mode)
 {
   render_priv *priv = gport->render_priv;
   hidgl_instance *hidgl = priv->hidgl;
@@ -1739,7 +1739,7 @@ GhidDrawMask (int side, BoxType * screen)
       hid_draw_set_color (Output.pmGC, "erase");
     }
 
-  hid_draw_use_mask (&ghid_graphics, HID_MASK_CLEAR);
+  hid_draw_use_mask (Output.fgGC, HID_MASK_CLEAR);
 
   info.layer = Layer;
   info.drawn_area = screen;
@@ -1752,7 +1752,7 @@ GhidDrawMask (int side, BoxType * screen)
   r_search (PCB->Data->via_tree, screen, NULL, clearPin_callback_solid, NULL);
   r_search (PCB->Data->pad_tree, screen, NULL, clearPad_callback_solid, &side);
 
-  hid_draw_use_mask (&ghid_graphics, HID_MASK_AFTER);
+  hid_draw_use_mask (Output.fgGC, HID_MASK_AFTER);
   hid_draw_set_color (out->fgGC, PCB->MaskColor);
   ghid_set_alpha_mult (out->fgGC, thin ? 0.35 : 1.0);
 
@@ -1811,7 +1811,7 @@ GhidDrawMask (int side, BoxType * screen)
 #endif
   hidgl_shader_activate (circular_program);
 
-  hid_draw_use_mask (&ghid_graphics, HID_MASK_OFF);
+  hid_draw_use_mask (out->fgGC, HID_MASK_OFF);
 
 //  first_run = false;
 }
diff --git a/src/hid/gtk/gui.h b/src/hid/gtk/gui.h
index 3430633..a14372c 100644
--- a/src/hid/gtk/gui.h
+++ b/src/hid/gtk/gui.h
@@ -476,7 +476,7 @@ void ghid_pinout_window_show (GHidPort *out, ElementType *Element);
 int ghid_set_layer (const char *name, int group, int empty);
 hidGC ghid_make_gc (void);
 void ghid_destroy_gc (hidGC);
-void ghid_use_mask (enum mask_mode mode);
+void ghid_use_mask (hidGC gc, enum mask_mode mode);
 void ghid_set_color (hidGC gc, const char *name);
 void ghid_set_line_cap (hidGC gc, EndCapStyle style);
 void ghid_set_line_width (hidGC gc, Coord width);
diff --git a/src/hid/lesstif/main.c b/src/hid/lesstif/main.c
index 9408227..42f32a8 100644
--- a/src/hid/lesstif/main.c
+++ b/src/hid/lesstif/main.c
@@ -241,7 +241,7 @@ Location of the @file{pcb-menu.res} file which defines the menu for the lesstif
 
 REGISTER_ATTRIBUTES (lesstif_attribute_list)
 
-static void lesstif_use_mask (enum mask_mode mode);
+static void lesstif_use_mask (hidGC gc, enum mask_mode mode);
 static void zoom_max ();
 static void zoom_to (double factor, int x, int y);
 static void zoom_by (double factor, int x, int y);
@@ -2499,7 +2499,8 @@ idle_proc (XtPointer dummy)
     {
       int mx, my;
       BoxType region;
-      lesstif_use_mask (HID_MASK_OFF);
+#warning NULL gc
+      lesstif_use_mask (NULL, HID_MASK_OFF);
       pixmap = main_pixmap;
       mx = view_width;
       my = view_height;
@@ -2580,7 +2581,8 @@ idle_proc (XtPointer dummy)
       DrawBackgroundImage();
       hid_expose_callback (&lesstif_hid, &region, 0);
       draw_grid ();
-      lesstif_use_mask (HID_MASK_OFF);
+#warning NULL gc
+      lesstif_use_mask (NULL, HID_MASK_OFF);
       show_crosshair (0); /* To keep the drawn / not drawn info correct */
       XSetFunction (display, my_gc, GXcopy);
       XCopyArea (display, main_pixmap, window, my_gc, 0, 0, view_width,
@@ -3072,7 +3074,7 @@ lesstif_destroy_gc (hidGC gc)
 }
 
 static void
-lesstif_use_mask (enum mask_mode mode)
+lesstif_use_mask (hidGC gc, enum mask_mode mode)
 {
   if ((TEST_FLAG (THINDRAWFLAG, PCB) || TEST_FLAG(THINDRAWPOLYFLAG, PCB)) &&
       !use_xrender)
diff --git a/src/hid/nelma/nelma.c b/src/hid/nelma/nelma.c
index dade362..18174a5 100644
--- a/src/hid/nelma/nelma.c
+++ b/src/hid/nelma/nelma.c
@@ -784,7 +784,7 @@ nelma_destroy_gc(hidGC gc)
 }
 
 static void 
-nelma_use_mask(enum mask_mode mode)
+nelma_use_mask(hidGC gc, enum mask_mode mode)
 {
 	/* does nothing */
 }
diff --git a/src/hid/png/png.c b/src/hid/png/png.c
index 7935b3c..08701fe 100644
--- a/src/hid/png/png.c
+++ b/src/hid/png/png.c
@@ -1372,7 +1372,7 @@ png_destroy_gc (hidGC gc)
 }
 
 static void
-png_use_mask (enum mask_mode mode)
+png_use_mask (hidGC gc, enum mask_mode mode)
 {
   if (photo_mode)
     return;
diff --git a/src/hid/ps/eps.c b/src/hid/ps/eps.c
index 28c9129..2d2b089 100644
--- a/src/hid/ps/eps.c
+++ b/src/hid/ps/eps.c
@@ -36,7 +36,6 @@ static void eps_parse_arguments (int *argc, char ***argv);
 static int eps_set_layer (const char *name, int group, int empty);
 static hidGC eps_make_gc (void);
 static void eps_destroy_gc (hidGC gc);
-static void eps_use_mask (enum mask_mode mode);
 static void eps_set_color (hidGC gc, const char *name);
 static void eps_set_line_cap (hidGC gc, EndCapStyle style);
 static void eps_set_line_width (hidGC gc, Coord width);
@@ -441,7 +440,7 @@ eps_destroy_gc (hidGC gc)
 }
 
 static void
-eps_use_mask (enum mask_mode mode)
+eps_use_mask (hidGC gc, enum mask_mode mode)
 {
   static int mask_pending = 0;
   switch (mode)
diff --git a/src/hid/ps/ps.c b/src/hid/ps/ps.c
index fbb84f8..544be9a 100644
--- a/src/hid/ps/ps.c
+++ b/src/hid/ps/ps.c
@@ -1034,7 +1034,7 @@ ps_destroy_gc (hidGC gc)
 }
 
 static void
-ps_use_mask (enum mask_mode mode)
+ps_use_mask (hidGC gc, enum mask_mode mode)
 {
   /* does nothing */
 }
diff --git a/src/hid_draw.h b/src/hid_draw.h
index a3a104e..840cb32 100644
--- a/src/hid_draw.h
+++ b/src/hid_draw.h
@@ -17,7 +17,7 @@ struct hid_draw_st
   /* Make an empty graphics context.  */
   hidGC (*make_gc) (void);
   void (*destroy_gc) (hidGC gc);
-  void (*use_mask) (enum mask_mode mode);
+  void (*use_mask) (hidGC gc, enum mask_mode mode);
 
   /* Set a color.  Names can be like "red" or "#rrggbb" or special
      names like "erase".  *Always* use the "erase" color for removing
@@ -92,9 +92,9 @@ hid_draw_destroy_gc (hidGC gc)
 }
 
 inline void
-hid_draw_use_mask (HID_DRAW *hid_draw, enum mask_mode mode)
+hid_draw_use_mask (hidGC gc, enum mask_mode mode)
 {
-  hid_draw->use_mask (mode);
+  gc->hid_draw->use_mask (gc, mode);
 }
 
 inline void
