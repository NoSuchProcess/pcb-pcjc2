Bottom: f22565275260c42d273d71cac7aafe787657b348
Top:    69a81b4fe00e23592c55d723aa066c114bd79d31
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2008-10-10 10:26:41 +0100

Add support for a "poured" object.

This takes half of the existing polygon functionality, and splits it
such that the user defines a poured region (similar to drawing a polygon
previously), and after clipping, this produces zero or more polygon
objects which are drawn and connectivity checked with the existing
polygon code.

Selecting a "polygon" will cause the parent "pour" to be looked up, and
all child polygons selected. Manipulations will always occur on the
"pour", with "polygons" being updated after clipping.

It remains to be seen whether "pour" will have its own file-format entry,
or if it will take over the meaning of the existing "polygon" entry.



---

diff --git a/src/create.c b/src/create.c
index bbfd52f..d5ea0c9 100644
--- a/src/create.c
+++ b/src/create.c
@@ -605,6 +605,7 @@ CreateNewPolygon (LayerTypePtr Layer, FlagType Flags)
   polygon->Clipped = NULL;
   polygon->NoHoles = NULL;
   polygon->NoHolesValid = 0;
+  polygon->Parent = NULL;
   return (polygon);
 }
 
diff --git a/src/global.h b/src/global.h
index 7763c80..6ad99c6 100644
--- a/src/global.h
+++ b/src/global.h
@@ -198,7 +198,19 @@ typedef struct
   void *Element;
 } TextType, *TextTypePtr;
 
-typedef struct			/* holds information about a polygon */
+typedef struct polygon_st PolygonType, *PolygonTypePtr;
+
+#if 0
+typedef struct			/* holds information about a poured area */
+{
+  ANYOBJECTFIELDS;
+  Cardinal PointN,		/* number of points in pour outline */
+    PointMax;			/* max number from malloc() */
+  PolygonTypePtr polygons;	/* the resulting polygons */
+} PourType, *PourTypePtr;
+#endif
+
+struct polygon_st		/* holds information about a polygon */
 {
   ANYOBJECTFIELDS;
   Cardinal PointN,		/* number of points in polygon */
@@ -207,7 +219,9 @@ typedef struct			/* holds information about a polygon */
   POLYAREA *NoHoles;		/* the polygon broken into hole-less regions */
   int NoHolesValid;		/* Is the NoHoles polygon up to date? */
   PointTypePtr Points;		/* data */
-} PolygonType, *PolygonTypePtr;
+//  PourTypePtr Pour;		/* The pour which resulted in this polygon */
+  PolygonTypePtr *Parent;	/* The parent polygon which defined us */
+};
 
 typedef struct			/* holds information about arcs */
 {
@@ -232,12 +246,14 @@ typedef struct			/* holds information about one layer */
   Cardinal LineN,		/* number of lines */
     TextN,			/* labels */
     PolygonN,			/* polygons */
+    PourN,			/* poured areas */
     ArcN,			/* and arcs */
     LineMax,			/* max number from malloc() */
-    TextMax, PolygonMax, ArcMax;
+    TextMax, PolygonMax, PourMax, ArcMax;
   LineTypePtr Line;		/* pointer to additional structures */
   TextTypePtr Text;
   PolygonTypePtr Polygon;
+  PolygonTypePtr Pour;
   ArcTypePtr Arc;
   rtree_t *line_tree, *text_tree, *polygon_tree, *arc_tree;
   Boolean On;			/* visible flag */
diff --git a/src/macro.h b/src/macro.h
index 819d202..5bae417 100644
--- a/src/macro.h
+++ b/src/macro.h
@@ -391,6 +391,13 @@ extern int mem_any_set (unsigned char *, int);
 	{						\
 		text = &(layer)->Text[n]
 
+#define	POUR_LOOP(layer) do {			\
+	Cardinal		n;			\
+	PolygonTypePtr	pour;			\
+	for (n = (layer)->PourN-1; n != -1; n--)	\
+	{						\
+		pour = &(layer)->Pour[n]
+
 #define	POLYGON_LOOP(layer) do {			\
 	Cardinal		n;			\
 	PolygonTypePtr	polygon;			\
diff --git a/src/mymem.c b/src/mymem.c
index ffa4dad..fba0715 100644
--- a/src/mymem.c
+++ b/src/mymem.c
@@ -399,6 +399,35 @@ GetTextMemory (LayerTypePtr Layer)
 }
 
 /* ---------------------------------------------------------------------------
+ * get next slot for a pour polygon object, allocates memory if necessary
+ */
+PolygonTypePtr
+GetPourMemory (LayerTypePtr Layer)
+{
+  PolygonTypePtr pour = Layer->Pour;
+
+  /* realloc new memory if necessary and clear it */
+  if (Layer->PourN >= Layer->PourMax)
+    {
+      Layer->PourMax += STEP_POUR;
+//      if (Layer->polygon_tree)
+//	r_destroy_tree (&Layer->polygon_tree);
+      pour = MyRealloc (pour, Layer->PourMax * sizeof (PolygonType),
+			   "GetPourMemory()");
+      Layer->Pour = pour;
+      memset (pour + Layer->PourN, 0,
+	      STEP_POUR * sizeof (PolygonType));
+//      Layer->polygon_tree = r_create_tree (NULL, 0, 0);
+//      POLYGON_LOOP (Layer);
+//      {
+//	r_insert_entry (Layer->polygon_tree, (BoxType *) polygon, 0);
+//      }
+//      END_LOOP;
+    }
+  return (pour + Layer->PourN++);
+}
+
+/* ---------------------------------------------------------------------------
  * get next slot for a polygon object, allocates memory if necessary
  */
 PolygonTypePtr
@@ -903,6 +932,12 @@ FreeDataMemory (DataTypePtr Data)
 	  }
 	  END_LOOP;
 	  MYFREE (layer->Polygon);
+	  POUR_LOOP (layer);
+	  {
+	    FreePolygonMemory (pour);
+	  }
+	  END_LOOP;
+	  MYFREE (layer->Pour);
 	  if (layer->line_tree)
 	    r_destroy_tree (&layer->line_tree);
 	  if (layer->arc_tree)
diff --git a/src/mymem.h b/src/mymem.h
index b9d4de1..bbcaec4 100644
--- a/src/mymem.h
+++ b/src/mymem.h
@@ -56,6 +56,7 @@
 #define	STEP_SELECTORENTRY	128
 #define	STEP_REMOVELIST		500
 #define	STEP_UNDOLIST		500
+#define	STEP_POUR		10
 #define	STEP_POLYGON		10
 #define	STEP_POLYGONPOINT	10
 #define	STEP_LIBRARYMENU	10
