Bottom: d14a6f1ab029d7ad1d4bea68b98641cc2a941760
Top:    00ec90b6ca58c332d1e726c9e9f3fe4e826fbb45
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2009-02-10 11:38:50 +0000

polygon1.c: Implement poly_Boolean() by calling poly_Boolean_free()

Reduces duplicated code. The poly_Boolean() implemetation already
copied the original contours, then duplicated the processing steps
taken in poly_Boolean_free().



---

diff --git a/src/polygon1.c b/src/polygon1.c
index 12114ce..b1b40ee 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -1786,51 +1786,11 @@ poly_Boolean (const POLYAREA * a_org, const POLYAREA * b_org,
 	      POLYAREA ** res, int action)
 {
   POLYAREA *a = NULL, *b = NULL;
-  PLINE *p, *holes = NULL;
-  jmp_buf e;
-  int code;
-
-  *res = NULL;
-
-  if ((code = setjmp (e)) == 0)
-    {
-      if (!poly_M_Copy0 (&a, a_org) || !poly_M_Copy0 (&b, b_org))
-	longjmp (e, err_no_memory);
-
-#ifdef DEBUG
-      if (!poly_Valid (a))
-	return -1;
-      if (!poly_Valid (b))
-	return -1;
-#endif
-      M_POLYAREA_intersect (&e, a, b, TRUE);
-
-      M_POLYAREA_label (a, b, FALSE);
-      M_POLYAREA_label (b, a, FALSE);
-
-      M_POLYAREA_Collect (&e, a, res, &holes, action, b->f == b
-			  && !b->contours->next
-			  && b->contours->Flags.status != ISECTED);
-      poly_Free (&a);
-      M_B_AREA_Collect (&e, b, res, &holes, action);
-      poly_Free (&b);
 
-      InsertHoles (&e, *res, &holes);
-    }
-  /* delete holes */
-  while ((p = holes) != NULL)
-    {
-      holes = p->next;
-      poly_DelContour (&p);
-    }
+  if (!poly_M_Copy0 (&a, a_org) || !poly_M_Copy0 (&b, b_org))
+    return err_no_memory;
 
-  if (code)
-    {
-      poly_Free (res);
-      return code;
-    }
-  assert (!*res || poly_Valid (*res));
-  return code;
+  return poly_Boolean_free (a, b, res, action);
 }				/* poly_Boolean */
 
 /* just like poly_Boolean but frees the input polys */
