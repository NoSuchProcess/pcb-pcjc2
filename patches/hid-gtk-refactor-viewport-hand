Bottom: fdde47be376f12d33e5ab19216050874f3ce9af1
Top:    7d11f01d4de3d43aa7c303dceaee0cfbb6411add
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-07-24 13:48:26 +0100

hid/gtk: Refactor viewport handling


---

diff --git a/src/hid/gtk/gtkhid-gdk.c b/src/hid/gtk/gtkhid-gdk.c
index 8394d20..52c5860 100644
--- a/src/hid/gtk/gtkhid-gdk.c
+++ b/src/hid/gtk/gtkhid-gdk.c
@@ -33,6 +33,7 @@ static int cur_mask = -1;
 static int mask_seq = 0;
 
 typedef struct view_data {
+  double pcb_units_per_pixel;
   bool flip_x;
   bool flip_y;
 } view_data;
@@ -276,10 +277,10 @@ ghid_draw_bg_image (void)
   if (!ghidgui->bg_pixbuf)
     return;
 
-  w = PCB->MaxWidth / gport->zoom;
-  h = PCB->MaxHeight / gport->zoom;
-  x = gport->view_x0 / gport->zoom;
-  y = gport->view_y0 / gport->zoom;
+  w = PCB->MaxWidth  / priv->view.pcb_units_per_pixel;
+  h = PCB->MaxHeight / priv->view.pcb_units_per_pixel;
+  x = gport->view_x0 / priv->view.pcb_units_per_pixel;
+  y = gport->view_y0 / priv->view.pcb_units_per_pixel;
 
   if (w_scaled != w || h_scaled != h)
     {
@@ -572,7 +573,7 @@ ghid_draw_line (hidGC gc, int x1, int y1, int x2, int y2)
   dy2 = Vy ((double) y2);
 
   if (!ClipLine (0, 0, gport->width, gport->height,
-		 &dx1, &dy1, &dx2, &dy2, gc->width / gport->zoom))
+		 &dx1, &dy1, &dx2, &dy2, gc->width / priv->view.pcb_units_per_pixel))
     return;
 
   USE_GC (gc);
@@ -587,8 +588,8 @@ ghid_draw_arc (hidGC gc, int cx, int cy,
   gint w, h, radius;
   render_priv *priv = gport->render_priv;
 
-  w = gport->width * gport->zoom;
-  h = gport->height * gport->zoom;
+  w = gport->width  * priv->view.pcb_units_per_pixel;
+  h = gport->height * priv->view.pcb_units_per_pixel;
   radius = (xradius > yradius) ? xradius : yradius;
   if (SIDE_X (cx) < gport->view_x0 - radius
       || SIDE_X (cx) > gport->view_x0 + w + radius
@@ -625,8 +626,8 @@ ghid_draw_rect (hidGC gc, int x1, int y1, int x2, int y2)
   render_priv *priv = gport->render_priv;
 
   lw = gc->width;
-  w = gport->width * gport->zoom;
-  h = gport->height * gport->zoom;
+  w = gport->width  * priv->view.pcb_units_per_pixel;
+  h = gport->height * priv->view.pcb_units_per_pixel;
 
   if ((SIDE_X (x1) < gport->view_x0 - lw
        && SIDE_X (x2) < gport->view_x0 - lw)
@@ -668,8 +669,8 @@ ghid_fill_circle (hidGC gc, int cx, int cy, int radius)
   gint w, h, vr;
   render_priv *priv = gport->render_priv;
 
-  w = gport->width * gport->zoom;
-  h = gport->height * gport->zoom;
+  w = gport->width *  priv->view.pcb_units_per_pixel;
+  h = gport->height * priv->view.pcb_units_per_pixel;
   if (SIDE_X (cx) < gport->view_x0 - radius
       || SIDE_X (cx) > gport->view_x0 + w + radius
       || SIDE_Y (cy) < gport->view_y0 - radius
@@ -711,8 +712,8 @@ ghid_fill_rect (hidGC gc, int x1, int y1, int x2, int y2)
   render_priv *priv = gport->render_priv;
 
   lw = gc->width;
-  w = gport->width * gport->zoom;
-  h = gport->height * gport->zoom;
+  w = gport->width  * priv->view.pcb_units_per_pixel;
+  h = gport->height * priv->view.pcb_units_per_pixel;
 
   if ((SIDE_X (x1) < gport->view_x0 - lw
        && SIDE_X (x2) < gport->view_x0 - lw)
@@ -1200,7 +1201,7 @@ ghid_pinout_preview_expose (GtkWidget *widget,
   double xz, yz;
   render_priv *priv = gport->render_priv;
 
-  save_zoom = gport->zoom;
+  save_zoom = priv->view.pcb_units_per_pixel;
   save_width = gport->width;
   save_height = gport->height;
   save_left = gport->view_x0;
@@ -1216,15 +1217,15 @@ ghid_pinout_preview_expose (GtkWidget *widget,
   xz = (double) pinout->x_max / da_w;
   yz = (double) pinout->y_max / da_h;
   if (xz > yz)
-    gport->zoom = xz;
+    priv->view.pcb_units_per_pixel = xz;
   else
-    gport->zoom = yz;
+    priv->view.pcb_units_per_pixel = yz;
 
   gport->drawable = widget->window;
   gport->width = da_w;
   gport->height = da_h;
-  gport->view_width = da_w * gport->zoom;
-  gport->view_height = da_h * gport->zoom;
+  gport->view_width = da_w * priv->view.pcb_units_per_pixel;
+  gport->view_height = da_h * priv->view.pcb_units_per_pixel;
   gport->view_x0 = (pinout->x_max - gport->view_width) / 2;
   gport->view_y0 = (pinout->y_max - gport->view_height) / 2;
 
@@ -1235,7 +1236,7 @@ ghid_pinout_preview_expose (GtkWidget *widget,
   hid_expose_callback (&ghid_hid, NULL, &pinout->element);
 
   gport->drawable = save_drawable;
-  gport->zoom = save_zoom;
+  priv->view.pcb_units_per_pixel = save_zoom;
   gport->width = save_width;
   gport->height = save_height;
   gport->view_x0 = save_left;
@@ -1252,15 +1253,15 @@ ghid_pinout_preview_expose (GtkWidget *widget,
   xz = (double) pinout->x_max / da_w;
   yz = (double) pinout->y_max / da_h;
   if (xz > yz)
-    gport->zoom = xz;
+    priv->view.pcb_units_per_pixel = xz;
   else
-    gport->zoom = yz;
+    priv->view.pcb_units_per_pixel = yz;
 
   gport->drawable = widget->window;
   gport->width = da_w;
   gport->height = da_h;
-  gport->view_width = da_w * gport->zoom;
-  gport->view_height = da_h * gport->zoom;
+  gport->view_width = da_w * priv->view.pcb_units_per_pixel;
+  gport->view_height = da_h * priv->view.pcb_units_per_pixel;
   gport->view_x0 = (pinout->x_max - gport->view_width) / 2;
   gport->view_y0 = (pinout->y_max - gport->view_height) / 2;
 
@@ -1271,7 +1272,7 @@ ghid_pinout_preview_expose (GtkWidget *widget,
   hid_expose_callback (&ghid_hid, NULL, &pinout->element);
 
   gport->drawable = save_drawable;
-  gport->zoom = save_zoom;
+  priv->view.pcb_units_per_pixel = save_zoom;
   gport->width = save_width;
   gport->height = save_height;
   gport->view_x0 = save_left;
@@ -1295,7 +1296,7 @@ ghid_render_pixmap (int cx, int cy, double zoom, int width, int height, int dept
   render_priv *priv = gport->render_priv;
 
   save_drawable = gport->drawable;
-  save_zoom = gport->zoom;
+  save_zoom = priv->view.pcb_units_per_pixel;
   save_width = gport->width;
   save_height = gport->height;
   save_left = gport->view_x0;
@@ -1309,11 +1310,11 @@ ghid_render_pixmap (int cx, int cy, double zoom, int width, int height, int dept
    */
 
   gport->drawable = pixmap;
-  gport->zoom = zoom;
+  priv->view.pcb_units_per_pixel = zoom;
   gport->width = width;
   gport->height = height;
-  gport->view_width = width * gport->zoom;
-  gport->view_height = height * gport->zoom;
+  gport->view_width =  width  * priv->view.pcb_units_per_pixel;
+  gport->view_height = height * priv->view.pcb_units_per_pixel;
   gport->view_x0 = priv->view.flip_x ? PCB->MaxWidth - cx : cx;
   gport->view_x0 -= gport->view_height / 2;
   gport->view_y0 = priv->view.flip_y ? PCB->MaxHeight - cy : cy;
@@ -1330,7 +1331,7 @@ ghid_render_pixmap (int cx, int cy, double zoom, int width, int height, int dept
   hid_expose_callback (&ghid_hid, &region, NULL);
 
   gport->drawable = save_drawable;
-  gport->zoom = save_zoom;
+  priv->view.pcb_units_per_pixel = save_zoom;
   gport->width = save_width;
   gport->height = save_height;
   gport->view_x0 = save_left;
diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index 6c09d23..10db8db 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -44,8 +44,12 @@ static hidGC current_gc = NULL;
 static int cur_mask = -1;
 
 typedef struct view_data {
+  double pcb_units_per_pixel;
+  Coord center_x;
+  Coord center_y;
   bool flip_x;
   bool flip_y;
+  /* TODO: Rotation matrix ? */
 } view_data;
 
 typedef struct render_priv {
@@ -75,16 +79,16 @@ hid_gc_struct;
 static inline int
 Vz (int z)
 {
-  return z / gport->zoom + 0.5;
+  return z / gpriv->view.pcb_units_per_pixel + 0.5;
 }
 
 static inline int
 Px (int x)
 {
   render_priv *priv = gport->render_priv;
-  int rv = x * gport->zoom + gport->view_x0;
+  int rv = x * gpriv->view.pcb_units_per_pixel + gport->view_x0;
   if (priv->view.flip_x)
-    rv = PCB->MaxWidth - (x * gport->zoom + gport->view_x0);
+    rv = PCB->MaxWidth - (x * gpriv->view.pcb_units_per_pixel + gport->view_x0);
   return  rv;
 }
 
@@ -92,9 +96,9 @@ static inline int
 Py (int y)
 {
   render_priv *priv = gport->render_priv;
-  int rv = y * gport->zoom + gport->view_y0;
+  int rv = y * gpriv->view.pcb_units_per_pixel + gport->view_y0;
   if (priv->view.flip_y)
-    rv = PCB->MaxHeight - (y * gport->zoom + gport->view_y0);
+    rv = PCB->MaxHeight - (y * gpriv->view.pcb_units_per_pixel + gport->view_y0);
   return  rv;
 }
 
@@ -559,19 +563,21 @@ use_gc (hidGC gc)
 void
 ghid_draw_line (hidGC gc, int x1, int y1, int x2, int y2)
 {
+  render_priv *priv = gport->render_priv;
   USE_GC (gc);
 
-  hidgl_draw_line (gc->cap, gc->width, x1, y1, x2, y2, gport->zoom);
+  hidgl_draw_line (gc->cap, gc->width, x1, y1, x2, y2, priv->view.pcb_units_per_pixel);
 }
 
 void
 ghid_draw_arc (hidGC gc, int cx, int cy, int xradius, int yradius,
                          int start_angle, int delta_angle)
 {
+  render_priv *priv = gport->render_priv;
   USE_GC (gc);
 
   hidgl_draw_arc (gc->width, cx, cy, xradius, yradius,
-                  start_angle, delta_angle, gport->zoom);
+                  start_angle, delta_angle, priv->view.pcb_units_per_pixel);
 }
 
 void
@@ -586,9 +592,10 @@ ghid_draw_rect (hidGC gc, int x1, int y1, int x2, int y2)
 void
 ghid_fill_circle (hidGC gc, int cx, int cy, int radius)
 {
+  render_priv *priv = gport->render_priv;
   USE_GC (gc);
 
-  hidgl_fill_circle (cx, cy, radius, gport->zoom);
+  hidgl_fill_circle (cx, cy, radius, priv->view.pcb_units_per_pixel);
 }
 
 
@@ -603,9 +610,10 @@ ghid_fill_polygon (hidGC gc, int n_coords, int *x, int *y)
 void
 ghid_fill_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box)
 {
+  render_priv *priv = gport->render_priv;
   USE_GC (gc);
 
-  hidgl_fill_pcb_polygon (poly, clip_box, gport->zoom);
+  hidgl_fill_pcb_polygon (poly, clip_box, priv->view.pcb_units_per_pixel);
 }
 
 void
@@ -769,8 +777,8 @@ ghid_show_crosshair (gboolean paint_new_location)
   render_priv *priv = gport->render_priv;
   gint x, y, z;
   gboolean draw_markers;
-  int vcw = VCW * gport->zoom;
-  int vcd = VCD * gport->zoom;
+  int vcw = VCW * priv->view.pcb_units_per_pixel;
+  int vcd = VCD * priv->view.pcb_units_per_pixel;
   static int done_once = 0;
   static GdkColor cross_color;
 
@@ -949,13 +957,13 @@ ghid_drawing_area_expose_cb (GtkWidget *widget,
   glLoadIdentity ();
   glTranslatef (0.0f, 0.0f, -Z_NEAR);
 
-  glScalef ((priv->view.flip_x ? -1. : 1.) / port->zoom,
-            (priv->view.flip_y ? -1. : 1.) / port->zoom,
-            ((priv->view.flip_x == priv->view.flip_y) ? 1. : -1.) / port->zoom);
+  glScalef ((priv->view.flip_x ? -1. : 1.) / priv->view.pcb_units_per_pixel,
+            (priv->view.flip_y ? -1. : 1.) / priv->view.pcb_units_per_pixel,
+            ((priv->view.flip_x == priv->view.flip_y) ? 1. : -1.) / priv->view.pcb_units_per_pixel);
   glTranslatef (priv->view.flip_x ?  port->view_x0 - PCB->MaxWidth  :
-                               -port->view_x0,
+                                    -port->view_x0,
                 priv->view.flip_y ?  port->view_y0 - PCB->MaxHeight :
-                               -port->view_y0, 0);
+                                    -port->view_y0, 0);
 
   glEnable (GL_STENCIL_TEST);
   glClearColor (port->offlimits_color.red / 65535.,
@@ -1045,7 +1053,7 @@ ghid_pinout_preview_expose (GtkWidget *widget,
   int save_view_width, save_view_height;
   double xz, yz;
 
-  save_zoom = gport->zoom;
+  save_zoom = priv->view.pcb_units_per_pixel;
   save_width = gport->width;
   save_height = gport->height;
   save_left = gport->view_x0;
@@ -1059,14 +1067,14 @@ ghid_pinout_preview_expose (GtkWidget *widget,
   xz = (double) pinout->x_max / da_w;
   yz = (double) pinout->y_max / da_h;
   if (xz > yz)
-    gport->zoom = xz;
+    priv->view.pcb_units_per_pixel = xz;
   else
-    gport->zoom = yz;
+    priv->view.pcb_units_per_pixel = yz;
 
   gport->width = da_w;
   gport->height = da_h;
-  gport->view_width = da_w * gport->zoom;
-  gport->view_height = da_h * gport->zoom;
+  gport->view_width = da_w * priv->view.pcb_units_per_pixel;
+  gport->view_height = da_h * priv->view.pcb_units_per_pixel;
   gport->view_x0 = (pinout->x_max - gport->view_width) / 2;
   gport->view_y0 = (pinout->y_max - gport->view_height) / 2;
 
@@ -1107,12 +1115,12 @@ ghid_pinout_preview_expose (GtkWidget *widget,
   hidgl_init_triangle_array (&buffer);
   ghid_invalidate_current_gc ();
   glPushMatrix ();
-  glScalef ((priv->view.flip_x ? -1. : 1.) / gport->zoom,
-            (priv->view.flip_y ? -1. : 1.) / gport->zoom, 1);
+  glScalef ((priv->view.flip_x ? -1. : 1.) / gpriv->view.pcb_units_per_pixel,
+            (priv->view.flip_y ? -1. : 1.) / gpriv->view.pcb_units_per_pixel, 1);
   glTranslatef (priv->view.flip_x ?  gport->view_x0 - PCB->MaxWidth  :
-                               -gport->view_x0,
+                                    -gport->view_x0,
                 priv->view.flip_y ?  gport->view_y0 - PCB->MaxHeight :
-                               -gport->view_y0, 0);
+                                    -gport->view_y0, 0);
   hid_expose_callback (&ghid_hid, NULL, &pinout->element);
   hidgl_flush_triangles (&buffer);
   glPopMatrix ();
@@ -1126,7 +1134,7 @@ ghid_pinout_preview_expose (GtkWidget *widget,
   gport->render_priv->in_context = false;
   gdk_gl_drawable_gl_end (pGlDrawable);
 
-  gport->zoom = save_zoom;
+  priv->view.pcb_units_per_pixel = save_zoom;
   gport->width = save_width;
   gport->height = save_height;
   gport->view_x0 = save_left;
@@ -1153,7 +1161,7 @@ ghid_render_pixmap (int cx, int cy, double zoom, int width, int height, int dept
   int save_view_width, save_view_height;
   BoxType region;
 
-  save_zoom = gport->zoom;
+  save_zoom = priv->view.pcb_units_per_pixel;
   save_width = gport->width;
   save_height = gport->height;
   save_left = gport->view_x0;
@@ -1175,11 +1183,11 @@ ghid_render_pixmap (int cx, int cy, double zoom, int width, int height, int dept
 
   /* Setup zoom factor for drawing routines */
 
-  gport->zoom = zoom;
+  priv->view.pcb_units_per_pixel = zoom;
   gport->width = width;
   gport->height = height;
-  gport->view_width = width * gport->zoom;
-  gport->view_height = height * gport->zoom;
+  gport->view_width = width * gpriv->view.pcb_units_per_pixel;
+  gport->view_height = height * gpriv->view.pcb_units_per_pixel;
   gport->view_x0 = priv->view.flip_x ? PCB->MaxWidth - cx : cx;
   gport->view_x0 -= gport->view_height / 2;
   gport->view_y0 = priv->view.flip_y ? PCB->MaxHeight - cy : cy;
@@ -1219,10 +1227,10 @@ ghid_render_pixmap (int cx, int cy, double zoom, int width, int height, int dept
   hidgl_init_triangle_array (&buffer);
   ghid_invalidate_current_gc ();
   glPushMatrix ();
-  glScalef ((priv->view.flip_x ? -1. : 1.) / gport->zoom,
-            (priv->view.flip_y ? -1. : 1.) / gport->zoom, 1);
+  glScalef ((priv->view.flip_x ? -1. : 1.) / gpriv->view.pcb_units_per_pixel,
+            (priv->view.flip_y ? -1. : 1.) / gpriv->view.pcb_units_per_pixel, 1);
   glTranslatef (priv->view.flip_x ?  gport->view_x0 - PCB->MaxWidth  :
-                               -gport->view_x0,
+                                    -gport->view_x0,
                 priv->view.flip_y ?  gport->view_y0 - PCB->MaxHeight :
                                -gport->view_y0, 0);
   region.X1 = MIN(Px(0), Px(gport->width + 1));
@@ -1244,7 +1252,7 @@ ghid_render_pixmap (int cx, int cy, double zoom, int width, int height, int dept
   g_object_unref (glconfig);
   g_object_unref (glcontext);
 
-  gport->zoom = save_zoom;
+  priv->view.pcb_units_per_pixel = save_zoom;
   gport->width = save_width;
   gport->height = save_height;
   gport->view_x0 = save_left;
@@ -1280,13 +1288,13 @@ ghid_request_debug_draw (void)
   glDisable (GL_STENCIL_TEST);
 
   glPushMatrix ();
-  glScalef ((priv->view.flip_x ? -1. : 1.) / port->zoom,
-            (priv->view.flip_y ? -1. : 1.) / port->zoom,
+  glScalef ((priv->view.flip_x ? -1. : 1.) / priv->view.pcb_units_per_pixel,
+            (priv->view.flip_y ? -1. : 1.) / priv->view.pcb_units_per_pixel,
             (priv->view.flip_x == priv->view.flip_y) ? 1. : -1.);
   glTranslatef (priv->view.flip_x ?  port->view_x0 - PCB->MaxWidth  :
-                               -port->view_x0,
+                                    -port->view_x0,
                 priv->view.flip_y ?  port->view_y0 - PCB->MaxHeight :
-                               -port->view_y0, 0);
+                                    -port->view_y0, 0);
 
   return &ghid_hid;
 }
@@ -1341,8 +1349,8 @@ ghid_pan_view_abs (Coord pcb_x, Coord pcb_y, int widget_x, int widget_y)
 {
   render_priv *priv = gport->render_priv;
 
-  gport->view_x0 = MAX (0, SIDE_X (pcb_x) - widget_x * gport->zoom);
-  gport->view_y0 = MAX (0, SIDE_Y (pcb_y) - widget_y * gport->zoom);
+  gport->view_x0 = MAX (0, SIDE_X (pcb_x) - widget_x * gpriv->view.pcb_units_per_pixel);
+  gport->view_y0 = MAX (0, SIDE_Y (pcb_y) - widget_y * gpriv->view.pcb_units_per_pixel);
 
   /* don't pan so far to the right that we see way past the right edge of the
    * board, or so far down that we see way past the bottom edge of the board.
@@ -1371,7 +1379,7 @@ ghid_pan_view_abs (Coord pcb_x, Coord pcb_y, int widget_x, int widget_y)
 }
 
 
-/* gport->zoom:
+/* gpriv->view.pcb_units_per_pixel:
  * zoom value is PCB units per screen pixel.  Larger numbers mean zooming
  * out - the largest value means you are looking at the whole board.
  *
@@ -1394,13 +1402,13 @@ ghid_zoom_view_abs (Coord center_x, Coord center_y, double new_zoom)
                   PCB->MaxHeight / gport->height);
   new_zoom = MIN (MAX (min_zoom, new_zoom), max_zoom);
 
-  if (gport->zoom == new_zoom)
+  if (gpriv->view.pcb_units_per_pixel == new_zoom)
     return;
 
   xtmp = (SIDE_X (center_x) - gport->view_x0) / (double)gport->view_width;
   ytmp = (SIDE_Y (center_y) - gport->view_y0) / (double)gport->view_height;
 
-  gport->zoom = new_zoom;
+  gpriv->view.pcb_units_per_pixel = new_zoom;
   pixel_slop = new_zoom;
   ghid_port_ranges_scale (FALSE);
 
@@ -1419,7 +1427,7 @@ ghid_zoom_view_abs (Coord center_x, Coord center_y, double new_zoom)
 void
 ghid_zoom_view_rel (Coord center_x, Coord center_y, double factor)
 {
-  ghid_zoom_view_abs (center_x, center_y, gport->zoom * factor);
+  ghid_zoom_view_abs (center_x, center_y, gpriv->view.pcb_units_per_pixel * factor);
 }
 
 void
diff --git a/src/hid/gtk/gui-top-window.c b/src/hid/gtk/gui-top-window.c
index b11d32c..cf47cf5 100644
--- a/src/hid/gtk/gui-top-window.c
+++ b/src/hid/gtk/gui-top-window.c
@@ -2382,8 +2382,6 @@ ghid_parse_arguments (int *argc, char ***argv)
   gtk_init (argc, argv);
 
   gport = &ghid_port;
-  gport->zoom = 300.0;
-  pixel_slop = 300;
 
   ghid_init_renderer (argc, argv, gport);
 
diff --git a/src/hid/gtk/gui.h b/src/hid/gtk/gui.h
index 96a8662..88fbfdd 100644
--- a/src/hid/gtk/gui.h
+++ b/src/hid/gtk/gui.h
@@ -61,12 +61,6 @@
 #define	FROM_PCB_UNITS(v)	(Settings.grid_units_mm ? COORD_TO_MM(v) : COORD_TO_MIL(v))
 #define	TO_PCB_UNITS(v)		(Settings.grid_units_mm ? MM_TO_COORD(v) : MIL_TO_COORD(v))
 
-#define	DRAW_X(x)	(gint)((SIDE_X(x) - gport->view_x0) / gport->zoom)
-#define	DRAW_Y(y)	(gint)((SIDE_Y(y) - gport->view_y0) / gport->zoom)
-
-#define	EVENT_TO_PCB_X(x)	SIDE_X((gint)((x) * gport->zoom + gport->view_x0))
-#define	EVENT_TO_PCB_Y(y)	SIDE_Y((gint)((y) * gport->zoom + gport->view_y0))
-
 /*
  * Used to intercept "special" hotkeys that gtk doesn't usually pass
  * on to the menu hotkeys.  We catch them and put them back where we
@@ -167,16 +161,8 @@ typedef struct
   gboolean has_entered;
   gboolean panning;
 
-/* zoom value is PCB units per screen pixel.  Larger numbers mean zooming
-|  out - the largest value means you are looking at the whole board.
-*/
-  gdouble zoom;			/* PCB units per screen pixel.  Larger */
-  /* numbers mean zooming out. */
-  gint view_x0,			/* Viewport in PCB coordinates */
-    view_y0, view_width, view_height;
-  Coord pcb_x, pcb_y;
-
-  gint crosshair_x, crosshair_y;
+  Coord pcb_x, pcb_y;             /* PCB coordinates of the object under the mouse pointer */
+  Coord crosshair_x, crosshair_y; /* PCB coordinates of the crosshair set by PCB's core    */
 }
 GHidPort;
