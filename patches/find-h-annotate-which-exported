Bottom: 4dcbd8e547c863967eeb8678aca0d41859127772
Top:    44acd8bbba48207727705c5a108676440c3065f6
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2012-12-15 18:39:38 +0000

find.h: Annotate which exported functions are not used!


---

diff --git a/src/find.c b/src/find.c
index 6a1a7b4..70d1c52 100644
--- a/src/find.c
+++ b/src/find.c
@@ -100,6 +100,18 @@
 
 #undef DEBUG
 
+
+/* NOT USED EXTERNALLY */// bool ArcPadIntersect (ArcType *, PadType *);
+/* NOT USED EXTERNALLY */// void InitComponentLookup (void);
+/* NOT USED EXTERNALLY */// void InitLayoutLookup (void);
+/* NOT USED EXTERNALLY */// void FreeComponentLookupMemory (void);
+/* NOT USED EXTERNALLY */// void FreeLayoutLookupMemory (void);
+
+static bool IsArcInPolygon (ArcType *, PolygonType *);
+static bool IsLineInPolygon (LineType *, PolygonType *);
+static bool IsPadInPolygon (PadType *, PolygonType *);
+static bool IsPolygonInPolygon (PolygonType *, PolygonType *);
+
 /* ---------------------------------------------------------------------------
  * some local macros
  */
@@ -2373,7 +2385,7 @@ LookupLOConnectionsToPolygon (PolygonType *Polygon, Cardinal LayerGroup)
  * - check the two end points of the arc. If none of them matches
  * - check all segments of the polygon against the arc.
  */
-bool
+static bool
 IsArcInPolygon (ArcType *Arc, PolygonType *Polygon)
 {
   BoxType *Box = (BoxType *) Arc;
@@ -2405,7 +2417,7 @@ IsArcInPolygon (ArcType *Arc, PolygonType *Polygon)
  * - check the two end points of the line. If none of them matches
  * - check all segments of the polygon against the line.
  */
-bool
+static bool
 IsLineInPolygon (LineType *Line, PolygonType *Polygon)
 {
   BoxType *Box = (BoxType *) Line;
@@ -2444,7 +2456,7 @@ IsLineInPolygon (LineType *Line, PolygonType *Polygon)
  *
  * The polygon is assumed to already have been proven non-clearing
  */
-bool
+static bool
 IsPadInPolygon (PadType *pad, PolygonType *polygon)
 {
     return IsLineInPolygon ((LineType *) pad, polygon);
@@ -2456,7 +2468,7 @@ IsPadInPolygon (PadType *pad, PolygonType *polygon)
  * First check all points out of P1 against P2 and vice versa.
  * If both fail check all lines of P1 against the ones of P2
  */
-bool
+static bool
 IsPolygonInPolygon (PolygonType *P1, PolygonType *P2)
 {
   if (!P1->Clipped || !P2->Clipped)
diff --git a/src/find.h b/src/find.h
index d811634..bb9af82 100644
--- a/src/find.h
+++ b/src/find.h
@@ -47,8 +47,7 @@ bool LineLineIntersect (LineType *, LineType *);
 bool LineArcIntersect (LineType *, ArcType *);
 bool PinLineIntersect (PinType *, LineType *);
 bool LinePadIntersect (LineType *, PadType *);
-bool ArcPadIntersect (ArcType *, PadType *);
-bool IsPolygonInPolygon (PolygonType *, PolygonType *);
+/* NOT USED EXTERNALLY */// bool ArcPadIntersect (ArcType *, PadType *);
 void LookupElementConnections (ElementType *, FILE *);
 void LookupConnectionsToAllElements (FILE *);
 void LookupConnection (Coord, Coord, bool, Coord, int, bool AndRats);
@@ -57,17 +56,18 @@ bool ResetFoundLinesAndPolygons (bool, int flag);
 bool ResetFoundPinsViasAndPads (bool, int flag);
 bool ResetConnections (bool, int flag);
 void InitConnectionLookup (void);
-void InitComponentLookup (void);
-void InitLayoutLookup (void);
+/* NOT USED EXTERNALLY */// void InitComponentLookup (void);
+/* NOT USED EXTERNALLY */// void InitLayoutLookup (void);
 void FreeConnectionLookupMemory (void);
-void FreeComponentLookupMemory (void);
-void FreeLayoutLookupMemory (void);
+/* NOT USED EXTERNALLY */// void FreeComponentLookupMemory (void);
+/* NOT USED EXTERNALLY */// void FreeLayoutLookupMemory (void);
 void RatFindHook (int, void *, void *, void *, bool, bool);
 void SaveFindFlag (int);
 void RestoreFindFlag (void);
 int DRCAll (void);
-bool IsLineInPolygon (LineType *, PolygonType *);
-bool IsArcInPolygon (ArcType *, PolygonType *);
-bool IsPadInPolygon (PadType *, PolygonType *);
+/* NOT USED EXTERNALLY */// bool IsArcInPolygon (ArcType *, PolygonType *);
+/* NOT USED EXTERNALLY */// bool IsLineInPolygon (LineType *, PolygonType *);
+/* NOT USED EXTERNALLY */// bool IsPadInPolygon (PadType *, PolygonType *);
+/* NOT USED EXTERNALLY */// bool IsPolygonInPolygon (PolygonType *, PolygonType *);
 
 #endif
