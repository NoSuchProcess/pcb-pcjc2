Bottom: b44307b2cded520265a8471358f96f90caf938bb
Top:    1275100f20430a7ad0ef5505a642d8f36064f2a5
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-07-24 17:44:29 +0100

hid/gtk: Fixup Zoom action.

If the passed coordinates are both zero, we pass the PCB coordinates
of the board center into a function which currently expects screen
coordinates. FAIL.

Remove that special case code - it should just work without it.


---

diff --git a/src/hid/gtk/gtkhid-main.c b/src/hid/gtk/gtkhid-main.c
index 8500f6a..e373090 100644
--- a/src/hid/gtk/gtkhid-main.c
+++ b/src/hid/gtk/gtkhid-main.c
@@ -128,29 +128,21 @@ static int
 Zoom (int argc, char **argv, int x, int y)
 {
   const char *vp;
+  int vx, vy;
   double v;
 
   if (argc > 1)
     AFAIL (zoom);
 
-  if (x == 0 && y == 0)
-    {
-      x = gport->view_width / 2;
-      y = gport->view_height / 2;
-    }
-  else
-    {
-      /* Px converts view->pcb, Vx converts pcb->view */
-      x = Vx (x);
-      y = Vy (y);
-    }
-
   if (argc < 1)
     {
       zoom_to (1000000, 0, 0);
       return 0;
     }
 
+  vx = Vx (x);
+  vy = Vy (y);
+
   vp = argv[0];
   if (*vp == '+' || *vp == '-' || *vp == '=')
     vp++;
@@ -160,15 +152,15 @@ Zoom (int argc, char **argv, int x, int y)
   switch (argv[0][0])
     {
     case '-':
-      zoom_by (1 / v, x, y);
+      zoom_by (1 / v, vx, vy);
       break;
     default:
     case '+':
-      zoom_by (v, x, y);
+      zoom_by (v, vx, vy);
       break;
     case '=':
       /* this needs to set the scale factor absolutely*/
-      zoom_to (v, x, y);
+      zoom_to (v, vx, vy);
       break;
     }
 
@@ -179,10 +171,9 @@ Zoom (int argc, char **argv, int x, int y)
 static void
 zoom_to (double new_zoom, int x, int y)
 {
-  double max_zoom, xfrac, yfrac;
-#ifdef DEBUG
-  int cx, cy;
-#endif
+  double max_zoom;
+  double min_zoom;
+  int x0, y0;
 
   /* gport->zoom:
    * zoom value is PCB units per screen pixel.  Larger numbers mean zooming
@@ -193,95 +184,50 @@ zoom_to (double new_zoom, int x, int y)
    * gport->view_width and gport->view_height are in PCB coordinates
    */
 
-#ifdef DEBUG
-  pcb_printf ("\nzoom_to( %g, %#mS, %#mS)\n", new_zoom, x, y);
-#endif
+  /* Set the "minimum" zoom constant (maximum zoom),
+   * at 1 pixel per PCB unit */
+  min_zoom = 1;
 
-  xfrac = (double) x / (double) gport->view_width;
-  yfrac = (double) y / (double) gport->view_height;
+  /* Set the "maximum" zoom constant (minimum zoom),
+   * to make the entire board just fit inside the viewport */
+  max_zoom = MAX (PCB->MaxWidth  / gport->width,
+                  PCB->MaxHeight / gport->height);
 
-  if (ghid_flip_x)
-    xfrac = 1-xfrac;
-  if (ghid_flip_y)
-    yfrac = 1-yfrac;
+  new_zoom = MIN (MAX (min_zoom, new_zoom), max_zoom);
 
-  /* Find the zoom that would just make the entire board fit */
-  max_zoom = PCB->MaxWidth / gport->width;
-  if (max_zoom < PCB->MaxHeight / gport->height)
-    max_zoom = PCB->MaxHeight / gport->height;
+  if (gport->zoom == new_zoom)
+    return;
 
-#ifdef DEBUG
-  printf ("zoom_to():  max_zoom = %g\n", max_zoom);
-#endif
+  gport->zoom = new_zoom;
+  pixel_slop = new_zoom;
 
-  /* 
-   * clip the zooming so we can never have more than 1 pixel per PCB
-   * unit and never zoom out more than viewing the entire board
-   */
-     
-  if (new_zoom < 1)
-    new_zoom = 1;
-  if (new_zoom > max_zoom)
-    new_zoom = max_zoom;
+  ghid_port_ranges_scale (FALSE);
 
-#ifdef DEBUG
-  printf ("max_zoom = %g, xfrac = %g, yfrac = %g, new_zoom = %g\n", 
-	  max_zoom, xfrac, yfrac, new_zoom);
+  /*
+    gport->view_width = gport->width * gport->zoom;
+    gport->view_height = gport->height * gport->zoom;
 
-  /* find center x and y */
-  cx = gport->view_x0 + gport->view_width * xfrac * gport->zoom;
-  cy = gport->view_y0 + gport->view_height * yfrac * gport->zoom;
+    if (gport->view_width >= PCB->MaxWidth)
+      gport->view_width = PCB->MaxWidth;
+    if (gport->view_height >= PCB->MaxHeight)
+      gport->view_height = PCB->MaxHeight;
+  */
 
-  pcb_printf ("zoom_to():  x0 = %#mS, cx = %#mS\n", gport->view_x0, cx);
-  pcb_printf ("zoom_to():  y0 = %#mS, cy = %#mS\n", gport->view_y0, cy);
-#endif
+  gport->view_x0 = MIN (0, SIDE_X (gport->pcb_x) - (SIDE_X (gport->pcb_x) - gport->view_x0) / old_zoom * new_zoom);
+  gport->view_y0 = MIN (0, SIDE_Y (gport->pcb_y) - (SIDE_Y (gport->pcb_y) - gport->view_y0) / old_zoom * new_zoom);
 
-  if (gport->zoom != new_zoom)
-    {
-      gdouble xtmp, ytmp;
-      gint x0, y0;
-
-      xtmp = (SIDE_X (gport->pcb_x) - gport->view_x0) /
-                (gdouble) gport->view_width;
-      ytmp = (SIDE_Y (gport->pcb_y) - gport->view_y0) /
-                (gdouble) gport->view_height;
-
-      gport->zoom = new_zoom;
-      pixel_slop = new_zoom;
-      ghid_port_ranges_scale(FALSE);
-
-      x0 = SIDE_X (gport->pcb_x) - xtmp * gport->view_width;
-      if (x0 < 0)
-        x0 = 0;
-      gport->view_x0 = x0;
-
-      y0 = SIDE_Y (gport->pcb_y) - ytmp * gport->view_height;
-      if (y0 < 0)
-        y0 = 0;
-      gport->view_y0 = y0;
-
-      ghidgui->adjustment_changed_holdoff = TRUE;
-      gtk_range_set_value (GTK_RANGE (ghidgui->h_range), gport->view_x0);
-      gtk_range_set_value (GTK_RANGE (ghidgui->v_range), gport->view_y0);
-      ghidgui->adjustment_changed_holdoff = FALSE;
-
-      ghid_port_ranges_changed();
-    }
+  ghidgui->adjustment_changed_holdoff = TRUE;
+  gtk_range_set_value (GTK_RANGE (ghidgui->h_range), gport->view_x0);
+  gtk_range_set_value (GTK_RANGE (ghidgui->v_range), gport->view_y0);
+  ghidgui->adjustment_changed_holdoff = FALSE;
 
-#ifdef DEBUG
-  printf ("zoom_to():  new x0 = %d\n", gport->view_x0);
-  printf ("zoom_to():  new y0 = %d\n", gport->view_y0);
-#endif
+  ghid_port_ranges_changed ();
   ghid_set_status_line_label ();
 }
 
 void
 zoom_by (double factor, int x, int y)
 {
-#ifdef DEBUG
-  pcb_printf ("\nzoom_by( %g, %#mS, %#mS).  old gport->zoom = %g\n", 
-	  factor, x, y, gport->zoom);
-#endif
   zoom_to (gport->zoom * factor, x, y);
 }
 
diff --git a/src/hid/gtk/gui-top-window.c b/src/hid/gtk/gui-top-window.c
index b11d32c..f0d3da5 100644
--- a/src/hid/gtk/gui-top-window.c
+++ b/src/hid/gtk/gui-top-window.c
@@ -2382,7 +2382,6 @@ ghid_parse_arguments (int *argc, char ***argv)
   gtk_init (argc, argv);
 
   gport = &ghid_port;
-  gport->zoom = 300.0;
   pixel_slop = 300;
 
   ghid_init_renderer (argc, argv, gport);
