Bottom: 8989932d0d63104560d741afe9431116f1d794a8
Top:    e45cdc50fa685538d23820297096ddffe251c5e7
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-09-05 22:18:16 +0100

hid/gtk: Connect up the file-change monitor in a more sensible place

I must have had a brain-fail when I hooked it up in the call which sets
the window title. NB: That also gets called after every menu operation!

Hook up the connection in the ghid_sync_with_new_layout() function,
which looks to be a much more appropriate place, however changing this
alone revealed another issue - we now get notified for changes WE make
to the files.

We were avoiding those events as the file-monitor was being reset before
it could pop up, at the end of the menu action which invoked the save).

Hook up to the new HID API (added in the previous commit) which allows
us to temporarily disconnect the file-monitor when PCB's core is saving
to the PCB file.


---

diff --git a/src/hid/gtk/gtkhid-main.c b/src/hid/gtk/gtkhid-main.c
index 3e253cb..351a699 100644
--- a/src/hid/gtk/gtkhid-main.c
+++ b/src/hid/gtk/gtkhid-main.c
@@ -2169,6 +2169,8 @@ hid_gtk_init ()
   ghid_hid.flush_debug_draw         = ghid_flush_debug_draw;
   ghid_hid.finish_debug_draw        = ghid_finish_debug_draw;
 
+  ghid_hid.notify_save_pcb          = ghid_notify_save_pcb;
+
   hid_register_hid (&ghid_hid);
 #include "gtk_lists.h"
 }
diff --git a/src/hid/gtk/gui-top-window.c b/src/hid/gtk/gui-top-window.c
index 73bada5..b14aa4c 100644
--- a/src/hid/gtk/gui-top-window.c
+++ b/src/hid/gtk/gui-top-window.c
@@ -262,6 +262,130 @@ void ghid_hotkey_cb (int which)
                   (gpointer) ghid_hotkey_actions[which].node);
 }
 
+static void
+info_bar_response_cb (GtkInfoBar *info_bar,
+                      gint        response_id,
+                      gpointer    user_data)
+{
+  GhidGui *_gui = (GhidGui *)user_data;
+
+  gtk_widget_destroy (_gui->info_bar);
+  _gui->info_bar = NULL;
+
+  if (response_id == GTK_RESPONSE_ACCEPT)
+    hid_actionl ("LoadFrom", "revert", "none", NULL);
+}
+
+static void
+file_changed_cb (GFileMonitor     *monitor,
+                 GFile            *file,
+                 GFile            *other_file,
+                 GFileMonitorEvent event_type,
+                 gpointer          user_data)
+{
+  GhidGui *_gui = (GhidGui *)user_data;
+  GtkWidget *icon;
+  GtkWidget *label;
+  GtkWidget *content_area;
+  char *file_path;
+  char *file_path_utf8;
+  char *markup;
+
+  if (event_type != G_FILE_MONITOR_EVENT_CHANGED)
+    return;
+
+  /* File has changed on disk */
+
+  if (_gui->info_bar)
+    gtk_widget_destroy (_gui->info_bar);
+
+  _gui->info_bar = gtk_info_bar_new_with_buttons (_("Reload"),
+                                                  GTK_RESPONSE_ACCEPT,
+                                                  GTK_STOCK_CANCEL,
+                                                  GTK_RESPONSE_CANCEL,
+                                                  NULL);
+  gtk_box_pack_start (GTK_BOX (_gui->vbox_middle),
+                      _gui->info_bar, FALSE, FALSE, 0);
+  gtk_box_reorder_child (GTK_BOX (_gui->vbox_middle), _gui->info_bar, 0);
+
+  gtk_info_bar_set_message_type (GTK_INFO_BAR (_gui->info_bar),
+                                 GTK_MESSAGE_WARNING);
+
+  g_signal_connect (_gui->info_bar, "response",
+                    G_CALLBACK (info_bar_response_cb), _gui);
+
+  file_path = g_file_get_path (file);
+  printf ("File %s has changed on disk (monitor %p)\n", file_path, monitor);
+  file_path_utf8 = g_filename_to_utf8 (file_path, -1, NULL, NULL, NULL);
+  g_free (file_path);
+  markup =
+    g_markup_printf_escaped (_("<b>The file %s has changed on disk</b>\n"
+                               "\n"
+                               "Do you want to reload the file?"),
+                             file_path_utf8);
+  g_free (file_path_utf8);
+
+  content_area =
+    gtk_info_bar_get_content_area (GTK_INFO_BAR (_gui->info_bar));
+
+  icon = gtk_image_new_from_stock (GTK_STOCK_DIALOG_WARNING,
+                                   GTK_ICON_SIZE_DIALOG);
+  gtk_box_pack_start (GTK_BOX (content_area),
+                      icon, FALSE, FALSE, 0);
+
+  label = gtk_label_new ("");
+  gtk_box_pack_start (GTK_BOX (content_area),
+                      label, TRUE, TRUE, 6);
+
+  gtk_label_set_use_markup (GTK_LABEL (label), TRUE);
+  gtk_label_set_markup (GTK_LABEL (label), markup);
+  g_free (markup);
+
+  gtk_misc_set_alignment (GTK_MISC (label), 0., 0.5);
+
+  gtk_widget_show_all (_gui->info_bar);
+}
+
+static void
+disconnect_file_change_monitor (GhidGui *_gui)
+{
+  printf ("Disconnect monitor %p\n", _gui->file_monitor);
+
+  if (_gui->file_monitor != NULL)
+    g_object_unref (_gui->file_monitor);
+  _gui->file_monitor = NULL;
+
+  if (_gui->info_bar != NULL)
+    gtk_widget_destroy (_gui->info_bar);
+  _gui->info_bar = NULL;
+}
+
+static void
+connect_file_change_monitor (GhidGui *_gui)
+{
+  GFile *file;
+
+  /* Ensure any existing monitor is disconnected */
+  disconnect_file_change_monitor (_gui);
+
+  if (PCB->Filename == NULL ||
+      *PCB->Filename == '\0')
+    return;
+
+  file = g_file_new_for_path (PCB->Filename);
+
+  /* XXX: Could hook up more error handling for g_file_monitor_file */
+  _gui->file_monitor = g_file_monitor_file (file,
+                                            G_FILE_MONITOR_NONE,
+                                            NULL,
+                                            NULL);
+  g_object_unref (file);
+
+  printf ("Connecting for %s new monitor is %p\n", PCB->Filename, _gui->file_monitor);
+  g_signal_connect (_gui->file_monitor, "changed",
+                    G_CALLBACK (file_changed_cb), _gui);
+}
+
   /* Sync toggle states that were saved with the layout and notify the
      |  config code to update Settings values it manages.
    */
@@ -277,6 +401,28 @@ ghid_sync_with_new_layout (void)
 
   ghid_window_set_name_label (PCB->Name);
   ghid_set_status_line_label ();
+  connect_file_change_monitor (ghidgui);
+}
+
+void
+ghid_notify_save_pcb (const char *file, bool done)
+{
+  /* Do nothing if it is not the active PCB file we're watching
+   * that is being saved.
+   *
+   * Ideally, the core ought to notify us for a "SaveAs" type action
+   * so we could re-wire our file-monitor, but it doesn't. This works
+   * however, as the core sets the new PCB file-name before it saves,
+   * and this notification causes us to disconnect our old file-monitor
+   * (pointing at the old file), then we re-connect to the new file.
+   */
+  if (strcmp (file, PCB->Filename) != 0)
+    return;
+
+  if (!done)
+    disconnect_file_change_monitor (ghidgui);
+  else
+    connect_file_change_monitor (ghidgui);
 }
 
 /* ---------------------------------------------------------------------------
@@ -467,119 +613,6 @@ ghid_remove_accel_groups (GtkWindow *window, GhidGui *gui)
                (GHID_ROUTE_STYLE_SELECTOR (gui->route_style_selector)));
 }
 
-static void
-info_bar_response_cb (GtkInfoBar *info_bar,
-                      gint        response_id,
-                      gpointer    user_data)
-{
-  GhidGui *_gui = (GhidGui *)user_data;
-
-  gtk_widget_destroy (_gui->info_bar);
-  _gui->info_bar = NULL;
-
-  if (response_id == GTK_RESPONSE_ACCEPT)
-    hid_actionl ("LoadFrom", "revert", "none", NULL);
-}
-
-static void
-file_changed_cb (GFileMonitor     *monitor,
-                 GFile            *file,
-                 GFile            *other_file,
-                 GFileMonitorEvent event_type,
-                 gpointer          user_data)
-{
-  GhidGui *_gui = (GhidGui *)user_data;
-  GtkWidget *icon;
-  GtkWidget *label;
-  GtkWidget *content_area;
-  char *file_path;
-  char *file_path_utf8;
-  char *markup;
-
-  if (event_type != G_FILE_MONITOR_EVENT_CHANGED)
-    return;
-
-  /* File has changed on disk */
-
-  if (_gui->info_bar)
-    gtk_widget_destroy (_gui->info_bar);
-
-  _gui->info_bar = gtk_info_bar_new_with_buttons (_("Reload"),
-                                                  GTK_RESPONSE_ACCEPT,
-                                                  GTK_STOCK_CANCEL,
-                                                  GTK_RESPONSE_CANCEL,
-                                                  NULL);
-  gtk_box_pack_start (GTK_BOX (_gui->vbox_middle),
-                      _gui->info_bar, FALSE, FALSE, 0);
-  gtk_box_reorder_child (GTK_BOX (_gui->vbox_middle), _gui->info_bar, 0);
-
-  gtk_info_bar_set_message_type (GTK_INFO_BAR (_gui->info_bar),
-                                 GTK_MESSAGE_WARNING);
-
-  g_signal_connect (_gui->info_bar, "response",
-                    G_CALLBACK (info_bar_response_cb), _gui);
-
-  file_path = g_file_get_path (file);
-  file_path_utf8 = g_filename_to_utf8 (file_path, -1, NULL, NULL, NULL);
-  g_free (file_path);
-  markup =
-    g_markup_printf_escaped (_("<b>The file %s has changed on disk</b>\n"
-                               "\n"
-                               "Do you want to reload the file?"),
-                             file_path_utf8);
-  g_free (file_path_utf8);
-
-  content_area =
-    gtk_info_bar_get_content_area (GTK_INFO_BAR (_gui->info_bar));
-
-  icon = gtk_image_new_from_stock (GTK_STOCK_DIALOG_WARNING,
-                                   GTK_ICON_SIZE_DIALOG);
-  gtk_box_pack_start (GTK_BOX (content_area),
-                      icon, FALSE, FALSE, 0);
-
-  label = gtk_label_new ("");
-  gtk_box_pack_start (GTK_BOX (content_area),
-                      label, TRUE, TRUE, 6);
-
-  gtk_label_set_use_markup (GTK_LABEL (label), TRUE);
-  gtk_label_set_markup (GTK_LABEL (label), markup);
-  g_free (markup);
-
-  gtk_misc_set_alignment (GTK_MISC (label), 0., 0.5);
-
-  gtk_widget_show_all (_gui->info_bar);
-}
-
-static void
-connect_file_change_monitor (GhidGui *_gui, char *filename)
-{
-  GFile *file;
-
-  if (_gui->file_monitor != NULL)
-    g_object_unref (_gui->file_monitor);
-  _gui->file_monitor = NULL;
-
-  if (_gui->info_bar != NULL)
-    gtk_widget_destroy (_gui->info_bar);
-  _gui->info_bar = NULL;
-
-  if (filename == NULL)
-    return;
-
-  file = g_file_new_for_path (filename);
-
-  /* XXX: Could hook up more error handling for g_file_monitor_file */
-  _gui->file_monitor = g_file_monitor_file (file,
-                                            G_FILE_MONITOR_NONE,
-                                            NULL,
-                                            NULL);
-  g_object_unref (file);
-
-  g_signal_connect (_gui->file_monitor, "changed",
-                    G_CALLBACK (file_changed_cb), _gui);
-}
-
-
 /* Refreshes the window title bar and sets the PCB name to the
  * window title bar or to a seperate label
  */
@@ -608,11 +641,6 @@ ghid_window_set_name_label (gchar * name)
   gtk_window_set_title (GTK_WINDOW (gport->top_window), str);
   g_free (str);
   g_free (filename);
-
-  if (PCB->Filename && *PCB->Filename)
-    connect_file_change_monitor (ghidgui, PCB->Filename);
-  else
-    connect_file_change_monitor (ghidgui, NULL);
 }
 
 static void
diff --git a/src/hid/gtk/gui.h b/src/hid/gtk/gui.h
index dfed2c6..3a37b66 100644
--- a/src/hid/gtk/gui.h
+++ b/src/hid/gtk/gui.h
@@ -338,6 +338,7 @@ int ghid_drc_window_throw_dialog (void);
 
 /* In gui-top-window.c  */
 void ghid_update_toggle_flags (void);
+void ghid_notify_save_pcb (const char *file, bool done);
 void ghid_install_accel_groups (GtkWindow *window, GhidGui *gui);
 void ghid_remove_accel_groups (GtkWindow *window, GhidGui *gui);
