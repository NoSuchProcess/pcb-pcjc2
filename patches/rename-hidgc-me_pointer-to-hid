Bottom: 6476e390f6cc79c584cc05d9fab7fe5e37c3e5d6
Top:    65662b5f38e4e39947a8bd77476259fe2bd54ecd
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2015-01-04 16:58:22 +0000

Rename hidGC "me_pointer" to "hid"

The pointer provides a link between a HID specific graphics context and HID
in question, name it accordingly.


---

diff --git a/src/hid/gcode/gcode.c b/src/hid/gcode/gcode.c
index c79239d..c497043 100644
--- a/src/hid/gcode/gcode.c
+++ b/src/hid/gcode/gcode.c
@@ -1177,7 +1177,7 @@ gcode_make_gc (void)
   hidGC gc = (hidGC) calloc (1, sizeof (struct gcode_gc_struct));
   gcodeGC gcode_gc = (gcodeGC)gc;
 
-  gc->me_pointer = &gcode_hid;
+  gc->hid = &gcode_hid;
 
   gcode_gc->cap = Trace_Cap;
   gcode_gc->width = 1;
@@ -1265,7 +1265,7 @@ use_gc (hidGC gc)
 
   int need_brush = 0;
 
-  if (gc->me_pointer != &gcode_hid)
+  if (gc->hid != &gcode_hid)
     {
       fprintf (stderr, "Fatal: GC from another HID passed to gcode HID\n");
       abort ();
diff --git a/src/hid/gerber/gerber.c b/src/hid/gerber/gerber.c
index b74e5a9..7f07b3a 100644
--- a/src/hid/gerber/gerber.c
+++ b/src/hid/gerber/gerber.c
@@ -941,7 +941,7 @@ gerber_make_gc (void)
   hidGC gc = (hidGC) calloc (1, sizeof (struct gerber_gc_struct));
   gerberGC gerber_gc = (gerberGC)gc;
 
-  gc->me_pointer = &gerber_hid;
+  gc->hid = &gerber_hid;
 
   gerber_gc->cap = Trace_Cap;
 
diff --git a/src/hid/gtk/gtkhid-gdk.c b/src/hid/gtk/gtkhid-gdk.c
index 332c33e..c7973c6 100644
--- a/src/hid/gtk/gtkhid-gdk.c
+++ b/src/hid/gtk/gtkhid-gdk.c
@@ -184,7 +184,7 @@ ghid_make_gc (void)
   hidGC gc = (hidGC)g_new0 (struct gtk_gc_struct, 1);
   gtkGC gtk_gc = (gtkGC)gc;
 
-  gc->me_pointer = &ghid_hid;
+  gc->hid = &ghid_hid;
 
   gtk_gc->colorname = Settings.BackgroundColor;
 
@@ -554,7 +554,7 @@ use_gc (hidGC gc)
   render_priv *priv = gport->render_priv;
   GdkWindow *window = gtk_widget_get_window (gport->top_window);
 
-  if (gc->me_pointer != &ghid_hid)
+  if (gc->hid != &ghid_hid)
     {
       fprintf (stderr, "Fatal: GC from another HID passed to GTK HID\n");
       abort ();
diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index ef32309..5c0d87b 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -359,7 +359,7 @@ ghid_make_gc (void)
   hidGC gc = (hidGC) g_new0 (struct gtk_gc_struct, 1);
   gtkGC gtk_gc = (gtkGC)gc;
 
-  gc->me_pointer = &ghid_hid;
+  gc->hid = &ghid_hid;
 
   gtk_gc->colorname = Settings.BackgroundColor;
   gtk_gc->alpha_mult = 1.0;
@@ -785,7 +785,7 @@ ghid_invalidate_current_gc (void)
 static int
 use_gc (hidGC gc)
 {
-  if (gc->me_pointer != &ghid_hid)
+  if (gc->hid != &ghid_hid)
     {
       fprintf (stderr, "Fatal: GC from another HID passed to GTK HID\n");
       abort ();
@@ -3452,7 +3452,7 @@ void
 ghid_set_lock_effects (hidGC gc, AnyObjectType *object)
 {
   // XXX: Workaround to crashing exporters
-  if (gc->me_pointer != &ghid_hid)
+  if (gc->hid != &ghid_hid)
     return;
 
   /* Only apply effects to locked objects when in "lock" mode */
diff --git a/src/hid/lesstif/main.c b/src/hid/lesstif/main.c
index 9ea3df0..426223d 100644
--- a/src/hid/lesstif/main.c
+++ b/src/hid/lesstif/main.c
@@ -3059,7 +3059,7 @@ lesstif_make_gc (void)
 {
   hidGC gc = (hidGC)calloc (1, sizeof (struct lesstif_gc_struct));
 
-  gc->me_pointer = &lesstif_hid;
+  gc->hid = &lesstif_hid;
 
   return gc;
 }
@@ -3189,7 +3189,7 @@ set_gc (hidGC gc)
 {
   lesstifGC lesstif_gc = (lesstifGC)gc;
   int cap, join, width;
-  if (gc->me_pointer != &lesstif_hid)
+  if (gc->hid != &lesstif_hid)
     {
       fprintf (stderr, "Fatal: GC from another HID passed to lesstif HID\n");
       abort ();
diff --git a/src/hid/nelma/nelma.c b/src/hid/nelma/nelma.c
index 106d7d3..33eb4dd 100644
--- a/src/hid/nelma/nelma.c
+++ b/src/hid/nelma/nelma.c
@@ -765,7 +765,7 @@ nelma_make_gc(void)
 	hidGC gc = (hidGC) calloc (1, sizeof(struct hid_gc_struct));
 	nelmaGC nelma_gc = (nelmaGC)gc;
 
-	gc->me_pointer = &nelma_hid;
+	gc->hid = &nelma_hid;
 
 	nelma_gc->cap = Trace_Cap;
 	nelma_gc->width = 1;
@@ -848,7 +848,7 @@ use_gc(hidGC gc)
 	nelmaGC nelma_gc = (nelmaGC)gc;
 	int             need_brush = 0;
 
-	if (gc->me_pointer != &nelma_hid) {
+	if (gc->hid != &nelma_hid) {
 		fprintf(stderr, "Fatal: GC from another HID passed to nelma HID\n");
 		abort();
 	}
diff --git a/src/hid/png/png.c b/src/hid/png/png.c
index 6987421..164783c 100644
--- a/src/hid/png/png.c
+++ b/src/hid/png/png.c
@@ -1352,7 +1352,7 @@ png_make_gc (void)
   hidGC gc = (hidGC) calloc (1, sizeof (struct png_gc_struct));
   pngGC png_gc = (pngGC)gc;
 
-  gc->me_pointer = &png_hid;
+  gc->hid = &png_hid;
 
   png_gc->cap = Trace_Cap;
   png_gc->width = 1;
@@ -1494,7 +1494,7 @@ use_gc (hidGC gc)
 
   int need_brush = 0;
 
-  if (gc->me_pointer != &png_hid)
+  if (gc->hid != &png_hid)
     {
       fprintf (stderr, "Fatal: GC from another HID passed to png HID\n");
       abort ();
diff --git a/src/hid/ps/eps.c b/src/hid/ps/eps.c
index 0acf59f..b11de83 100644
--- a/src/hid/ps/eps.c
+++ b/src/hid/ps/eps.c
@@ -424,7 +424,7 @@ eps_make_gc (void)
   hidGC gc = (hidGC) calloc (1, sizeof (struct eps_gc_struct));
   epsGC eps_gc = (epsGC)gc;
 
-  gc->me_pointer = &eps_hid;
+  gc->hid = &eps_hid;
 
   eps_gc->cap = Trace_Cap;
   eps_gc->width = 0;
diff --git a/src/hid/ps/ps.c b/src/hid/ps/ps.c
index 386845d..e12fa6e 100644
--- a/src/hid/ps/ps.c
+++ b/src/hid/ps/ps.c
@@ -1016,7 +1016,7 @@ ps_make_gc (void)
   hidGC gc = (hidGC) calloc (1, sizeof (struct ps_gc_struct));
   psGC ps_gc = (psGC)gc;
 
-  gc->me_pointer = &ps_hid;
+  gc->hid = &ps_hid;
   ps_gc->cap = Trace_Cap;
 
   return gc;
@@ -1102,7 +1102,7 @@ use_gc (hidGC gc)
       lastcap = lastcolor = -1;
       return;
     }
-  if (gc->me_pointer != &ps_hid)
+  if (gc->hid != &ps_hid)
     {
       fprintf (stderr, "Fatal: GC from another HID passed to ps HID\n");
       abort ();
diff --git a/src/hid/step/step.c b/src/hid/step/step.c
index 07937d3..48a6f66 100644
--- a/src/hid/step/step.c
+++ b/src/hid/step/step.c
@@ -837,7 +837,7 @@ step_make_gc (void)
   hidGC gc = (hidGC) calloc (1, sizeof (struct step_gc_struct));
   stepGC step_gc = (stepGC)gc;
 
-  gc->me_pointer = &step_hid;
+  gc->hid = &step_hid;
 
   step_gc->cap = Trace_Cap;
 
@@ -916,7 +916,7 @@ use_gc (hidGC gc)
       lastcap = lastcolor = -1;
       return;
     }
-  if (gc->me_pointer != &step_hid)
+  if (gc->hid != &step_hid)
     {
       fprintf (stderr, "Fatal: GC from another HID passed to step HID\n");
       abort ();
diff --git a/src/hid_draw.h b/src/hid_draw.h
index bc8be08..634617c 100644
--- a/src/hid_draw.h
+++ b/src/hid_draw.h
@@ -73,5 +73,5 @@ struct hid_draw_st
 
 /* Base hidGC elements visible to any module */
 struct hid_gc_struct {
-  HID *me_pointer;   /* Used by HIDs to validate the GCs passed belong to them */
+  HID *hid;   /* Used by HIDs to validate the GCs passed belong to them */
 };
