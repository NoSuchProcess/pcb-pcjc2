Bottom: 186835619537e6b836da41e86405c357c90339cc
Top:    2f38e877743bb7d84e306bea7c02fcdbab366a1e
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-05-02 14:49:25 +0100

Hack to make pretty translucent polygons in thindraw-poly mode

TODO: Perhaps need some way to configure this.. it might be nice in
non-thindraw mode too. If people want thin-draw to gain extra speed,
rather than have it actually slower (due to fill + outline), then a
way to turn it off would also be useful.



---

diff --git a/src/hid/gtk/gtkhid-gdk.c b/src/hid/gtk/gtkhid-gdk.c
index 4cb9a02..678c7bc 100644
--- a/src/hid/gtk/gtkhid-gdk.c
+++ b/src/hid/gtk/gtkhid-gdk.c
@@ -661,6 +661,12 @@ ghid_fill_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box)
 }
 
 void
+ghid_thindraw_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box)
+{
+  common_thindraw_pcb_polygon (gc, poly, clip_box);
+}
+
+void
 ghid_fill_rect (hidGC gc, int x1, int y1, int x2, int y2)
 {
   gint w, h, lw, xx, yy;
diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index 887f4a5..d45ab20 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -329,12 +329,15 @@ typedef struct
   double blue;
 } ColorCache;
 
+static char *current_color = NULL;
+static double global_alpha_mult = 1.0;
+static int alpha_changed = 0;
+
 void
 ghid_set_color (hidGC gc, const char *name)
 {
   render_priv *priv = gport->render_priv;
   static void *cache = NULL;
-  static char *old_name = NULL;
   hidval cval;
   ColorCache *cc;
   double alpha_mult = 1.0;
@@ -343,14 +346,16 @@ ghid_set_color (hidGC gc, const char *name)
 
   current_gc = gc;
 
-  if (old_name != NULL)
+  if (!alpha_changed && current_color != NULL)
     {
-      if (strcmp (name, old_name) == 0)
+      if (strcmp (name, current_color) == 0)
         return;
-      free (old_name);
+      free (current_color);
     }
 
-  old_name = strdup (name);
+  alpha_changed = 0;
+
+  current_color = strdup (name);
 
   if (name == NULL)
     {
@@ -424,6 +429,7 @@ ghid_set_color (hidGC gc, const char *name)
     }
   if (1) {
     double maxi, mult;
+    alpha_mult *= global_alpha_mult;
     if (priv->trans_lines)
       a = a * alpha_mult;
     maxi = r;
@@ -445,6 +451,16 @@ ghid_set_color (hidGC gc, const char *name)
 }
 
 void
+ghid_global_alpha_mult (hidGC gc, double alpha_mult)
+{
+  if (alpha_mult != global_alpha_mult) {
+    global_alpha_mult = alpha_mult;
+    alpha_changed = 1;
+    ghid_set_color (gc, current_color);
+  }
+}
+
+void
 ghid_set_line_cap (hidGC gc, EndCapStyle style)
 {
   gc->cap = style;
@@ -556,6 +572,15 @@ ghid_fill_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box)
 }
 
 void
+ghid_thindraw_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box)
+{
+  common_thindraw_pcb_polygon (gc, poly, clip_box);
+  ghid_global_alpha_mult (gc, 0.25);
+  ghid_fill_pcb_polygon (gc, poly, clip_box);
+  ghid_global_alpha_mult (gc, 1.0);
+}
+
+void
 ghid_fill_rect (hidGC gc, int x1, int y1, int x2, int y2)
 {
   USE_GC (gc);
diff --git a/src/hid/gtk/gtkhid-main.c b/src/hid/gtk/gtkhid-main.c
index 9a66723..74e6a8c 100644
--- a/src/hid/gtk/gtkhid-main.c
+++ b/src/hid/gtk/gtkhid-main.c
@@ -2129,6 +2129,7 @@ hid_gtk_init ()
   ghid_hid.fill_circle              = ghid_fill_circle;
   ghid_hid.fill_polygon             = ghid_fill_polygon;
   ghid_hid.fill_pcb_polygon         = ghid_fill_pcb_polygon;
+  ghid_hid.thindraw_pcb_polygon     = ghid_thindraw_pcb_polygon;
   ghid_hid.fill_rect                = ghid_fill_rect;
 
   ghid_hid.calibrate                = ghid_calibrate;
diff --git a/src/hid/gtk/gui.h b/src/hid/gtk/gui.h
index 00856da..5563b82 100644
--- a/src/hid/gtk/gui.h
+++ b/src/hid/gtk/gui.h
@@ -487,6 +487,8 @@ void ghid_fill_circle (hidGC gc, int cx, int cy, int radius);
 void ghid_fill_polygon (hidGC gc, int n_coords, int *x, int *y);
 void ghid_fill_pcb_polygon (hidGC gc, PolygonType *poly,
                             const BoxType *clip_box); /* GL ONLY */
+void ghid_thindraw_pcb_polygon (hidGC gc, PolygonType *poly,
+                                const BoxType *clip_box); /* GL ONLY */
 void ghid_fill_rect (hidGC gc, int x1, int y1, int x2, int y2);
 void ghid_invalidate_lr (int left, int right, int top, int bottom);
 void ghid_invalidate_all ();
