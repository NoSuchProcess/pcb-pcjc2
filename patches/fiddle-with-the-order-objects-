Bottom: 7b9d170f689f1e669738a363edeada230b6c1a0a
Top:    9c94b0da9f63cd1388beb3b55693eeb1fd52ee90
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2009-10-23 00:16:31 +0100

Fiddle with the order objects are clipped from pours

Seems to save a little bit of time clipping polygons at startup. It seems
that clipping simpler, but common objects first, such as lines, means
those clips go faster. We then clip the more complex items which introduce
more complexity to the polygons.
















---

diff --git a/src/pour.c b/src/pour.c
index b9c1de3..c726418 100644
--- a/src/pour.c
+++ b/src/pour.c
@@ -667,12 +667,12 @@ ClearPour (DataTypePtr Data, LayerTypePtr Layer, PourType * pour,
         r += r_search (Data->pad_tree, &region, NULL, pad_sub_callback, &info);
       GROUP_LOOP (Data, group);
       {
+        r += r_search (layer->pour_tree, &region, NULL, pour_sub_callback, &info);
         r += r_search (layer->line_tree, &region, NULL, line_sub_callback, &info);
         subtract_poly (info.accumulate, &info.pg);
         info.accumulate = NULL;
         r += r_search (layer->arc_tree,  &region, NULL, arc_sub_callback,  &info);
         r += r_search (layer->text_tree, &region, NULL, text_sub_callback, &info);
-        r += r_search (layer->pour_tree, &region, NULL, pour_sub_callback, &info);
       }
       END_LOOP;
       r += r_search (Data->via_tree, &region, NULL, pin_sub_callback, &info);
