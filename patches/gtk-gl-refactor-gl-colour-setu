Bottom: 867fbf689dbc7fe2866d50a5cfb6d1faaf30b502
Top:    f8ec05d47f9a8e26204964880f0c6c1e60f4187b
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-05-14 00:54:16 +0100

gtk/gl: Refactor GL colour setup handling


---

diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index 2d80bb2..6d97de6 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -45,6 +45,7 @@ typedef struct render_priv {
   bool trans_lines;
   bool in_context;
   int subcomposite_stencil_bit;
+  char *current_colorname;
 } render_priv;
 
 
@@ -52,7 +53,7 @@ typedef struct hid_gc_struct
 {
   HID *me_pointer;
 
-  gchar *colorname;
+  const char *colorname;
   gint width;
   gint cap, join;
   gchar xor;
@@ -346,40 +347,34 @@ typedef struct
   double blue;
 } ColorCache;
 
-void
-ghid_set_color (hidGC gc, const char *name)
+static void
+set_gl_color_for_gc (hidGC gc)
 {
   render_priv *priv = gport->render_priv;
   static void *cache = NULL;
-  static char *old_name = NULL;
   hidval cval;
   ColorCache *cc;
   double alpha_mult = 1.0;
   double r, g, b, a;
   a = 1.0;
 
-  current_gc = gc;
-
-  if (old_name != NULL)
-    {
-      if (strcmp (name, old_name) == 0)
-        return;
-      free (old_name);
-    }
+  if (priv->current_colorname != NULL &&
+      strcmp (priv->current_colorname, gc->colorname) == 0)
+    return;
 
-  old_name = strdup (name);
-  gc->colorname = (char *) name;
+  free (priv->current_colorname);
+  priv->current_colorname = strdup (gc->colorname);
 
   if (gport->colormap == NULL)
     gport->colormap = gtk_widget_get_colormap (gport->top_window);
-  if (strcmp (name, "erase") == 0)
+  if (strcmp (gc->colorname, "erase") == 0)
     {
       gc->erase = 1;
       r = gport->bg_color.red   / 65535.;
       g = gport->bg_color.green / 65535.;
       b = gport->bg_color.blue  / 65535.;
     }
-  else if (strcmp (name, "drill") == 0)
+  else if (strcmp (gc->colorname, "drill") == 0)
     {
       gc->erase = 0;
       alpha_mult = 0.85;
@@ -390,19 +385,19 @@ ghid_set_color (hidGC gc, const char *name)
   else
     {
       alpha_mult = 0.7;
-      if (hid_cache_color (0, name, &cval, &cache))
+      if (hid_cache_color (0, gc->colorname, &cval, &cache))
         cc = (ColorCache *) cval.ptr;
       else
         {
           cc = (ColorCache *) malloc (sizeof (ColorCache));
           memset (cc, 0, sizeof (*cc));
           cval.ptr = cc;
-          hid_cache_color (1, name, &cval, &cache);
+          hid_cache_color (1, gc->colorname, &cval, &cache);
         }
 
       if (!cc->color_set)
         {
-          if (gdk_color_parse (name, &cc->color))
+          if (gdk_color_parse (gc->colorname, &cc->color))
             gdk_color_alloc (gport->colormap, &cc->color);
           else
             gdk_color_white (gport->colormap, &cc->color);
@@ -454,6 +449,12 @@ ghid_set_color (hidGC gc, const char *name)
 }
 
 void
+ghid_set_color (hidGC gc, const char *name)
+{
+  gc->colorname = name;
+}
+
+void
 ghid_set_line_cap (hidGC gc, EndCapStyle style)
 {
   gc->cap = style;
@@ -507,7 +508,7 @@ use_gc (hidGC gc)
 
   current_gc = gc;
 
-  ghid_set_color (gc, gc->colorname);
+  set_gl_color_for_gc (gc);
   return 1;
 }
