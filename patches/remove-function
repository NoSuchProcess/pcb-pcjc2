Bottom: a23d8585160d52d515b3e735117844e06b92388d
Top:    7956a57a35174a99428c91c24ce80a8ab558ca65
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2014-07-05 16:36:54 +0100

Remove function SearchScreenGridSlop() and use SearchObjectByLocation() directly


---

diff --git a/src/crosshair.c b/src/crosshair.c
index 348afdd..097b7ca 100644
--- a/src/crosshair.c
+++ b/src/crosshair.c
@@ -844,8 +844,9 @@ check_snap_offgrid_line (struct snap_data *snap_data,
   /* Pick the nearest grid-point in the x or y direction
    * to align with, then adjust until we hit the line
    */
-  ans = SearchScreenGridSlop (Crosshair.X, Crosshair.Y,
-                              LINE_TYPE, &ptr1, &ptr2, &ptr3);
+  ans = SearchObjectByLocation (LINE_TYPE, &ptr1, &ptr2, &ptr3,
+                                Crosshair.X, Crosshair.Y, PCB->Grid / 2);
+
 
   if (ans == NO_TYPE)
     return;
@@ -961,8 +962,8 @@ FitCrosshairIntoGrid (Coord X, Coord Y)
 
   ans = NO_TYPE;
   if (!PCB->RatDraw)
-    ans = SearchScreenGridSlop (Crosshair.X, Crosshair.Y,
-                                ELEMENT_TYPE, &ptr1, &ptr2, &ptr3);
+    ans = SearchObjectByLocation (ELEMENT_TYPE, &ptr1, &ptr2, &ptr3,
+                                  Crosshair.X, Crosshair.Y, PCB->Grid / 2);
 
   if (ans & ELEMENT_TYPE)
     {
@@ -972,8 +973,8 @@ FitCrosshairIntoGrid (Coord X, Coord Y)
 
   ans = NO_TYPE;
   if (PCB->RatDraw || TEST_FLAG (SNAPPINFLAG, PCB))
-    ans = SearchScreenGridSlop (Crosshair.X, Crosshair.Y,
-                                PAD_TYPE, &ptr1, &ptr2, &ptr3);
+    ans = SearchObjectByLocation (PAD_TYPE, &ptr1, &ptr2, &ptr3,
+                                  Crosshair.X, Crosshair.Y, PCB->Grid / 2);
 
   /* Avoid self-snapping when moving */
   if (ans != NO_TYPE &&
@@ -1029,8 +1030,8 @@ FitCrosshairIntoGrid (Coord X, Coord Y)
 
   ans = NO_TYPE;
   if (PCB->RatDraw || TEST_FLAG (SNAPPINFLAG, PCB))
-    ans = SearchScreenGridSlop (Crosshair.X, Crosshair.Y,
-                                PIN_TYPE, &ptr1, &ptr2, &ptr3);
+    ans = SearchObjectByLocation (PIN_TYPE, &ptr1, &ptr2, &ptr3,
+                                  Crosshair.X, Crosshair.Y, PCB->Grid / 2);
 
   /* Avoid self-snapping when moving */
   if (ans != NO_TYPE &&
@@ -1047,8 +1048,8 @@ FitCrosshairIntoGrid (Coord X, Coord Y)
 
   ans = NO_TYPE;
   if (TEST_FLAG (SNAPPINFLAG, PCB))
-    ans = SearchScreenGridSlop (Crosshair.X, Crosshair.Y,
-                                VIA_TYPE, &ptr1, &ptr2, &ptr3);
+    ans = SearchObjectByLocation (VIA_TYPE, &ptr1, &ptr2, &ptr3,
+                                  Crosshair.X, Crosshair.Y, PCB->Grid / 2);
 
   /* Avoid snapping vias to any other vias */
   if (Settings.Mode == MOVE_MODE &&
@@ -1064,9 +1065,9 @@ FitCrosshairIntoGrid (Coord X, Coord Y)
 
   ans = NO_TYPE;
   if (TEST_FLAG (SNAPPINFLAG, PCB))
-    ans = SearchScreenGridSlop (Crosshair.X, Crosshair.Y,
-                                LINEPOINT_TYPE | ARCPOINT_TYPE,
-                                &ptr1, &ptr2, &ptr3);
+    ans = SearchObjectByLocation (LINEPOINT_TYPE | ARCPOINT_TYPE,
+                                  &ptr1, &ptr2, &ptr3,
+                                  Crosshair.X, Crosshair.Y, PCB->Grid / 2);
 
   if (ans != NO_TYPE)
     {
@@ -1078,8 +1079,8 @@ FitCrosshairIntoGrid (Coord X, Coord Y)
 
   ans = NO_TYPE;
   if (TEST_FLAG (SNAPPINFLAG, PCB))
-    ans = SearchScreenGridSlop (Crosshair.X, Crosshair.Y,
-                                POLYGONPOINT_TYPE, &ptr1, &ptr2, &ptr3);
+    ans = SearchObjectByLocation (POLYGONPOINT_TYPE, &ptr1, &ptr2, &ptr3,
+                                  Crosshair.X, Crosshair.Y, PCB->Grid / 2);
 
   if (ans != NO_TYPE)
     {
@@ -1095,9 +1096,9 @@ FitCrosshairIntoGrid (Coord X, Coord Y)
 
   if (Settings.Mode == ARROW_MODE)
     {
-      ans = SearchScreenGridSlop (Crosshair.X, Crosshair.Y,
-                                  LINEPOINT_TYPE | ARCPOINT_TYPE,
-                                  &ptr1, &ptr2, &ptr3);
+      ans = SearchObjectByLocation (LINEPOINT_TYPE | ARCPOINT_TYPE,
+                                    &ptr1, &ptr2, &ptr3,
+                                    Crosshair.X, Crosshair.Y, PCB->Grid / 2);
       if (ans == NO_TYPE)
         hid_action("PointCursor");
       else if (!TEST_FLAG(SELECTEDFLAG, (LineType *)ptr2))
diff --git a/src/search.c b/src/search.c
index 5f4ea5e..c997c92 100644
--- a/src/search.c
+++ b/src/search.c
@@ -1617,17 +1617,3 @@ SearchScreen (Coord X, Coord Y, int Type, void **Result1,
 				X, Y, SLOP * pixel_slop);
   return (ans);
 }
-
-/* ---------------------------------------------------------------------------
- * searches the cursor position for the type
- */
-int
-SearchScreenGridSlop (Coord X, Coord Y, int Type, void **Result1,
-	      void **Result2, void **Result3)
-{
-  int ans;
-
-  ans = SearchObjectByLocation (Type, Result1, Result2, Result3,
-				X, Y, PCB->Grid / 2);
-  return (ans);
-}
diff --git a/src/search.h b/src/search.h
index bdf460e..b6488fc 100644
--- a/src/search.h
+++ b/src/search.h
@@ -81,7 +81,6 @@ bool IsPointInPad (Coord, Coord, Coord, PadType *);
 bool IsPointInBox (Coord, Coord, BoxType *, Coord);
 int SearchObjectByLocation (unsigned, void **, void **, void **, Coord, Coord, Coord);
 int SearchScreen (Coord, Coord, int, void **, void **, void **);
-int SearchScreenGridSlop (Coord, Coord, int, void **, void **, void **);
 int SearchObjectByID (DataType *, void **, void **, void **, int, int);
 ElementType * SearchElementByName (DataType *, char *);
