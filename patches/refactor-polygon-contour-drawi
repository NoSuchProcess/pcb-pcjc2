Bottom: 6d41e3d0032c07f307905c76acc1a14281fcb536
Top:    862ae482ab11e5d4690947bf4741ac081a8fb1c1
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2010-12-07 02:06:39 +0000

Refactor polygon contour drawing


---

diff --git a/src/hid/common/hidgl.c b/src/hid/common/hidgl.c
index 6931651..9e3b9ed 100644
--- a/src/hid/common/hidgl.c
+++ b/src/hid/common/hidgl.c
@@ -585,6 +585,28 @@ hidgl_fill_polygon (int n_coords, int *x, int *y)
   free (vertices);
 }
 
+static void
+fill_contour (PLINE *contour, double scale)
+{
+  cairo_traps_t traps;
+
+  /* If the contour is round, and hidgl_fill_circle would use
+   * less slices than we have vertices to draw it, then call
+   * hidgl_fill_circle to draw this contour.
+   */
+  if (contour->is_round) {
+    double slices = calc_slices (contour->radius / scale, 2 * M_PI);
+    if (slices < contour->Count) {
+      hidgl_fill_circle (contour->cx, contour->cy, contour->radius, scale);
+      return;
+    }
+  }
+
+  _cairo_traps_init (&traps);
+  bo_contour_to_traps (contour, &traps);
+  _cairo_traps_fini (&traps);
+}
+
 struct do_hole_info {
   double scale;
 };
@@ -594,29 +616,13 @@ do_hole (const BoxType *b, void *cl)
 {
   struct do_hole_info *info = cl;
   PLINE *curc = (PLINE *) b;
-  cairo_traps_t traps;
 
   /* Ignore the outer contour - we draw it first explicitly*/
   if (curc->Flags.orient == PLF_DIR) {
     return 0;
   }
 
-  /* If the contour is round, and hidgl_fill_circle would use
-   * less slices than we have vertices to draw it, then call
-   * hidgl_fill_circle to draw this contour.
-   */
-  if (curc->is_round) {
-    double slices = calc_slices (curc->radius / info->scale, 2 * M_PI);
-    if (slices < curc->Count) {
-      hidgl_fill_circle (curc->cx, curc->cy, curc->radius, info->scale);
-      return 1;
-    }
-  }
-
-  _cairo_traps_init (&traps);
-  bo_contour_to_traps (curc, &traps);
-  _cairo_traps_fini (&traps);
-
+  fill_contour (curc, info->scale);
   return 1;
 }
 
@@ -630,7 +636,6 @@ hidgl_fill_pcb_polygon (PolygonType *poly, const BoxType *clip_box, double scale
 {
   struct do_hole_info info;
   int stencil_bit;
-  cairo_traps_t traps;
 
   info.scale = scale;
   global_scale = scale;
@@ -679,9 +684,7 @@ hidgl_fill_pcb_polygon (PolygonType *poly, const BoxType *clip_box, double scale
                                                               // any bits permitted by the stencil writemask
 
   /* Draw the polygon outer */
-  _cairo_traps_init (&traps);
-  bo_contour_to_traps (poly->Clipped->contours, &traps);
-  _cairo_traps_fini (&traps);
+  fill_contour (poly->Clipped->contours, scale);
   hidgl_flush_triangles (&buffer);
 
   /* Unassign our stencil buffer bit */
