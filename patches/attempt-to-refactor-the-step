Bottom: ec30e6d36b91ca7416c885a03cf8f85ef6425a14
Top:    ccd437c470a77723448066db8597f6bb18eaabb3
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2014-06-07 13:41:46 +0100

Attempt to refactor the STEP emission somewhat


---

diff --git a/src/Makefile.am b/src/Makefile.am
index 88d1209..2947e6e 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -192,6 +192,8 @@ LIBGTK_GL_SRCS= \
 	hid/gtk/gtkhid-gl.c \
 	hid/gtk/gui-trackball.c \
 	hid/gtk/gui-trackball.h \
+	hid/gtk/step.c \
+	hid/gtk/step.h \
 	hid/gtk/quad.c \
 	hid/gtk/quad.h \
 	hid/gtk/vertex3d.c \
diff --git a/src/hid/gtk/contour3d.c b/src/hid/gtk/contour3d.c
index 6aa3189..a9976cc 100644
--- a/src/hid/gtk/contour3d.c
+++ b/src/hid/gtk/contour3d.c
@@ -1,6 +1,8 @@
 #include <glib.h>
 #include <stdbool.h>
+#include <stdio.h>
 
+#include "step.h"
 #include "quad.h"
 #include "contour3d.h"
 
diff --git a/src/hid/gtk/contour3d.h b/src/hid/gtk/contour3d.h
index 8ce8d8a..837e666 100644
--- a/src/hid/gtk/contour3d.h
+++ b/src/hid/gtk/contour3d.h
@@ -2,7 +2,7 @@ typedef struct {
   edge_ref first_edge;
 
   /* STEP crap - to hell with encapsulation */
-  int face_bound_identifier;
+  step_id face_bound_identifier;
 } contour3d;
 
 contour3d *make_contour3d (edge_ref first_edge);
diff --git a/src/hid/gtk/edge3d.c b/src/hid/gtk/edge3d.c
index 9014125..2d34558 100644
--- a/src/hid/gtk/edge3d.c
+++ b/src/hid/gtk/edge3d.c
@@ -1,7 +1,9 @@
 #include <stdbool.h>
 #include <stdlib.h>
+#include <stdio.h>
 #include <glib.h>
 
+#include "step.h"
 #include "edge3d.h"
 
 edge_info *
diff --git a/src/hid/gtk/edge3d.h b/src/hid/gtk/edge3d.h
index b91ff40..696ace3 100644
--- a/src/hid/gtk/edge3d.h
+++ b/src/hid/gtk/edge3d.h
@@ -14,8 +14,8 @@ typedef struct
   float radius;
 
   /* STEP crap - to hell with encapsulation */
-  int infinite_line_identifier;
-  int edge_identifier;
+  step_id infinite_line_identifier;
+  step_id edge_identifier;
 } edge_info;
 
 edge_info *make_edge_info (void);
diff --git a/src/hid/gtk/face3d.c b/src/hid/gtk/face3d.c
index ff20c3f..8e8f8c0 100644
--- a/src/hid/gtk/face3d.c
+++ b/src/hid/gtk/face3d.c
@@ -1,6 +1,8 @@
 #include <glib.h>
 #include <stdbool.h>
+#include <stdio.h>
 
+#include "step.h"
 #include "quad.h"
 #include "contour3d.h"
 #include "appearance.h"
diff --git a/src/hid/gtk/face3d.h b/src/hid/gtk/face3d.h
index bb9cd31..44f6e88 100644
--- a/src/hid/gtk/face3d.h
+++ b/src/hid/gtk/face3d.h
@@ -11,10 +11,10 @@ typedef struct {
   appearance *appear;
 
   /* STEP crap - to hell with encapsulation */
-  int surface_identifier;
+  step_id surface_identifier;
   bool surface_orientation_reversed;
-  int face_identifier;
-  int face_bound_identifier;
+  step_id face_identifier;
+  step_id face_bound_identifier;
 } face3d;
 
 face3d *make_face3d (void);
diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index 5d6087e..eb163eb 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -15,6 +15,7 @@
 #include "gui-pinout-preview.h"
 #include "pcb-printf.h"
 
+#include "step.h"
 #include "quad.h"
 #include "vertex3d.h"
 #include "contour3d.h"
diff --git a/src/hid/gtk/object3d.c b/src/hid/gtk/object3d.c
index 2b42e3a..66eace1 100644
--- a/src/hid/gtk/object3d.c
+++ b/src/hid/gtk/object3d.c
@@ -5,6 +5,7 @@
 
 #include <glib.h>
 
+#include "step.h"
 #include "quad.h"
 #include "vertex3d.h"
 #include "contour3d.h"
@@ -300,9 +301,9 @@ void
 object3d_export_to_step (object3d *object, char *filename)
 {
   FILE *f;
+  step_file *step;
   time_t currenttime;
   struct tm utc;
-  int next_step_identifier;
   int geometric_representation_context_identifier;
   int shape_representation_identifier;
   int brep_identifier;
@@ -322,6 +323,8 @@ object3d_export_to_step (object3d *object, char *filename)
       return;
     }
 
+  step = step_output_file (f);
+
   currenttime = time (NULL);
   gmtime_r (&currenttime, &utc);
 
@@ -363,9 +366,9 @@ object3d_export_to_step (object3d *object, char *filename)
               "#9 = PRODUCT_DEFINITION_SHAPE ( 'NONE', 'NONE',  #8 ) ;\n");
 
   /* Need an anchor in 3D space to orient the shape */
-  fprintf (f, "#10 =    CARTESIAN_POINT ( 'NONE',  ( 0.0, 0.0, 0.0 ) ) ;\n"
-              "#11 =          DIRECTION ( 'NONE',  ( 0.0, 0.0, 1.0 ) ) ;\n"
-              "#12 =          DIRECTION ( 'NONE',  ( 1.0, 0.0, 0.0 ) ) ;\n"
+  fprintf (f, "#10 =    CARTESIAN_POINT ( 'NONE', ( 0.0, 0.0, 0.0 ) ) ;\n"
+              "#11 =          DIRECTION ( 'NONE', ( 0.0, 0.0, 1.0 ) ) ;\n"
+              "#12 =          DIRECTION ( 'NONE', ( 1.0, 0.0, 0.0 ) ) ;\n"
               "#13 = AXIS2_PLACEMENT_3D ( 'NONE', #10, #11, #12 ) ;\n");
 
   /* Grr.. more boilerplate - this time unit definitions */
@@ -378,14 +381,14 @@ object3d_export_to_step (object3d *object, char *filename)
   geometric_representation_context_identifier = 18;
 
   /* Save a place for the advanced_brep_shape_representation identifier */
-  next_step_identifier = 19;
-  shape_representation_identifier = next_step_identifier++;
+  step->next_id = 19;
+  shape_representation_identifier = step->next_id++;
 
   fprintf (f, "#20 = SHAPE_DEFINITION_REPRESENTATION ( #9, #%i ) ;\n", shape_representation_identifier);
 
   /* Save a place for the brep identifier */
-  next_step_identifier = 21;
-  brep_identifier = next_step_identifier++;
+  step->next_id = 21;
+  brep_identifier = step->next_id++;
 
   /* Body style */
   fprintf (f, "#22 = COLOUR_RGB ( '', %f, %f, %f ) ;\n", object->appear->r, object->appear->g, object->appear->b);
@@ -399,7 +402,7 @@ object3d_export_to_step (object3d *object, char *filename)
   brep_style_identifier = 29;
   fprintf (f, "#30 = PRESENTATION_LAYER_ASSIGNMENT (  '1', 'Layer 1', ( #%i ) ) ;\n", brep_style_identifier);
 
-  next_step_identifier = 31;
+  step->next_id = 31;
   styled_item_identifiers = g_list_append (styled_item_identifiers, GINT_TO_POINTER (brep_style_identifier));
 
 #define FWD 1
@@ -415,22 +418,15 @@ object3d_export_to_step (object3d *object, char *filename)
       if (face->is_cylindrical)
         {
           /* CYLINDRICAL SURFACE NORMAL POINTS OUTWARDS AWAY FROM ITS AXIS.
-           * BECAUSE OUR ROUND CONTOURS ARE (CURRENTLY) ALWAYS HOLES IN THE SOLID,
-           * THIS MEANS THE CYLINDER NORMAL POINTS INTO THE OBJECT
+           * face->surface_orientation_reversed NEEDS TO BE SET FOR HOLES IN THE SOLID
            */
-          fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; "
-                      "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                      "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                      "#%i = AXIS2_PLACEMENT_3D ( 'NONE', #%i, #%i, #%i ) ; "
-                      "#%i = CYLINDRICAL_SURFACE ( 'NONE', #%i, %f ) ;\n",
-                   next_step_identifier,     /* A point on the axis of the cylinder */ face->cx, face->cy, face->cz,
-                   next_step_identifier + 1, /* Direction of the cylindrical axis */   face->ax, face->ay, face->az,
-                   next_step_identifier + 2, /* A normal to the axis direction */      face->nx, face->ny, face->nz,
-                   next_step_identifier + 3, next_step_identifier, next_step_identifier + 1, next_step_identifier + 2,
-                   next_step_identifier + 4, next_step_identifier + 3, face->radius);
-
-          face->surface_identifier = next_step_identifier + 4;
-          next_step_identifier = next_step_identifier + 5;
+          face->surface_identifier =
+            step_cylindrical_surface (step, "NONE",
+                                      step_axis2_placement_3d (step, "NONE",
+                                                               step_cartesian_point (step, "NONE", face->cx, face->cy, face->cz),
+                                                                     step_direction (step, "NONE", face->ax, face->ay, face->az),
+                                                                     step_direction (step, "NONE", face->nx, face->ny, face->nz)),
+                                      face->radius);
         }
       else
         {
@@ -460,19 +456,12 @@ object3d_export_to_step (object3d *object, char *filename)
           ry = ((vertex3d *)DDATA (first_edge))->y - oy;
           rz = ((vertex3d *)DDATA (first_edge))->z - oz;
 
-          fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; "
-                      "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                      "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                      "#%i = AXIS2_PLACEMENT_3D ( 'NONE', #%i, #%i, #%i ) ; "
-                      "#%i = PLANE ( 'NONE',  #%i ) ;\n",
-                   next_step_identifier,     /* A point on the plane. Forms 0,0 of its parameterised coords. */ ox, oy, oz,
-                   next_step_identifier + 1, /* An axis direction normal to the the face - Gives z-axis */      nx, ny, nz,
-                   next_step_identifier + 2, /* Reference x-axis, orthogonal to z-axis above */                 rx, ry, rz,
-                   next_step_identifier + 3, next_step_identifier, next_step_identifier + 1, next_step_identifier + 2,
-                   next_step_identifier + 4, next_step_identifier + 3);
-
-          face->surface_identifier = next_step_identifier + 4;
-          next_step_identifier = next_step_identifier + 5;
+          face->surface_identifier =
+            step_plane (step, "NONE",
+                        step_axis2_placement_3d (step, "NONE",
+                                                 step_cartesian_point (step, "NONE", ox, oy, oz),   /* A point on the plane. Forms 0,0 of its parameterised coords. */
+                                                       step_direction (step, "NONE", nx, ny, nz),   /* An axis direction normal to the the face - Gives z-axis */
+                                                       step_direction (step, "NONE", rx, ry, rz))); /* Reference x-axis, orthogonal to z-axis above */
         }
     }
 
@@ -484,43 +473,27 @@ object3d_export_to_step (object3d *object, char *filename)
 
       if (info->is_round)
         {
-          fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; "
-                      "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                      "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                      "#%i = AXIS2_PLACEMENT_3D ( 'NONE', #%i,  #%i,  #%i ) ; "
-                      "#%i = CIRCLE ( 'NONE', #%i, %f ) ;\n",
-                   next_step_identifier,     /* Center of the circle   */ info->cx, info->cy, info->cz, // <--- Center of coordinate placement
-                   next_step_identifier + 1, /* Normal of circle?      */ info->nx, info->ny, info->nz, // <--- Z-axis direction of placement             /* XXX: PULL FROM FACE DATA */
-//                   next_step_identifier + 1, /* Normal of circle?      */ 0.0, 0.0, -1.0, // <--- Z-axis direction of placement             /* XXX: PULL FROM FACE DATA */
-                   next_step_identifier + 2, /* ??????                 */ -1.0, 0.0, 0.0, // <--- Approximate X-axis direction of placement /* XXX: PULL FROM FACE DATA */
-                   next_step_identifier + 3, next_step_identifier, next_step_identifier + 1, next_step_identifier + 2,
-                   next_step_identifier + 4, next_step_identifier + 3, info->radius);
-          info->infinite_line_identifier = next_step_identifier + 4;
-          next_step_identifier = next_step_identifier + 5;
+          info->infinite_line_identifier =
+            step_circle (step, "NONE",
+                         step_axis2_placement_3d (step, "NONE",
+                                                  step_cartesian_point (step, "NONE", info->cx, info->cy, info->cz),  // <--- Center of the circle
+                                                        step_direction (step, "NONE", info->nx, info->ny, info->nz),  // <--- Normal of the circle
+                                                        step_direction (step, "NONE", -1.0,     0.0,      0.0)),      // <--- Approximate X-axis direction of placement /* XXX: PULL FROM FACE DATA */
+                                                        info->radius);
         }
       else
         {
-          float  x,  y,  z;
-          float dx, dy, dz;
-
-          x = ((vertex3d *)ODATA (edge))->x;
-          y = ((vertex3d *)ODATA (edge))->y;
-          z = ((vertex3d *)ODATA (edge))->z;
-
-          dx = ((vertex3d *)DDATA (edge))->x - x;
-          dy = ((vertex3d *)DDATA (edge))->y - y;
-          dz = ((vertex3d *)DDATA (edge))->z - z;
-
-          fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; "
-                      "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                      "#%i = VECTOR ( 'NONE', #%i, 1000.0 ) ; "
-                      "#%i = LINE ( 'NONE', #%i, #%i ) ;\n",
-                   next_step_identifier,     /* A point on the line         */  x,  y,  z,
-                   next_step_identifier + 1, /* A direction along the line  */ dx, dy, dz,
-                   next_step_identifier + 2, next_step_identifier + 1,
-                   next_step_identifier + 3, next_step_identifier, next_step_identifier + 2);
-          info->infinite_line_identifier = next_step_identifier + 3;
-          next_step_identifier = next_step_identifier + 4;
+          vertex3d *ov = ODATA (edge);
+          vertex3d *dv = DDATA (edge);
+
+          info->infinite_line_identifier =
+            step_line (step, "NONE",
+                       step_cartesian_point (step, "NONE", ov->x, ov->y, ov->z),  // <--- A point on the line (the origin vertex)
+                       step_vector (step, "NONE",
+                                    step_direction (step, "NONE", dv->x - ov->x,
+                                                                  dv->y - ov->y,
+                                                                  dv->z - ov->z),  // <--- Direction along the line
+                                    1000.0));     // <--- Arbitrary length in this direction for the parameterised coordinate "1".
         }
     }
 
@@ -529,10 +502,9 @@ object3d_export_to_step (object3d *object, char *filename)
     {
       vertex3d *vertex = vertex_iter->data;
 
-      fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; ", next_step_identifier, vertex->x, vertex->y, vertex->z); /* Vertex coordinate  */ 
-      fprintf (f, "#%i = VERTEX_POINT ( 'NONE', #%i ) ;\n",             next_step_identifier + 1, next_step_identifier);
-      vertex->vertex_identifier = next_step_identifier + 1;
-      next_step_identifier = next_step_identifier + 2;
+      vertex->vertex_identifier = step_vertex_point (step, "NONE",
+                                                     step_cartesian_point (step, "NONE",
+                                                                           vertex->x, vertex->y, vertex->z));
     }
 
   /* Define the Edges */
@@ -540,15 +512,13 @@ object3d_export_to_step (object3d *object, char *filename)
     {
       edge_ref edge = (edge_ref)edge_iter->data;
       edge_info *info = UNDIR_DATA (edge);
+      step_id sv = ((vertex3d *)ODATA (edge))->vertex_identifier;
+      step_id ev = ((vertex3d *)DDATA (edge))->vertex_identifier;
 
-      int sv = ((vertex3d *)ODATA (edge))->vertex_identifier;
-      int ev = ((vertex3d *)DDATA (edge))->vertex_identifier;
-
-      fprintf (f, "#%i = EDGE_CURVE ( 'NONE', #%i, #%i, #%i, .T. ) ; ", next_step_identifier, sv, ev, info->infinite_line_identifier);
-      fprintf (f, "#%i = ORIENTED_EDGE ( 'NONE', *, *, #%i, .T. ) ; ",    next_step_identifier + 1, next_step_identifier);
-      fprintf (f, "#%i = ORIENTED_EDGE ( 'NONE', *, *, #%i, .F. ) ;\n",   next_step_identifier + 2, next_step_identifier);
-      info->edge_identifier = next_step_identifier; /* Add 1 for same oriented, add 2 for back oriented */
-      next_step_identifier = next_step_identifier + 3;
+      /* XXX: The lookup of these edges by adding to info->edge_identifier requires the step_* functions to assign sequential identifiers */
+      info->edge_identifier = step_edge_curve (step, "NONE", sv, ev, info->infinite_line_identifier, true);
+      step_oriented_edge (step, "NONE", info->edge_identifier, true);  /* Add 1 to info->edge_identifier to find this (same) oriented edge */
+      step_oriented_edge (step, "NONE", info->edge_identifier, false); /* Add 2 to info->edge_identifier to find this (back) oriented edge */
     }
 
   /* Define the faces */
@@ -563,7 +533,7 @@ object3d_export_to_step (object3d *object, char *filename)
         contour3d *contour = contour_iter->data;
         edge_ref edge;
 
-        fprintf (f, "#%i = EDGE_LOOP ( 'NONE', ", next_step_identifier);
+        fprintf (f, "#%i = EDGE_LOOP ( 'NONE', ", step->next_id);
 
         /* Emit the edges.. */
         fprintf (f, "(");
@@ -575,12 +545,12 @@ object3d_export_to_step (object3d *object, char *filename)
         fprintf (f, "#%i)", ORIENTED_EDGE_IDENTIFIER(edge)); /* XXX: IS ORIENTATION GOING TO BE CORRECT?? */
         fprintf (f, " ) ; ");
 
-        fprintf (f, "#%i = FACE_%sBOUND ( 'NONE', #%i, .T. ) ;\n", next_step_identifier + 1, outer_contour ? "OUTER_" : "", next_step_identifier);
-        contour->face_bound_identifier = next_step_identifier + 1;
-        next_step_identifier = next_step_identifier + 2;
+        fprintf (f, "#%i = FACE_%sBOUND ( 'NONE', #%i, .T. ) ;\n", step->next_id + 1, outer_contour ? "OUTER_" : "", step->next_id);
+        contour->face_bound_identifier = step->next_id + 1;
+        step->next_id = step->next_id + 2;
       }
 
-      fprintf (f, "#%i = ADVANCED_FACE ( 'NONE', ", next_step_identifier);
+      fprintf (f, "#%i = ADVANCED_FACE ( 'NONE', ", step->next_id);
       fprintf (f, "(");
       for (contour_iter = face->contours;
            contour_iter != NULL && g_list_next (contour_iter) != NULL;
@@ -589,28 +559,28 @@ object3d_export_to_step (object3d *object, char *filename)
       }
       fprintf (f, "#%i)", ((contour3d *)contour_iter->data)->face_bound_identifier);
       fprintf (f, ", #%i, %s ) ;\n", face->surface_identifier, face->surface_orientation_reversed ? ".F." : ".T.");
-      face->face_identifier = next_step_identifier;
-      next_step_identifier = next_step_identifier + 1;
+      face->face_identifier = step->next_id;
+      step->next_id = step->next_id + 1;
 
       if (face->appear != NULL) {
         /* Face styles */
-        fprintf (f, "#%i = COLOUR_RGB ( '', %f, %f, %f ) ;\n",             next_step_identifier, face->appear->r, face->appear->g, face->appear->b);
-        fprintf (f, "#%i = FILL_AREA_STYLE_COLOUR ( '', #%i ) ;\n",        next_step_identifier + 1, next_step_identifier);
-        fprintf (f, "#%i = FILL_AREA_STYLE ('', ( #%i ) ) ;\n",            next_step_identifier + 2, next_step_identifier + 1);
-        fprintf (f, "#%i = SURFACE_STYLE_FILL_AREA ( #%i ) ;\n",           next_step_identifier + 3, next_step_identifier + 2);
-        fprintf (f, "#%i = SURFACE_SIDE_STYLE ('', ( #%i ) ) ;\n",         next_step_identifier + 4, next_step_identifier + 3);
-        fprintf (f, "#%i = SURFACE_STYLE_USAGE ( .BOTH. , #%i ) ;\n",      next_step_identifier + 5, next_step_identifier + 4);
-        fprintf (f, "#%i = PRESENTATION_STYLE_ASSIGNMENT ( ( #%i ) ) ;\n", next_step_identifier + 6, next_step_identifier + 5);
+        fprintf (f, "#%i = COLOUR_RGB ( '', %f, %f, %f ) ;\n",             step->next_id, face->appear->r, face->appear->g, face->appear->b);
+        fprintf (f, "#%i = FILL_AREA_STYLE_COLOUR ( '', #%i ) ;\n",        step->next_id + 1, step->next_id);
+        fprintf (f, "#%i = FILL_AREA_STYLE ('', ( #%i ) ) ;\n",            step->next_id + 2, step->next_id + 1);
+        fprintf (f, "#%i = SURFACE_STYLE_FILL_AREA ( #%i ) ;\n",           step->next_id + 3, step->next_id + 2);
+        fprintf (f, "#%i = SURFACE_SIDE_STYLE ('', ( #%i ) ) ;\n",         step->next_id + 4, step->next_id + 3);
+        fprintf (f, "#%i = SURFACE_STYLE_USAGE ( .BOTH. , #%i ) ;\n",      step->next_id + 5, step->next_id + 4);
+        fprintf (f, "#%i = PRESENTATION_STYLE_ASSIGNMENT ( ( #%i ) ) ;\n", step->next_id + 6, step->next_id + 5);
         fprintf (f, "#%i = OVER_RIDING_STYLED_ITEM ( 'NONE', ( #%i ), #%i, #%i ) ;\n",
-                 next_step_identifier + 7, next_step_identifier + 6, face->face_identifier, brep_style_identifier);
-        styled_item_identifiers = g_list_append (styled_item_identifiers, GINT_TO_POINTER (next_step_identifier + 7));
-        next_step_identifier = next_step_identifier + 8;
+                 step->next_id + 7, step->next_id + 6, face->face_identifier, brep_style_identifier);
+        styled_item_identifiers = g_list_append (styled_item_identifiers, GINT_TO_POINTER (step->next_id + 7));
+        step->next_id = step->next_id + 8;
       }
     }
 
   /* Closed shell which bounds the brep solid */
-  pcb_shell_identifier = next_step_identifier;
-  next_step_identifier++;
+  pcb_shell_identifier = step->next_id;
+  step->next_id++;
   fprintf (f, "#%i = CLOSED_SHELL ( 'NONE', ", pcb_shell_identifier);
   /* Emit the faces.. */
   fprintf (f, "(");
@@ -626,7 +596,7 @@ object3d_export_to_step (object3d *object, char *filename)
   fprintf (f, "#%i = MANIFOLD_SOLID_BREP ( 'PCB outline', #%i ) ;\n", brep_identifier, pcb_shell_identifier);
 
   /* Emit references to the styled and over_ridden styled items */
-  fprintf (f, "#%i = MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION (  '', ", next_step_identifier);
+  fprintf (f, "#%i = MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION (  '', ", step->next_id);
   fprintf (f, "(");
   for (styled_item_iter = styled_item_identifiers;
        styled_item_iter != NULL && g_list_next (styled_item_iter) != NULL;
@@ -635,7 +605,7 @@ object3d_export_to_step (object3d *object, char *filename)
   }
   fprintf (f, "#%i)", GPOINTER_TO_INT (styled_item_iter->data));
   fprintf (f, ", #%i ) ;\n", geometric_representation_context_identifier);
-  next_step_identifier = next_step_identifier + 1;
+  step->next_id = step->next_id + 1;
 
   fprintf (f, "#%i = ADVANCED_BREP_SHAPE_REPRESENTATION ( '%s', ( #%i, #13 ), #%i ) ;\n",
            shape_representation_identifier, "test_pcb_absr_name", brep_identifier, geometric_representation_context_identifier);
diff --git a/src/hid/gtk/step.c b/src/hid/gtk/step.c
new file mode 100644
index 0000000..3e4dfaa
--- /dev/null
+++ b/src/hid/gtk/step.c
@@ -0,0 +1,117 @@
+#include <glib.h>
+#include <stdbool.h>
+#include <stdio.h>
+
+#include "step.h"
+
+static char *
+step_bool (bool expr)
+{
+  return expr ? ".T." : ".F.";
+}
+
+step_file
+*step_output_file (FILE *f)
+{
+  step_file *file;
+
+  file = g_new0 (step_file, 1);
+  file->f = f;
+  file->next_id = 1;
+
+  return file;
+}
+
+void
+destroy_step_output_file (step_file *file)
+{
+  g_free (file);
+}
+
+step_id
+step_cartesian_point (step_file *file, char *name, double x, double y, double z)
+{
+  fprintf (file->f, "#%i = CARTESIAN_POINT ( '%s', ( %f, %f, %f ) ) ;\n",
+                    file->next_id, name, x, y, z);
+  return file->next_id++;
+}
+
+step_id
+step_direction (step_file *file, char *name, double x, double y, double z)
+{
+  fprintf (file->f, "#%i = DIRECTION ( '%s', ( %f, %f, %f ) ) ;\n",
+                    file->next_id, name, x, y, z);
+  return file->next_id++;
+}
+
+step_id
+step_axis2_placement_3d (step_file *file, char *name, step_id location, step_id axis, step_id ref_direction)
+{
+  fprintf (file->f, "#%i = AXIS2_PLACEMENT_3D ( '%s', ( #%i, #%i, #%i ) ) ;\n",
+                    file->next_id, name, location, axis, ref_direction);
+  return file->next_id++;
+}
+
+step_id
+step_plane (step_file *file, char *name, step_id position)
+{
+  fprintf (file->f, "#%i = PLANE ( '%s', #%i ) ;\n",
+                    file->next_id, name, position);
+  return file->next_id++;
+}
+
+step_id
+step_cylindrical_surface (step_file *file, char *name, step_id position, double radius)
+{
+  fprintf (file->f, "#%i = CYLINDRICAL_SURFACE ( '%s', #%i, %f ) ;\n",
+                    file->next_id, name, position, radius);
+  return file->next_id++;
+}
+
+step_id
+step_circle (step_file *file, char *name, step_id position, double radius)
+{
+  fprintf (file->f, "#%i = CIRCLE ( '%s', #%i, %f ) ;\n",
+                    file->next_id, name, position, radius);
+  return file->next_id++;
+}
+
+step_id
+step_vector (step_file *file, char *name, step_id orientation, double magnitude)
+{
+  fprintf (file->f, "#%i = VECTOR ( '%s', #%i, %f ) ;\n",
+                    file->next_id, name, orientation, magnitude);
+  return file->next_id++;
+}
+
+step_id
+step_line (step_file *file, char *name, step_id pnt, step_id dir)
+{
+  fprintf (file->f, "#%i = LINE ( '%s', #%i, %i ) ;\n",
+                    file->next_id, name, pnt, dir);
+  return file->next_id++;
+}
+
+step_id
+step_vertex_point (step_file *file, char *name, step_id pnt)
+{
+  fprintf (file->f, "#%i = VERTEX_POINT ( '%s', #%i ) ;\n",
+                    file->next_id, name, pnt);
+  return file->next_id++;
+}
+
+step_id
+step_edge_curve (step_file *file, char *name, step_id edge_start, step_id edge_end, step_id edge_geometry, bool same_sense)
+{
+  fprintf (file->f, "#%i = EDGE_CURVE ( '%s', #%i, #%i, #%i, %s ) ;\n",
+                    file->next_id, name, edge_start, edge_end, edge_geometry, step_bool (same_sense));
+  return file->next_id++;
+}
+
+step_id
+step_oriented_edge (step_file *file, char *name, step_id edge_element, bool orientation)
+{
+  fprintf (file->f, "#%i = ORIENTED_EDGE ( '%s', *, *, #%i, %s ) ;\n",
+                    file->next_id, name, edge_element, step_bool (orientation));
+  return file->next_id++;
+}
diff --git a/src/hid/gtk/step.h b/src/hid/gtk/step.h
new file mode 100644
index 0000000..ce4c096
--- /dev/null
+++ b/src/hid/gtk/step.h
@@ -0,0 +1,22 @@
+typedef int step_id;
+
+typedef struct {
+  FILE *f;
+  step_id next_id;
+
+} step_file;
+
+step_file *step_output_file (FILE *f);
+void destroy_step_output_file (step_file *file);
+
+step_id step_cartesian_point (step_file *file, char *name, double x, double y, double z);
+step_id step_direction (step_file *file, char *name, double x, double y, double z);
+step_id step_axis2_placement_3d (step_file *file, char *name, step_id location, step_id axis, step_id ref_direction);
+step_id step_plane (step_file *file, char *name, step_id position);
+step_id step_cylindrical_surface (step_file *file, char *name, step_id position, double radius);
+step_id step_circle (step_file *file, char *name, step_id position, double radius);
+step_id step_vector (step_file *file, char *name, step_id orientation, double magnitude);
+step_id step_line (step_file *file, char *name, step_id pnt, step_id dir);
+step_id step_vertex_point (step_file *file, char *name, step_id pnt);
+step_id step_edge_curve (step_file *file, char *name, step_id edge_start, step_id edge_end, step_id edge_geometry, bool same_sense);
+step_id step_oriented_edge (step_file *file, char *name, step_id edge_element, bool orientation);
diff --git a/src/hid/gtk/vertex3d.c b/src/hid/gtk/vertex3d.c
index 51db3a7..8abe19f 100644
--- a/src/hid/gtk/vertex3d.c
+++ b/src/hid/gtk/vertex3d.c
@@ -1,17 +1,11 @@
 #include <stdlib.h>
+#include <stdbool.h>
+#include <stdio.h>
 
-static int global_vertex3d_count;
-
-typedef struct
-{
-  float x;
-  float y;
-  float z;
-  int id;
+#include "step.h"
+#include "vertex3d.h"
 
-  /* STEP crap - to hell with encapsulation */
-  int vertex_identifier;
-} vertex3d;
+static int global_vertex3d_count;
 
 vertex3d *
 make_vertex3d (float x, float y, float z)
diff --git a/src/hid/gtk/vertex3d.h b/src/hid/gtk/vertex3d.h
index 278ae60..a150934 100644
--- a/src/hid/gtk/vertex3d.h
+++ b/src/hid/gtk/vertex3d.h
@@ -6,7 +6,7 @@ typedef struct
   int id;
 
   /* STEP crap - to hell with encapsulation */
-  int vertex_identifier;
+  step_id vertex_identifier;
 } vertex3d;
 
 vertex3d *make_vertex3d (float x, float y, float z);
