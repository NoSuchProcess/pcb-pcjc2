Bottom: 5cadb4f36c6d629cc3c64e97ccb9e358b78c6954
Top:    881555eb0a5fe10fd30fb3b41a285e777616594f
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-09-11 22:17:23 +0100

Win32: Build fixes for windows build


---

diff --git a/src/borast/borast-compiler-private.h b/src/borast/borast-compiler-private.h
index f886f40..165b42e 100644
--- a/src/borast/borast-compiler-private.h
+++ b/src/borast/borast-compiler-private.h
@@ -160,7 +160,7 @@
 #endif
 
 #if (defined(__WIN32__) && !defined(__WINE__)) || defined(_MSC_VER)
-#define snprintf _snprintf
+//#define snprintf _snprintf
 #define popen _popen
 #define pclose _pclose
 #define hypot _hypot
diff --git a/src/hid/common/hidgl.c b/src/hid/common/hidgl.c
index 15ce751..a1eb159 100644
--- a/src/hid/common/hidgl.c
+++ b/src/hid/common/hidgl.c
@@ -32,23 +32,56 @@
 #include <math.h>
 #include <assert.h>
 
-/* The Linux OpenGL ABI 1.0 spec requires that we define
- * GL_GLEXT_PROTOTYPES before including gl.h or glx.h for extensions
- * in order to get prototypes:
- *   http://www.opengl.org/registry/ABI/
- */
-#define GL_GLEXT_PROTOTYPES 1
-#include <GL/gl.h>
-#include <GL/glu.h>
+#ifdef WIN32
+#   include <windows.h>
+#   include <GL/gl.h>
+#   include <GL/glu.h>
+#   include "glext.h"
+#else
+    /* The Linux OpenGL ABI 1.0 spec requires that we define
+     * GL_GLEXT_PROTOTYPES before including gl.h or glx.h for extensions
+     * in order to get prototypes:
+     *   http://www.opengl.org/registry/ABI/
+     */
+#   define GL_GLEXT_PROTOTYPES 1
+#   include <GL/gl.h>
+#   include <GL/glu.h>
+#endif
+
+#ifdef WIN32
+PFNGLGENBUFFERSPROC         glGenBuffers        = NULL;
+PFNGLDELETEBUFFERSPROC      glDeleteBuffers     = NULL;
+PFNGLBINDBUFFERPROC         glBindBuffer        = NULL;
+PFNGLBUFFERDATAPROC         glBufferData        = NULL;
+PFNGLBUFFERSUBDATAPROC      glBufferSubData     = NULL;
+PFNGLMAPBUFFERPROC          glMapBuffer         = NULL;
+PFNGLUNMAPBUFFERPROC        glUnmapBuffer       = NULL;
+
+PFNGLATTACHSHADERPROC       glAttachShader      = NULL;
+PFNGLCOMPILESHADERPROC      glCompileShader     = NULL;
+PFNGLCREATEPROGRAMPROC      glCreateProgram     = NULL;
+PFNGLCREATESHADERPROC       glCreateShader      = NULL;
+PFNGLDELETEPROGRAMPROC      glDeleteProgram     = NULL;
+PFNGLDELETESHADERPROC       glDeleteShader      = NULL;
+PFNGLGETPROGRAMINFOLOGPROC  glGetProgramInfoLog = NULL;
+PFNGLGETPROGRAMIVPROC       glGetProgramiv      = NULL;
+PFNGLGETSHADERINFOLOGPROC   glGetShaderInfoLog  = NULL;
+PFNGLGETSHADERIVPROC        glGetShaderiv       = NULL;
+PFNGLISSHADERPROC           glIsShader          = NULL;
+PFNGLLINKPROGRAMPROC        glLinkProgram       = NULL;
+PFNGLSHADERSOURCEPROC       glShaderSource      = NULL;
+PFNGLUSEPROGRAMPROC         glUseProgram        = NULL;
+
+#endif
 
 #include "action.h"
 #include "crosshair.h"
 #include "data.h"
-#include "draw.h"
+//#include "draw.h"
 #include "error.h"
 #include "global.h"
 #include "mymem.h"
-#include "draw.h"
+//#include "draw.h"
 #include "clip.h"
 
 #include "hid.h"
@@ -60,7 +93,6 @@
 #include <dmalloc.h>
 #endif
 
-
 triangle_buffer buffer;
 float global_depth = 0;
 hidgl_shader *circular_program = NULL;
@@ -963,6 +995,32 @@ hidgl_init (void)
   if (done_once)
     return;
 
+#ifdef WIN32
+  glGenBuffers        = (PFNGLGENBUFFERSPROC)        wglGetProcAddress ("glGenBuffers");
+  glDeleteBuffers     = (PFNGLDELETEBUFFERSPROC)     wglGetProcAddress ("glDeleteBuffers");
+  glBindBuffer        = (PFNGLBINDBUFFERPROC)        wglGetProcAddress ("glBindBuffer");
+  glBufferData        = (PFNGLBUFFERDATAPROC)        wglGetProcAddress ("glBufferData");
+  glBufferSubData     = (PFNGLBUFFERSUBDATAPROC)     wglGetProcAddress ("glBufferSubData");
+  glMapBuffer         = (PFNGLMAPBUFFERPROC)         wglGetProcAddress ("glMapBuffer");
+  glUnmapBuffer       = (PFNGLUNMAPBUFFERPROC)       wglGetProcAddress ("glUnmapBuffer");
+
+  glAttachShader      = (PFNGLATTACHSHADERPROC)      wglGetProcAddress ("glAttachShader");
+  glCompileShader     = (PFNGLCOMPILESHADERPROC)     wglGetProcAddress ("glCompileShader");
+  glCreateProgram     = (PFNGLCREATEPROGRAMPROC)     wglGetProcAddress ("glCreateProgram");
+  glCreateShader      = (PFNGLCREATESHADERPROC)      wglGetProcAddress ("glCreateShader");
+  glDeleteProgram     = (PFNGLDELETEPROGRAMPROC)     wglGetProcAddress ("glDeleteProgram");
+  glDeleteShader      = (PFNGLDELETESHADERPROC)      wglGetProcAddress ("glDeleteShader");
+  glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC) wglGetProcAddress ("glGetProgramInfoLog");
+  glGetProgramiv      = (PFNGLGETPROGRAMIVPROC)      wglGetProcAddress ("glGetProgramiv");
+  glGetShaderInfoLog  = (PFNGLGETSHADERINFOLOGPROC)  wglGetProcAddress ("glGetShaderInfoLog");
+  glGetShaderiv       = (PFNGLGETSHADERIVPROC)       wglGetProcAddress ("glGetShaderiv");
+  glIsShader          = (PFNGLISSHADERPROC)          wglGetProcAddress ("glIsShader");
+  glLinkProgram       = (PFNGLLINKPROGRAMPROC)       wglGetProcAddress ("glLinkProgram");
+  glShaderSource      = (PFNGLSHADERSOURCEPROC)      wglGetProcAddress ("glShaderSource");
+  glUseProgram        = (PFNGLUSEPROGRAMPROC)        wglGetProcAddress ("glUseProgram");
+#endif
+
+
   CHECK_IS_IN_CONTEXT ();
   glGetIntegerv (GL_STENCIL_BITS, &stencil_bits);
 
diff --git a/src/hid/common/hidgl.h b/src/hid/common/hidgl.h
index b83e45b..31d28e8 100644
--- a/src/hid/common/hidgl.h
+++ b/src/hid/common/hidgl.h
@@ -48,7 +48,7 @@ void hidgl_flush_triangles (triangle_buffer *buffer);
 void hidgl_ensure_vertex_space (triangle_buffer *buffer, int count);
 void hidgl_ensure_triangle_space (triangle_buffer *buffer, int count);
 
-inline void
+static inline void
 hidgl_add_vertex_3D_tex (triangle_buffer *buffer,
                          GLfloat x, GLfloat y, GLfloat z,
                          GLfloat s, GLfloat t)
@@ -61,7 +61,7 @@ hidgl_add_vertex_3D_tex (triangle_buffer *buffer,
   buffer->vertex_count++;
 }
 
-inline void
+static inline void
 hidgl_add_vertex_tex (triangle_buffer *buffer,
                       GLfloat x, GLfloat y,
                       GLfloat s, GLfloat t)
diff --git a/src/hid/common/hidgl_shaders.c b/src/hid/common/hidgl_shaders.c
index 8609afe..005d6f2 100644
--- a/src/hid/common/hidgl_shaders.c
+++ b/src/hid/common/hidgl_shaders.c
@@ -29,20 +29,52 @@
 #include <string.h>
 #include <stdio.h>
 
+#ifdef WIN32
+#   include <GL/gl.h>
+#   include <GL/glu.h>
+#   include "glext.h"
+#else
 /* The Linux OpenGL ABI 1.0 spec requires that we define
  * GL_GLEXT_PROTOTYPES before including gl.h or glx.h for extensions
  * in order to get prototypes:
  *   http://www.opengl.org/registry/ABI/
  */
-#define GL_GLEXT_PROTOTYPES 1
-#include <GL/gl.h>
-#include <GL/glu.h>
+#   define GL_GLEXT_PROTOTYPES 1
+#   include <GL/gl.h>
+#   include <GL/glu.h>
+#endif
+
 #include "hidgl_shaders.h"
 
 #ifdef HAVE_LIBDMALLOC
 #include <dmalloc.h>
 #endif
 
+#ifdef WIN32
+extern PFNGLGENBUFFERSPROC         glGenBuffers;
+extern PFNGLDELETEBUFFERSPROC      glDeleteBuffers;
+extern PFNGLBINDBUFFERPROC         glBindBuffer;
+extern PFNGLBUFFERDATAPROC         glBufferData;
+extern PFNGLBUFFERSUBDATAPROC      glBufferSubData;
+extern PFNGLMAPBUFFERPROC          glMapBuffer;
+extern PFNGLUNMAPBUFFERPROC        glUnmapBuffer;
+
+extern PFNGLATTACHSHADERPROC       glAttachShader;
+extern PFNGLCOMPILESHADERPROC      glCompileShader;
+extern PFNGLCREATEPROGRAMPROC      glCreateProgram;
+extern PFNGLCREATESHADERPROC       glCreateShader;
+extern PFNGLDELETEPROGRAMPROC      glDeleteProgram;
+extern PFNGLDELETESHADERPROC       glDeleteShader;
+extern PFNGLGETPROGRAMINFOLOGPROC  glGetProgramInfoLog;
+extern PFNGLGETPROGRAMIVPROC       glGetProgramiv;
+extern PFNGLGETSHADERINFOLOGPROC   glGetShaderInfoLog;
+extern PFNGLGETSHADERIVPROC        glGetShaderiv;
+extern PFNGLISSHADERPROC           glIsShader;
+extern PFNGLLINKPROGRAMPROC        glLinkProgram;
+extern PFNGLSHADERSOURCEPROC       glShaderSource;
+extern PFNGLUSEPROGRAMPROC         glUseProgram;
+#endif
+
 /* Opaque data-structure keeping a shader object */
 struct _hidgl_shader {
   char *name;
