Bottom: 0b8167aaf50246bbdb74d12b8f4ca4d34ba955e7
Top:    d073a0230510bb25ab9ffe026de20ceabebae0a4
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2012-12-10 01:19:10 +0000

Add split colouring for "Find" action, introducing new flag "connected"

Colour differently depending on whether objects are physically connected
to the object under the cursor when invoking the "Find" action.

The aim here is to differentiate between what an ohm-meter would show
connected with the board as-currently designed, and what it would read
if all rat-lines were implemented.


---

diff --git a/src/action.c b/src/action.c
index 6a2c43a..4e58c9b 100644
--- a/src/action.c
+++ b/src/action.c
@@ -107,6 +107,7 @@ typedef enum
   F_ClearAndRedraw,
   F_ClearList,
   F_Close,
+  F_Found,
   F_Connection,
   F_Convert,
   F_Copy,
@@ -341,6 +342,7 @@ static FunctionType Functions[] = {
   {"ClearAndRedraw", F_ClearAndRedraw},
   {"ClearList", F_ClearList},
   {"Close", F_Close},
+  {"Found", F_Found},
   {"Connection", F_Connection},
   {"Convert", F_Convert},
   {"Copy", F_Copy},
@@ -2290,12 +2292,13 @@ ActionConnection (int argc, char **argv, Coord x, Coord y)
 	case F_Find:
 	  {
 	    gui->get_coords (_("Click on a connection"), &x, &y);
-	    LookupConnection (x, y, true, 1, FOUNDFLAG, false);
+	    LookupConnection (x, y, true, 1, FOUNDFLAG, true);
+	    LookupConnection (x, y, true, 1, CONNECTEDFLAG, false);
 	    break;
 	  }
 
 	case F_ResetLinesAndPolygons:
-	  if (ResetFoundLinesAndPolygons (true, FOUNDFLAG))
+	  if (ResetFoundLinesAndPolygons (true, FOUNDFLAG | CONNECTEDFLAG))
 	    {
 	      IncrementUndoSerialNumber ();
 	      Draw ();
@@ -2303,7 +2306,7 @@ ActionConnection (int argc, char **argv, Coord x, Coord y)
 	  break;
 
 	case F_ResetPinsViasAndPads:
-	  if (ResetFoundPinsViasAndPads (true, FOUNDFLAG))
+	  if (ResetFoundPinsViasAndPads (true, FOUNDFLAG | CONNECTEDFLAG))
 	    {
 	      IncrementUndoSerialNumber ();
 	      Draw ();
@@ -2311,7 +2314,7 @@ ActionConnection (int argc, char **argv, Coord x, Coord y)
 	  break;
 
 	case F_Reset:
-	  if (ResetConnections (true, FOUNDFLAG))
+	  if (ResetConnections (true, FOUNDFLAG | CONNECTEDFLAG))
 	    {
 	      IncrementUndoSerialNumber ();
 	      Draw ();
@@ -5315,9 +5318,12 @@ Selects all objects in a rectangle indicated by the cursor.
 @item All
 Selects all objects on the board.
 
-@item Connection
+@item Found
 Selects all connections with the ``found'' flag set.
 
+@item Connection
+Selects all connections with the ``connected'' flag set.
+
 @item Convert
 Converts the selected objects to an element.  This uses the highest
 numbered paste buffer.
@@ -5422,8 +5428,8 @@ ActionSelect (int argc, char **argv, Coord x, Coord y)
 	    break;
 	  }
 
-	  /* all found connections */
-	case F_Connection:
+	  /* all logical connections */
+	case F_Found:
 	  if (SelectByFlag (FOUNDFLAG, true))
 	    {
               Draw ();
@@ -5432,6 +5438,16 @@ ActionSelect (int argc, char **argv, Coord x, Coord y)
 	    }
 	  break;
 
+	  /* all physical connections */
+	case F_Connection:
+	  if (SelectByFlag (CONNECTEDFLAG, true))
+	    {
+              Draw ();
+	      IncrementUndoSerialNumber ();
+	      SetChangedFlag (true);
+	    }
+	  break;
+
 	case F_Convert:
 	  {
 	    Coord x, y;
@@ -5601,8 +5617,8 @@ ActionUnselect (int argc, char **argv, Coord x, Coord y)
 	    break;
 	  }
 
-	  /* all found connections */
-	case F_Connection:
+	  /* all logical connections */
+	case F_Found:
 	  if (SelectByFlag (FOUNDFLAG, false))
 	    {
               Draw ();
@@ -5611,6 +5627,16 @@ ActionUnselect (int argc, char **argv, Coord x, Coord y)
 	    }
 	  break;
 
+	  /* all physical connections */
+	case F_Connection:
+	  if (SelectByFlag (CONNECTEDFLAG, false))
+	    {
+              Draw ();
+	      IncrementUndoSerialNumber ();
+	      SetChangedFlag (true);
+	    }
+	  break;
+
 	default:
 	  AFAIL (unselect);
 	  break;
diff --git a/src/draw.c b/src/draw.c
index 619ec3a..a682f9d 100644
--- a/src/draw.c
+++ b/src/draw.c
@@ -85,16 +85,16 @@ static void DrawEMark (ElementType *, Coord, Coord, bool);
 static void DrawRats (const BoxType *);
 
 static void
-set_object_color (AnyObjectType *obj,
-                  char *warn_color, char *selected_color,
-                  char *found_color, char *normal_color)
+set_object_color (AnyObjectType *obj, char *warn_color, char *selected_color,
+                  char *connected_color, char *found_color, char *normal_color)
 {
   char *color;
 
-  if      (warn_color     != NULL && TEST_FLAG (WARNFLAG,     obj)) color = warn_color;
-  else if (selected_color != NULL && TEST_FLAG (SELECTEDFLAG, obj)) color = selected_color;
-  else if (found_color    != NULL && TEST_FLAG (FOUNDFLAG,    obj)) color = found_color;
-  else                                                              color = normal_color;
+  if      (warn_color      != NULL && TEST_FLAG (WARNFLAG,      obj)) color = warn_color;
+  else if (selected_color  != NULL && TEST_FLAG (SELECTEDFLAG,  obj)) color = selected_color;
+  else if (connected_color != NULL && TEST_FLAG (CONNECTEDFLAG, obj)) color = connected_color;
+  else if (found_color     != NULL && TEST_FLAG (FOUNDFLAG,     obj)) color = found_color;
+  else                                                                color = normal_color;
 
   gui->graphics->set_color (Output.fgGC, color);
 }
@@ -102,7 +102,7 @@ set_object_color (AnyObjectType *obj,
 static void
 set_layer_object_color (LayerType *layer, AnyObjectType *obj)
 {
-  set_object_color (obj, NULL, layer->SelectedColor, PCB->ConnectedColor, layer->Color);
+  set_object_color (obj, NULL, layer->SelectedColor, PCB->ConnectedColor, PCB->FoundColor, layer->Color);
 }
 
 /*---------------------------------------------------------------------------
@@ -203,7 +203,7 @@ draw_pin (PinType *pin, bool draw_hole)
   else
     set_object_color ((AnyObjectType *)pin,
                       PCB->WarnColor, PCB->PinSelectedColor,
-                      PCB->ConnectedColor, PCB->PinColor);
+                      PCB->ConnectedColor, PCB->FoundColor, PCB->PinColor);
 
   _draw_pv (pin, draw_hole);
 }
@@ -223,7 +223,7 @@ draw_via (PinType *via, bool draw_hole)
   else
     set_object_color ((AnyObjectType *)via,
                       PCB->WarnColor, PCB->ViaSelectedColor,
-                      PCB->ConnectedColor, PCB->ViaColor);
+                      PCB->ConnectedColor, PCB->FoundColor, PCB->ViaColor);
 
   _draw_pv (via, draw_hole);
 }
@@ -297,7 +297,7 @@ draw_pad (PadType *pad)
     gui->graphics->set_color (Output.fgGC, PCB->PinColor);
   else
     set_object_color ((AnyObjectType *)pad, PCB->WarnColor,
-                      PCB->PinSelectedColor, PCB->ConnectedColor,
+                      PCB->PinSelectedColor, PCB->ConnectedColor, PCB->FoundColor,
                       FRONT (pad) ? PCB->PinColor : PCB->InvisibleObjectsColor);
 
   _draw_pad (Output.fgGC, pad, false, false);
@@ -402,7 +402,7 @@ hole_callback (const BoxType * b, void *cl)
     {
       set_object_color ((AnyObjectType *) pv,
                         PCB->WarnColor, PCB->ViaSelectedColor,
-                        NULL, Settings.BlackColor);
+                        NULL, NULL, Settings.BlackColor);
 
       gui->graphics->set_line_cap (Output.fgGC, Round_Cap);
       gui->graphics->set_line_width (Output.fgGC, 0);
@@ -443,7 +443,7 @@ rat_callback (const BoxType * b, void *cl)
   RatType *rat = (RatType *)b;
 
   set_object_color ((AnyObjectType *) rat, NULL, PCB->RatSelectedColor,
-                    PCB->ConnectedColor, PCB->RatColor);
+                    PCB->ConnectedColor, PCB->FoundColor, PCB->RatColor);
 
   if (Settings.RatThickness < 100)
     rat->Thickness = pixel_slop * Settings.RatThickness;
diff --git a/src/gpcb-menu.res.in b/src/gpcb-menu.res.in
index f28edff..47bee40 100644
--- a/src/gpcb-menu.res.in
+++ b/src/gpcb-menu.res.in
@@ -233,9 +233,11 @@ MainMenu =
 #
   {"Select" m=l
    {"Select all visible" Select(All)}
+   {"Select all found" Select(Found)}
    {"Select all connected" Select(Connection)}
    -
    {"Unselect all" Unselect(All)}
+   {"Unselect all found" Unselect(Found)}
    {"Unselect all connected" Unselect(Connection)}
    -
    {"Select by name"
diff --git a/src/pcb-menu.res.in b/src/pcb-menu.res.in
index 84c4a45..e37bd7c 100644
--- a/src/pcb-menu.res.in
+++ b/src/pcb-menu.res.in
@@ -219,9 +219,11 @@ MainMenu =
 
   {Select
    {"Select all visible objects" Select(All)}
+   {"Select all found objects" Select(Found)}
    {"Select all connected objects" Select(Connection)}
    -
    {"Unselect all objects" Unselect(All)}
+   {"unselect all found objects" Unselect(Found)}
    {"unselect all connected objects" Unselect(Connection)}
    -
    {"Select by name" foreground=grey50 sensitive=false}
diff --git a/src/undo.h b/src/undo.h
index f415c3c..c52b051 100644
--- a/src/undo.h
+++ b/src/undo.h
@@ -33,7 +33,7 @@
 #include "global.h"
 
 #define DRAW_FLAGS	(RATFLAG | SELECTEDFLAG | SQUAREFLAG \
-			| HIDENAMEFLAG | HOLEFLAG | OCTAGONFLAG | FOUNDFLAG | CLEARLINEFLAG)
+			| HIDENAMEFLAG | HOLEFLAG | OCTAGONFLAG | CONNECTEDFLAG | FOUNDFLAG | CLEARLINEFLAG)
 
 											/* different layers */
