Bottom: 3429332257d035608cab7d23eeb4b9a71b75070d
Top:    bdb4b1dc0849e6fb423f53e017d3d260f9d79bb7
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-08-29 23:19:48 +0100

hid/ps/eps.c: Don't use core drawing routines


---

diff --git a/src/hid/ps/eps.c b/src/hid/ps/eps.c
index 0e90c7b..0307ced 100644
--- a/src/hid/ps/eps.c
+++ b/src/hid/ps/eps.c
@@ -10,6 +10,7 @@
 
 #include "global.h"
 #include "data.h"
+#include "draw.h"
 #include "misc.h"
 #include "pcb-printf.h"
 
@@ -32,7 +33,6 @@
 static HID_Attribute * eps_get_export_options (int *n);
 static void eps_do_export (HID_Attr_Val * options);
 static void eps_parse_arguments (int *argc, char ***argv);
-static int eps_set_layer (const char *name, int group, int empty);
 static hidGC eps_make_gc (void);
 static void eps_destroy_gc (hidGC gc);
 static void eps_use_mask (int use_it);
@@ -148,6 +148,9 @@ eps_get_export_options (int *n)
 }
 
 static int comp_layer, solder_layer;
+static const char *filename;
+static BoxType *bounds;
+static int in_mono, as_shown;
 
 static int
 group_for_layer (int l)
@@ -179,9 +182,84 @@ layer_sort (const void *va, const void *vb)
   return b - a;
 }
 
-static const char *filename;
-static BoxType *bounds;
-static int in_mono, as_shown;
+static bool
+set_layer (const char *name, int group)
+{
+  int is_drill;
+  int idx = (group >= 0 && group < max_group) ?
+    PCB->LayerGroups.Entries[group][0] : group;
+
+  if (name == NULL)
+    name = PCB->Data->Layer[idx].Name;
+
+  is_drill = (SL_TYPE (idx) == SL_PDRILL || SL_TYPE (idx) == SL_UDRILL);
+
+  fprintf (f, "%% Layer %s group %d drill %d\n", name, group, is_drill);
+
+  if (as_shown)
+    {
+      switch (idx)
+        {
+        case SL (SILK, TOP):
+        case SL (SILK, BOTTOM):
+          return SL_MYSIDE (idx) ? PCB->ElementOn : 0;
+        }
+    }
+
+  /* When not drawing "as shown", we don't draw the bottom silk */
+  if (idx == SL (SILK, BOTTOM))
+    return 0;
+
+  return 1;
+}
+
+void
+eps_expose (BoxType *bounds)
+{
+  HID *old_gui = gui;
+  int group;
+  int nplated, nunplated;
+
+  gui = &eps_hid;
+  Output.fgGC = gui->make_gc ();
+  Output.bgGC = gui->make_gc ();
+  Output.pmGC = gui->make_gc ();
+
+  gui->set_color (Output.pmGC, "erase");
+  gui->set_color (Output.bgGC, "drill");
+
+  PCB->Data->SILKLAYER.Color = PCB->ElementColor;
+  PCB->Data->BACKSILKLAYER.Color = PCB->InvisibleObjectsColor;
+
+  /* draw all copper layers in group order */
+  for (group = 0; group < max_copper_layer; group++)
+    {
+      if (!print_layer[group])
+        continue;
+
+      if (set_layer (0, group))
+        DrawLayerGroup (group, bounds);
+    }
+
+  CountHoles (&nplated, &nunplated, bounds);
+
+  if (nplated && set_layer ("plated-drill", SL (PDRILL, 0)))
+    DrawHoles (true, false, bounds);
+
+  if (nunplated && set_layer ("unplated-drill", SL (UDRILL, 0)))
+    DrawHoles (false, true, bounds);
+
+  if (set_layer ("topsilk", SL (SILK, TOP)))
+    DrawSilk (COMPONENT_LAYER, bounds);
+
+  if (set_layer ("bottomsilk", SL (SILK, BOTTOM)))
+    DrawSilk (SOLDER_LAYER, bounds);
+
+  gui->destroy_gc (Output.fgGC);
+  gui->destroy_gc (Output.bgGC);
+  gui->destroy_gc (Output.pmGC);
+  gui = old_gui;
+}
 
 void
 eps_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
@@ -309,7 +387,7 @@ eps_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
   fprintf (f,
 	   "/a { gsave setlinewidth translate scale 0 0 1 5 3 roll arc stroke grestore} bind def\n");
 
-  hid_expose_callback (&eps_hid, bounds, 0);
+  eps_expose (bounds);
 
   fprintf (f, "showpage\n");
 
@@ -318,7 +396,6 @@ eps_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
   fprintf (f, "cleartomark countdictstack exch sub { end } repeat restore\n");
   fprintf (f, "%%%%EOF\n");
 
-  memcpy (LayerStack, saved_layer_stack, sizeof (LayerStack));
   PCB->Flags = save_thindraw;
 }
 
@@ -365,66 +442,6 @@ eps_parse_arguments (int *argc, char ***argv)
   hid_parse_command_line (argc, argv);
 }
 
-static int is_mask;
-static int is_paste;
-static int is_drill;
-
-static int
-eps_set_layer (const char *name, int group, int empty)
-{
-  int idx = (group >= 0
-	     && group <
-	     max_group) ? PCB->LayerGroups.Entries[group][0] : group;
-  if (name == 0)
-    name = PCB->Data->Layer[idx].Name;
-
-  if (idx >= 0 && idx < max_copper_layer && !print_layer[idx])
-    return 0;
-  if (SL_TYPE (idx) == SL_ASSY || SL_TYPE (idx) == SL_FAB)
-    return 0;
-
-  if (strcmp (name, "invisible") == 0)
-    return 0;
-
-  is_drill = (SL_TYPE (idx) == SL_PDRILL || SL_TYPE (idx) == SL_UDRILL);
-  is_mask = (SL_TYPE (idx) == SL_MASK);
-  is_paste = (SL_TYPE (idx) == SL_PASTE);
-
-  if (is_mask || is_paste)
-    return 0;
-#if 0
-  printf ("Layer %s group %d drill %d mask %d\n", name, group, is_drill,
-	  is_mask);
-#endif
-  fprintf (f, "%% Layer %s group %d drill %d mask %d\n", name, group,
-	   is_drill, is_mask);
-
-  if (as_shown)
-    {
-      switch (idx)
-	{
-	case SL (SILK, TOP):
-	case SL (SILK, BOTTOM):
-	  if (SL_MYSIDE (idx))
-	    return PCB->ElementOn;
-	  else
-	    return 0;
-	}
-    }
-  else
-    {
-      switch (idx)
-	{
-	case SL (SILK, TOP):
-	  return 1;
-	case SL (SILK, BOTTOM):
-	  return 0;
-	}
-    }
-
-  return 1;
-}
-
 static hidGC
 eps_make_gc (void)
 {
@@ -678,7 +695,6 @@ hid_eps_init ()
   eps_hid.get_export_options  = eps_get_export_options;
   eps_hid.do_export           = eps_do_export;
   eps_hid.parse_arguments     = eps_parse_arguments;
-  eps_hid.set_layer           = eps_set_layer;
   eps_hid.make_gc             = eps_make_gc;
   eps_hid.destroy_gc          = eps_destroy_gc;
   eps_hid.use_mask            = eps_use_mask;
