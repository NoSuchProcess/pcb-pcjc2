Bottom: 03ad9c12655c1b15eab16687a3c49ff53946c01d
Top:    24afed5677f803b8650ad7dd0e881a5af79baf05
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-08-26 06:22:22 +0100

temp


---

diff --git a/src/hid/gtk/gtkhid-main.c b/src/hid/gtk/gtkhid-main.c
index dc2ea56..e65599e 100644
--- a/src/hid/gtk/gtkhid-main.c
+++ b/src/hid/gtk/gtkhid-main.c
@@ -37,12 +37,23 @@ static void ghid_zoom_view_fit (void);
 static void
 pan_common (GHidPort *port)
 {
+//  int event_x, event_y;
+
+  /* We need to fix up the PCB coordinates corresponding to the last
+  * event so convert it back to event coordinates temporarily. */
+//  ghid_pcb_to_event_coords (gport->pcb_x, gport->pcb_y, &event_x, &event_y);
+
   /* Don't pan so far that we see past the board edges */
   gport->view_x0 = MAX (0, gport->view_x0);
   gport->view_y0 = MAX (0, gport->view_y0);
   gport->view_x0 = MIN (gport->view_x0, PCB->MaxWidth  - gport->view_width);
   gport->view_y0 = MIN (gport->view_y0, PCB->MaxHeight - gport->view_height);
 
+  ghid_note_event_location (NULL);
+
+  /* Fix up noted event coordinates to match where we clamped */
+//  ghid_event_to_pcb_coords (event_x, event_y, &gport->pcb_x, &gport->pcb_y);
+
   ghidgui->adjustment_changed_holdoff = TRUE;
   gtk_range_set_value (GTK_RANGE (ghidgui->h_range), gport->view_x0);
   gtk_range_set_value (GTK_RANGE (ghidgui->v_range), gport->view_y0);
@@ -60,6 +71,15 @@ ghid_pan_view_abs (Coord pcb_x, Coord pcb_y, int widget_x, int widget_y)
   pan_common (gport);
 }
 
+void
+ghid_pan_view_rel (Coord dx, Coord dy)
+{
+  gport->view_x0 += dx;
+  gport->view_y0 += dy;
+
+  pan_common (gport);
+}
+
 
 /* gport->zoom:
  * zoom value is PCB units per screen pixel.  Larger numbers mean zooming
@@ -1827,17 +1847,17 @@ ScrollAction (int argc, char **argv, Coord x, Coord y)
     div = atoi(argv[1]);
 
   if (strcasecmp (argv[0], "up") == 0)
-    dy = -(ghid_port.height * gport->zoom / div);
+    dy = -gport->view_height / div;
   else if (strcasecmp (argv[0], "down") == 0)
-    dy = ghid_port.height * gport->zoom / div;
+    dy = gport->view_height / div;
   else if (strcasecmp (argv[0], "right") == 0)
-    dx = ghid_port.width * gport->zoom / div;
+    dx = gport->view_width / div;
   else if (strcasecmp (argv[0], "left") == 0)
-    dx = -(ghid_port.width * gport->zoom / div);
+    dx = -gport->view_width / div;
   else
     AFAIL (scroll);
 
-  ghid_port_ranges_pan (dx, dy, TRUE);
+  ghid_pan_view_rel (dx, dy);
 
   return 0;
 }
diff --git a/src/hid/gtk/gui-output-events.c b/src/hid/gtk/gui-output-events.c
index ba637c3..1c5327d 100644
--- a/src/hid/gtk/gui-output-events.c
+++ b/src/hid/gtk/gui-output-events.c
@@ -66,42 +66,6 @@ ghid_port_ranges_changed (void)
   ghid_invalidate_all ();
 }
 
-gboolean
-ghid_port_ranges_pan (gdouble x, gdouble y, gboolean relative)
-{
-  GtkAdjustment *h_adj, *v_adj;
-  gdouble x0, y0, x1, y1;
-
-  h_adj = gtk_range_get_adjustment (GTK_RANGE (ghidgui->h_range));
-  v_adj = gtk_range_get_adjustment (GTK_RANGE (ghidgui->v_range));
-  x0 = h_adj->value;
-  y0 = v_adj->value;
-
-  x1 = relative ? x + x0 : x;
-  y1 = relative ? y + y0 : y;
-
-  if (x1 < h_adj->lower)
-    x1 = h_adj->lower;
-  if (x1 > h_adj->upper - h_adj->page_size)
-    x1 = h_adj->upper - h_adj->page_size;
-
-  if (y1 < v_adj->lower)
-    y1 = v_adj->lower;
-  if (y1 > v_adj->upper - v_adj->page_size)
-    y1 = v_adj->upper - v_adj->page_size;
-
-  ghidgui->adjustment_changed_holdoff = TRUE;
-  gtk_range_set_value (GTK_RANGE (ghidgui->h_range), x1);
-  gtk_range_set_value (GTK_RANGE (ghidgui->v_range), y1);
-  ghidgui->adjustment_changed_holdoff = FALSE;
-
-  if ((x0 != x1) || (y0 != y1))
-    ghid_port_ranges_changed();
-
-  ghid_note_event_location (NULL);
-  return ((x0 != x1) || (y0 != y1));
-}
-
 /* Do scrollbar scaling based on current port drawing area size and
    |  overall PCB board size.
  */
@@ -589,7 +553,7 @@ ghid_port_window_motion_cb (GtkWidget * widget,
       dx = gport->zoom * (x_prev - ev->x);
       dy = gport->zoom * (y_prev - ev->y);
       if (x_prev > 0)
-	ghid_port_ranges_pan (dx, dy, TRUE);
+        ghid_pan_view_rel (dx, dy);
       x_prev = ev->x;
       y_prev = ev->y;
       return FALSE;
@@ -642,9 +606,11 @@ ghid_pan_idle_cb (gpointer data)
 
   if (gport->has_entered)
     return FALSE;
+
   dy = gport->zoom * y_pan_speed;
   dx = gport->zoom * x_pan_speed;
-  return (ghid_port_ranges_pan (dx, dy, TRUE));
+  ghid_pan_view_rel (dx, dy);
+  return TRUE;
 }
 
 gint
diff --git a/src/hid/gtk/gui.h b/src/hid/gtk/gui.h
index 134d2fb..6fe3a04 100644
--- a/src/hid/gtk/gui.h
+++ b/src/hid/gtk/gui.h
@@ -262,9 +262,7 @@ void ghid_get_pointer (gint *, gint *);
 /* gui-output-events.c function prototypes.
 */
 void ghid_port_ranges_changed (void);
-gboolean ghid_port_ranges_pan (gdouble x, gdouble y, gboolean relative);
 void ghid_port_ranges_scale (void);
-void ghid_port_ranges_update_ranges (void);
 
 gboolean ghid_note_event_location (GdkEventButton * ev);
 gboolean have_crosshair_attachments (void);
@@ -505,6 +503,7 @@ void ghid_lead_user_to_location (Coord x, Coord y);
 void ghid_cancel_lead_user (void);
 
 /* gtkhid-main.c */
+void ghid_pan_view_rel (Coord dx, Coord dy);
 void ghid_get_coords (const char *msg, Coord *x, Coord *y);
 gint PCBChanged (int argc, char **argv, Coord x, Coord y);
