Bottom: 27d628b613db49b958d4ec1735eab8ef193802a9
Top:    c69a92bb1f37ef17085f795852ec3bd3feede3f5
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-09-14 00:11:00 +0100

Debug DRC revert issue


---

diff --git a/src/find.c b/src/find.c
index 6edd29d..c9fd784 100644
--- a/src/find.c
+++ b/src/find.c
@@ -224,6 +224,8 @@ static void GotoError (void);
 static void
 append_drc_violation (DrcViolationType *violation)
 {
+  printf ("append drc violation ------\n");
+#if 1
   if (gui->drc_gui != NULL)
     {
       gui->drc_gui->append_drc_violation (violation);
@@ -235,7 +237,7 @@ append_drc_violation (DrcViolationType *violation)
       append_drc_dialog_message (_("%m+near %$mD\n"),
                                  Settings.grid_unit->allow,
                                  violation->x, violation->y);
-      GotoError ();
+//      GotoError ();
     }
 
   if (gui->drc_gui == NULL || gui->drc_gui->log_drc_violations )
@@ -245,6 +247,8 @@ append_drc_violation (DrcViolationType *violation)
                Settings.grid_unit->allow,
                violation->x, violation->y);
     }
+#endif
+  printf ("append drc violation ------\n");
 }
 /*
  * message when asked about continuing DRC checks after next 
@@ -267,8 +271,9 @@ throw_drc_dialog(void)
     {
       /* Fallback to formatting the violation message as text */
       append_drc_dialog_message (DRC_CONTINUE);
-      r = gui->confirm_dialog (drc_dialog_message->str, DRC_CANCEL, DRC_NEXT);
+//      r = gui->confirm_dialog (drc_dialog_message->str, DRC_CANCEL, DRC_NEXT);
       reset_drc_dialog_message();
+      r = 1;
     }
   return r;
 }
@@ -3534,7 +3539,7 @@ DRCFind (int What, void *ptr1, void *ptr2, void *ptr3)
           drc = false;
           Bloat = -PCB->Shrink;
           TheFlag = SELECTEDFLAG;
-          RestoreUndoSerialNumber ();
+//          RestoreUndoSerialNumber ();
           ListStart (What, ptr1, ptr2, ptr3);
           DoIt (true, true);
           DumpList ();
@@ -3588,7 +3593,7 @@ DRCFind (int What, void *ptr1, void *ptr2, void *ptr3)
       User = true;
       drc = false;
       Bloat = 0;
-      RestoreUndoSerialNumber ();
+//      RestoreUndoSerialNumber ();
       TheFlag = SELECTEDFLAG;
       ListStart (What, ptr1, ptr2, ptr3);
       DoIt (true, true);
diff --git a/src/hid/gtk/gui-drc-window.c b/src/hid/gtk/gui-drc-window.c
index ce0210c..9f37599 100644
--- a/src/hid/gtk/gui-drc-window.c
+++ b/src/hid/gtk/gui-drc-window.c
@@ -94,179 +94,6 @@ enum {
 };
 
 
-static void
-unset_found_flags (int AndDraw)
-{
-  int flag = FOUNDFLAG;
-  int change = 0;
-
-  VIA_LOOP (PCB->Data);
-  {
-    if (TEST_FLAG (flag, via))
-      {
-	AddObjectToFlagUndoList (VIA_TYPE, via, via, via);
-	CLEAR_FLAG (flag, via);
-	DrawVia (via);
-	change = true;
-      }
-  }
-  END_LOOP;
-  ELEMENT_LOOP (PCB->Data);
-  {
-    PIN_LOOP (element);
-    {
-      if (TEST_FLAG (flag, pin))
-	{
-	  AddObjectToFlagUndoList (PIN_TYPE, element, pin, pin);
-	  CLEAR_FLAG (flag, pin);
-	  DrawPin (pin);
-	  change = true;
-	}
-    }
-    END_LOOP;
-    PAD_LOOP (element);
-    {
-      if (TEST_FLAG (flag, pad))
-	{
-	  AddObjectToFlagUndoList (PAD_TYPE, element, pad, pad);
-	  CLEAR_FLAG (flag, pad);
-	  DrawPad (pad);
-	  change = true;
-	}
-    }
-    END_LOOP;
-  }
-  END_LOOP;
-  RAT_LOOP (PCB->Data);
-  {
-    if (TEST_FLAG (flag, line))
-      {
-	AddObjectToFlagUndoList (RATLINE_TYPE, line, line, line);
-	CLEAR_FLAG (flag, line);
-	DrawRat (line);
-	change = true;
-      }
-  }
-  END_LOOP;
-  COPPERLINE_LOOP (PCB->Data);
-  {
-    if (TEST_FLAG (flag, line))
-      {
-	AddObjectToFlagUndoList (LINE_TYPE, layer, line, line);
-	CLEAR_FLAG (flag, line);
-	DrawLine (layer, line);
-	change = true;
-      }
-  }
-  ENDALL_LOOP;
-  COPPERARC_LOOP (PCB->Data);
-  {
-    if (TEST_FLAG (flag, arc))
-      {
-	AddObjectToFlagUndoList (ARC_TYPE, layer, arc, arc);
-	CLEAR_FLAG (flag, arc);
-	DrawArc (layer, arc);
-	change = true;
-      }
-  }
-  ENDALL_LOOP;
-  COPPERPOLYGON_LOOP (PCB->Data);
-  {
-    if (TEST_FLAG (flag, polygon))
-      {
-	AddObjectToFlagUndoList (POLYGON_TYPE, layer, polygon, polygon);
-	CLEAR_FLAG (flag, polygon);
-	DrawPolygon (layer, polygon);
-	change = true;
-      }
-  }
-  ENDALL_LOOP;
-  if (change)
-    {
-      SetChangedFlag (true);
-      if (AndDraw)
-	{
-	  IncrementUndoSerialNumber ();
-	  Draw ();
-	}
-    }
-}
-
-static void
-selection_changed_cb (GtkTreeSelection *selection, gpointer user_data)
-{
-  GtkTreeModel *model;
-  GtkTreeIter iter;
-  GhidDrcViolation *violation;
-  int i;
-
-  if (!gtk_tree_selection_get_selected (selection, &model, &iter))
-    {
-      unset_found_flags (true);
-      return;
-    }
-
-  /* Check the selected node has children, if so; return. */
-  if (gtk_tree_model_iter_has_child (model, &iter))
-    return;
-
-  gtk_tree_model_get (model, &iter, DRC_VIOLATION_OBJ_COL, &violation, -1);
-
-  unset_found_flags (false);
-
-  if (violation == NULL)
-    return;
-
-  /* Flag the objects listed against this DRC violation */
-  for (i = 0; i < violation->object_count; i++)
-    {
-      int object_id = violation->object_id_list[i];
-      int object_type = violation->object_type_list[i];
-      int found_type;
-      void *ptr1, *ptr2, *ptr3;
-
-      found_type = SearchObjectByID (PCB->Data, &ptr1, &ptr2, &ptr3,
-				     object_id, object_type);
-      if (found_type == NO_TYPE)
-	{
-	  Message (_("Object ID %i identified during DRC was not found. Stale DRC window?\n"),
-		   object_id);
-	  continue;
-	}
-      AddObjectToFlagUndoList (object_type, ptr1, ptr2, ptr3);
-      SET_FLAG (FOUNDFLAG, (AnyObjectType *)ptr2);
-      switch (violation->object_type_list[i])
-	{
-	case LINE_TYPE:
-	case ARC_TYPE:
-	case POLYGON_TYPE:
-	  ChangeGroupVisibility (GetLayerNumber (PCB->Data, (LayerTypePtr) ptr1), true, true);
-	}
-      DrawObject (object_type, ptr1, ptr2);
-    }
-  SetChangedFlag (true);
-  IncrementUndoSerialNumber ();
-  Draw();
-}
-
-static void
-row_activated_cb (GtkTreeView *view, GtkTreePath *path,
-		  GtkTreeViewColumn *column, gpointer user_data)
-{
-  GtkTreeModel *model = gtk_tree_view_get_model (view);
-  GtkTreeIter iter;
-  GhidDrcViolation *violation;
-
-  gtk_tree_model_get_iter (model, &iter, path);
-
-  gtk_tree_model_get (model, &iter, DRC_VIOLATION_OBJ_COL, &violation, -1);
-
-  if (violation == NULL)
-    return;
-
-  CenterDisplay (violation->x_coord, violation->y_coord);
-}
-
 
 enum
 {
@@ -733,6 +560,7 @@ ghid_violation_renderer_render (GtkCellRenderer      *cell,
 									  expose_area,
 									  flags);
 
+#if 0
   if (violation == NULL)
     return;
 
@@ -756,6 +584,7 @@ ghid_violation_renderer_render (GtkCellRenderer      *cell,
 		     mydrawable, 0, 0,
 		     cell_area->x + cell_area->width + VIOLATION_PIXMAP_PIXEL_BORDER,
 		     cell_area->y + VIOLATION_PIXMAP_PIXEL_BORDER, -1, -1);
+#endif
 }
 
 
@@ -892,10 +721,10 @@ ghid_drc_window_show (gboolean raise)
   gtk_container_add (GTK_CONTAINER (scrolled_window), drc_list);
 
   gtk_tree_view_set_rules_hint (GTK_TREE_VIEW (drc_list), TRUE);
-  g_signal_connect (gtk_tree_view_get_selection (GTK_TREE_VIEW (drc_list)), "changed",
-		    G_CALLBACK (selection_changed_cb), NULL);
-  g_signal_connect (drc_list, "row-activated",
-		    G_CALLBACK (row_activated_cb), NULL);
+//  g_signal_connect (gtk_tree_view_get_selection (GTK_TREE_VIEW (drc_list)), "changed",
+//		    G_CALLBACK (selection_changed_cb), NULL);
+//  g_signal_connect (drc_list, "row-activated",
+//		    G_CALLBACK (row_activated_cb), NULL);
 
   violation_renderer = gtk_cell_renderer_text_new ();
   gtk_tree_view_insert_column_with_attributes (GTK_TREE_VIEW (drc_list),
diff --git a/src/undo.c b/src/undo.c
index 576b9cb..9c992c8 100644
--- a/src/undo.c
+++ b/src/undo.c
@@ -260,6 +260,7 @@ GetUndoSlot (int CommandType, int ID, int Kind)
   ptr->Kind = Kind;
   ptr->ID = ID;
   ptr->Serial = Serial;
+  printf ("Got undo slot - new UndoN is %li, serial is %i\n", UndoN, Serial);
   return (ptr);
 }
 
@@ -537,8 +538,10 @@ UndoFlag (UndoListTypePtr Entry)
       FlagType f1, f2;
       PinTypePtr pin = (PinTypePtr) ptr2;
 
-      if (TEST_FLAG (LOCKFLAG, pin))
+      if (TEST_FLAG (LOCKFLAG, pin)) {
+        printf ("OBJECT IS LOCKED.. FAIL\n");
 	return (false);
+      }
 
       swap = pin->Flags;
 
@@ -961,6 +964,7 @@ Undo (bool draw)
   UndoListTypePtr ptr;
   int Types = 0;
   int unique;
+  printf("undo: %d - current serial is %i, UndoN is %li\n", draw, Serial, UndoN);
 
   unique = TEST_FLAG (UNIQUENAMEFLAG, PCB);
   CLEAR_FLAG (UNIQUENAMEFLAG, PCB);
@@ -971,6 +975,7 @@ Undo (bool draw)
     {
       if (!UndoN)
 	{
+          printf ("FOOBAR\n");
 	  if (!Serial)
 	    Message (_("Nothing to undo - buffer is empty\n"));
 	  else
@@ -984,6 +989,7 @@ Undo (bool draw)
       ptr = &UndoList[UndoN - 1];
       if (ptr->Serial != Serial - 1)
 	{
+          printf ("******************************************\n");
 	  Message (_("Undo bad serial number %d expecting %d\n"),
 		   ptr->Serial, Serial - 1);
 	  Serial = ptr->Serial + 1;
@@ -1111,7 +1117,11 @@ PerformUndo (UndoListTypePtr ptr)
       if (UndoMirror (ptr))
 	return (UNDO_MIRROR);
       break;
+
+    default:
+      printf ("WTF - unhandled undo case: %i\n", ptr->Type);
     }
+  printf ("OK - some undo failed -> FAIL\n");
   return 0;
 }
 
@@ -1126,6 +1136,8 @@ Redo (bool draw)
   UndoListTypePtr ptr;
   int Types = 0;
 
+  printf("redo: %d\n", draw);
+
   andDraw = draw;
   do
     {
@@ -1162,6 +1174,7 @@ void
 RestoreUndoSerialNumber (void)
 {
   Serial = SavedSerial;
+  printf("restore undo to %d\n", Serial);
 }
 
 /* ---------------------------------------------------------------------------
@@ -1172,6 +1185,7 @@ SaveUndoSerialNumber (void)
 {
   Bumped = false;
   SavedSerial = Serial;
+  printf("save undo to %d\n", Serial);
 }
 
 /* ---------------------------------------------------------------------------
@@ -1185,12 +1199,15 @@ IncrementUndoSerialNumber (void)
   if (!Locked)
     {
       /* don't increment if nothing was added */
-      if (UndoN == 0 || UndoList[UndoN - 1].Serial != Serial)
+      if (UndoN == 0 || UndoList[UndoN - 1].Serial != Serial) {
+        printf ("BAM\n");
 	return;
+      }
       Serial++;
       Bumped = true;
       SetChangedFlag (true);
     }
+  printf("increment undo locked=%d bump=%d\n", Locked, Serial);
 }
 
 /* ---------------------------------------------------------------------------
