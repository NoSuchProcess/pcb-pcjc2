Bottom: 27f6112453ab2f5c2845a6599571ce12e16ef122
Top:    d8e3f2fe947b155c155ccb896c463f0a1f3a3e99
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2011-01-07 23:44:06 +0000

hid/gtk: Fix prelight state for layer button to show current status

One of the ways we identify whether a layer is switched on or off is
by changing the background colour of the GtkToggleButton representing
that layer.

Fix the prelight (mouse-over) background style to match the current
button state, so as to give immediate feed-back when the user presses
the button, and make the interface less confusing.

Closes-bug: lp-699150


---

diff --git a/src/hid/gtk/gui-top-window.c b/src/hid/gtk/gui-top-window.c
index b4c8c42..afc8845 100644
--- a/src/hid/gtk/gui-top-window.c
+++ b/src/hid/gtk/gui-top-window.c
@@ -1374,18 +1374,54 @@ layer_select_button_cb (GtkWidget * widget, LayerButtonSet * lb)
 }
 
 static void
+layer_button_set_color (LayerButtonSet * lb, gchar * color_string,
+                        bool set_prelight)
+{
+  GdkColor color;
+
+  if (!lb->layer_enable_ebox)
+    return;
+
+  color.red = color.green = color.blue = 0;
+  ghid_map_color_string (color_string, &color);
+  gtk_widget_modify_bg (lb->layer_enable_ebox, GTK_STATE_ACTIVE, &color);
+  gtk_widget_modify_bg (lb->layer_enable_ebox, GTK_STATE_PRELIGHT,
+                        set_prelight ? &color : NULL);
+
+  gtk_widget_modify_fg (lb->label, GTK_STATE_ACTIVE, &WhitePixel);
+}
+
+void
+layer_enable_button_set_label (GtkWidget * label, gchar * text)
+{
+  gchar *s;
+
+  if (ghidgui->small_label_markup)
+    s = g_strdup_printf ("<small>%s</small>", text);
+  else
+    s = g_strdup (text);
+  gtk_label_set_markup (GTK_LABEL (label), s);
+  g_free (s);
+}
+
+
+static void
 layer_enable_button_cb (GtkWidget * widget, gpointer data)
 {
+  GtkToggleButton *button = GTK_TOGGLE_BUTTON (widget);
+  char *color_string;
   LayerButtonSet *lb;
   gint i, group, layer = GPOINTER_TO_INT (data);
   gboolean active, redraw = FALSE;
 
-  active = gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (widget));
+  lb = &layer_buttons[layer];
+  active = gtk_toggle_button_get_active (button);
+  layer_process (&color_string, NULL, NULL, layer);
+  layer_button_set_color (lb, color_string, active);
 
   if (layer_enable_button_cb_hold_off)
     return;
 
-  lb = &layer_buttons[layer];
   switch (layer)
     {
     case LAYER_BUTTON_SILK:
@@ -1465,35 +1501,6 @@ layer_enable_button_cb (GtkWidget * widget, gpointer data)
 }
 
 static void
-layer_button_set_color (LayerButtonSet * lb, gchar * color_string)
-{
-  GdkColor color;
-
-  if (!lb->layer_enable_ebox)
-    return;
-  
-  color.red = color.green = color.blue = 0;
-  ghid_map_color_string (color_string, &color);
-  gtk_widget_modify_bg (lb->layer_enable_ebox, GTK_STATE_ACTIVE, &color);
-  gtk_widget_modify_bg (lb->layer_enable_ebox, GTK_STATE_PRELIGHT, &color);
-
-  gtk_widget_modify_fg (lb->label, GTK_STATE_ACTIVE, &WhitePixel);
-}
-
-void
-layer_enable_button_set_label (GtkWidget * label, gchar * text)
-{
-  gchar *s;
-
-  if (ghidgui->small_label_markup)
-    s = g_strdup_printf ("<small>%s</small>", text);
-  else
-    s = g_strdup (text);
-  gtk_label_set_markup (GTK_LABEL (label), s);
-  g_free (s);
-}
-
-static void
 ghid_show_layer_buttons(void)
 {
 	LayerButtonSet *lb;
@@ -1573,7 +1580,7 @@ make_layer_buttons (GtkWidget * vbox, GHidPort * port)
       lb->text = g_strdup (text);
       lb->label = label;
 
-      layer_button_set_color (lb, color_string);
+      layer_button_set_color (lb, color_string, active);
       gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (button), active);
 
       g_signal_connect (G_OBJECT (button), "toggled",
@@ -1605,11 +1612,13 @@ ghid_layer_buttons_color_update (void)
 
   for (i = 0; i < N_LAYER_BUTTONS; ++i)
     {
+      bool active;
+
       lb = &layer_buttons[i];
 
       layer_process (&color_string, NULL, NULL, i);
-
-      layer_button_set_color (lb, color_string);
+      active = gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (lb));
+      layer_button_set_color (lb, color_string, active);
     }
 }
