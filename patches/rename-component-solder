Bottom: c9c47c48f54de5e9e51d0270216f3c5b3ee77700
Top:    0bbcf12331b4320d62ae8d6c8a4e0ffac7295456
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2014-06-26 21:21:44 +0100

Rename "{component,solder}_silk_layer" and "{top,bottom}_silk_layer"

This will avoid confusion when we start adding "soldermask" layers.

The resulting variables solder_soldermask_layer and component_soldermask_layer
are not ideal (repeated use of the word solder), so lets start using "top_" and
"bottom_" to define the board sides. The corresponding new layer names are then
"top_soldermask_layer" and "bottom_soldermask_layer", which is less confusing.


---

diff --git a/src/action.c b/src/action.c
index 9c3acd2..3065c65 100644
--- a/src/action.c
+++ b/src/action.c
@@ -1386,7 +1386,7 @@ NotifyMode (void)
 		int flag = CLEARLINEFLAG;
 
 		if (GetLayerGroupNumberByNumber (INDEXOFCURRENT) ==
-		    GetLayerGroupNumberBySide (SOLDER_LAYER))
+		    GetLayerGroupNumberBySide (BOTTOM_LAYER))
 		  flag |= ONSOLDERFLAG;
 		if ((text = CreateNewText (CURRENT, &PCB->Font, Note.X,
 					   Note.Y, 0, Settings.TextScale,
diff --git a/src/autoplace.c b/src/autoplace.c
index 21ab5f2..2732444 100644
--- a/src/autoplace.c
+++ b/src/autoplace.c
@@ -152,11 +152,11 @@ PerturbationType;
 static void
 UpdateXY (NetListType *Nets)
 {
-  Cardinal SLayer, CLayer;
+  Cardinal bottom_group, top_group;
   Cardinal i, j;
-  /* find layer groups of the component side and solder side */
-  SLayer = GetLayerGroupNumberByNumber (solder_silk_layer);
-  CLayer = GetLayerGroupNumberByNumber (component_silk_layer);
+  /* find layer groups of the top and bottom sides */
+  bottom_group = GetLayerGroupNumberByNumber (bottom_silk_layer);
+  top_group    = GetLayerGroupNumberByNumber (top_silk_layer);
   /* update all nets */
   for (i = 0; i < Nets->NetN; i++)
     {
@@ -167,13 +167,13 @@ UpdateXY (NetListType *Nets)
 	    {
 	    case PAD_TYPE:
 	      c->group = TEST_FLAG (ONSOLDERFLAG,
-				    (ElementType *) c->ptr1)
-		? SLayer : CLayer;
+	                            (ElementType *) c->ptr1)
+	        ? bottom_group : top_group;
 	      c->X = ((PadType *) c->ptr2)->Point1.X;
 	      c->Y = ((PadType *) c->ptr2)->Point1.Y;
 	      break;
 	    case PIN_TYPE:
-	      c->group = SLayer;	/* any layer will do */
+	      c->group = bottom_group;  /* any layer will do */
 	      c->X = ((PinType *) c->ptr2)->X;
 	      c->Y = ((PinType *) c->ptr2)->Y;
 	      break;
@@ -206,21 +206,21 @@ collectSelectedElements ()
 
 #if 0				/* only for debugging box lists */
 #include "create.h"
-/* makes a line on the solder layer surrounding all boxes in blist */
+/* makes a line on the bottom silk layer surrounding all boxes in blist */
 static void
 showboxes (BoxListType *blist)
 {
   Cardinal i;
-  LayerType *SLayer = &(PCB->Data->Layer[solder_silk_layer]);
+  LayerType *layer = &(PCB->Data->Layer[bottom_silk_layer]);
   for (i = 0; i < blist->BoxN; i++)
     {
-      CreateNewLineOnLayer (SLayer, blist->Box[i].X1, blist->Box[i].Y1,
+      CreateNewLineOnLayer (layer, blist->Box[i].X1, blist->Box[i].Y1,
 			    blist->Box[i].X2, blist->Box[i].Y1, 1, 1, 0);
-      CreateNewLineOnLayer (SLayer, blist->Box[i].X1, blist->Box[i].Y2,
+      CreateNewLineOnLayer (layer, blist->Box[i].X1, blist->Box[i].Y2,
 			    blist->Box[i].X2, blist->Box[i].Y2, 1, 1, 0);
-      CreateNewLineOnLayer (SLayer, blist->Box[i].X1, blist->Box[i].Y1,
+      CreateNewLineOnLayer (layer, blist->Box[i].X1, blist->Box[i].Y1,
 			    blist->Box[i].X1, blist->Box[i].Y2, 1, 1, 0);
-      CreateNewLineOnLayer (SLayer, blist->Box[i].X2, blist->Box[i].Y1,
+      CreateNewLineOnLayer (layer, blist->Box[i].X2, blist->Box[i].Y1,
 			    blist->Box[i].X2, blist->Box[i].Y2, 1, 1, 0);
     }
 }
diff --git a/src/autoroute.c b/src/autoroute.c
index ce75794..0c4f95e 100644
--- a/src/autoroute.c
+++ b/src/autoroute.c
@@ -959,8 +959,8 @@ CreateRouteData ()
     }
   /* if via visibility is turned off, don't use them */
   AutoRouteParameters.use_vias = routing_layers > 1 && PCB->ViaOn;
-  front = GetLayerGroupNumberByNumber (component_silk_layer);
-  back = GetLayerGroupNumberByNumber (solder_silk_layer);
+  front = GetLayerGroupNumberByNumber (top_silk_layer);
+  back = GetLayerGroupNumberByNumber (bottom_silk_layer);
   /* determine preferred routing direction on each group */
   for (i = 0; i < max_group; i++)
     {
@@ -1481,34 +1481,34 @@ showbox (BoxType b, Dimension thickness, int group)
 #if 1
   if (b.Y1 == b.Y2 || b.X1 == b.X2)
     thickness = 5;
-  line = CreateNewLineOnLayer (LAYER_PTR (component_silk_layer),
+  line = CreateNewLineOnLayer (LAYER_PTR (top_silk_layer),
 			       b.X1, b.Y1, b.X2, b.Y1, thickness, 0,
 			       MakeFlags (0));
   AddObjectToCreateUndoList (LINE_TYPE,
-			     LAYER_PTR (component_silk_layer), line,
+			     LAYER_PTR (top_silk_layer), line,
 			     line);
   if (b.Y1 != b.Y2)
     {
-      line = CreateNewLineOnLayer (LAYER_PTR (component_silk_layer),
+      line = CreateNewLineOnLayer (LAYER_PTR (top_silk_layer),
 				   b.X1, b.Y2, b.X2, b.Y2, thickness, 0,
 				   MakeFlags (0));
       AddObjectToCreateUndoList (LINE_TYPE,
-				 LAYER_PTR (component_silk_layer),
+				 LAYER_PTR (bottom_silk_layer),
 				 line, line);
     }
-  line = CreateNewLineOnLayer (LAYER_PTR (component_silk_layer),
+  line = CreateNewLineOnLayer (LAYER_PTR (top_silk_layer),
 			       b.X1, b.Y1, b.X1, b.Y2, thickness, 0,
 			       MakeFlags (0));
   AddObjectToCreateUndoList (LINE_TYPE,
-			     LAYER_PTR (component_silk_layer), line,
+			     LAYER_PTR (top_silk_layer), line,
 			     line);
   if (b.X1 != b.X2)
     {
-      line = CreateNewLineOnLayer (LAYER_PTR (component_silk_layer),
+      line = CreateNewLineOnLayer (LAYER_PTR (top_silk_layer),
 				   b.X2, b.Y1, b.X2, b.Y2, thickness, 0,
 				   MakeFlags (0));
       AddObjectToCreateUndoList (LINE_TYPE,
-				 LAYER_PTR (component_silk_layer),
+				 LAYER_PTR (top_silk_layer),
 				 line, line);
     }
 #endif
@@ -1553,7 +1553,7 @@ static void
 showroutebox (routebox_t * rb)
 {
   showbox (rb->sbox, rb->flags.source ? 20 : (rb->flags.target ? 10 : 1),
-	   rb->flags.is_via ? component_silk_layer : rb->group);
+	   rb->flags.is_via ? top_silk_layer : rb->group);
 }
 #endif
 
diff --git a/src/buffer.c b/src/buffer.c
index f675add..90b3fd0 100644
--- a/src/buffer.c
+++ b/src/buffer.c
@@ -474,7 +474,7 @@ LoadElementToBuffer (BufferType *Buffer, char *Name, bool FromFile)
     {
       if (!ParseElementFile (Buffer->Data, Name))
 	{
-	  if (Settings.ShowSolderSide)
+	  if (Settings.ShowBottomSide)
 	    SwapBuffer (Buffer);
 	  SetBufferBoundingBox (Buffer);
 	  if (Buffer->Data->ElementN)
@@ -499,7 +499,7 @@ LoadElementToBuffer (BufferType *Buffer, char *Name, bool FromFile)
 	  element = Buffer->Data->Element->data;
 
 	  /* always add elements using top-side coordinates */
-	  if (Settings.ShowSolderSide)
+	  if (Settings.ShowBottomSide)
 	    MirrorElementCoordinates (Buffer->Data, element, 0);
 	  SetElementBoundingBox (Buffer->Data, element, &PCB->Font);
 
@@ -840,7 +840,7 @@ SmashBufferElement (BufferType *Buffer)
 {
   ElementType *element;
   Cardinal group;
-  LayerType *clayer, *slayer;
+  LayerType *top_layer, *bottom_layer;
 
   if (Buffer->Data->ElementN != 1)
     {
@@ -889,18 +889,16 @@ SmashBufferElement (BufferType *Buffer)
 		  pin->DrillingHole, pin->Number, f);
   }
   END_LOOP;
-  group =
-    GetLayerGroupNumberByNumber (SWAP_IDENT ? solder_silk_layer :
-					      component_silk_layer);
-  clayer = &Buffer->Data->Layer[PCB->LayerGroups.Entries[group][0]];
-  group =
-    GetLayerGroupNumberByNumber (SWAP_IDENT ? component_silk_layer :
-					      solder_silk_layer);
-  slayer = &Buffer->Data->Layer[PCB->LayerGroups.Entries[group][0]];
+  group = GetLayerGroupNumberByNumber (SWAP_IDENT ? bottom_silk_layer :
+                                                    top_silk_layer);
+  top_layer = &Buffer->Data->Layer[PCB->LayerGroups.Entries[group][0]];
+  group = GetLayerGroupNumberByNumber (SWAP_IDENT ? top_silk_layer :
+                                                    bottom_silk_layer);
+  bottom_layer = &Buffer->Data->Layer[PCB->LayerGroups.Entries[group][0]];
   PAD_LOOP (element);
   {
     LineType *line;
-    line = CreateNewLineOnLayer (TEST_FLAG (ONSOLDERFLAG, pad) ? slayer : clayer,
+    line = CreateNewLineOnLayer (TEST_FLAG (ONSOLDERFLAG, pad) ? bottom_layer : top_layer,
 				 pad->Point1.X, pad->Point1.Y,
 				 pad->Point2.X, pad->Point2.Y,
 				 pad->Thickness, pad->Clearance, NoFlags ());
@@ -1005,12 +1003,12 @@ ConvertBufferToElement (BufferType *Buffer)
 
       if ((!onsolder) == (!SWAP_IDENT))
 	{
-	  silk_layer = component_silk_layer;
+	  silk_layer = top_silk_layer;
 	  onsolderflag = NOFLAG;
 	}
       else
 	{
-	  silk_layer = solder_silk_layer;
+	  silk_layer = bottom_silk_layer;
 	  onsolderflag = ONSOLDERFLAG;
 	}
 
@@ -1467,7 +1465,7 @@ static void
 SwapBuffer (BufferType *Buffer)
 {
   int j, k;
-  Cardinal sgroup, cgroup;
+  Cardinal bottom_group, top_group;
   LayerType swap;
 
   ELEMENT_LOOP (Buffer->Data);
@@ -1535,49 +1533,49 @@ SwapBuffer (BufferType *Buffer)
   }
   ENDALL_LOOP;
   /* swap silkscreen layers */
-  swap = Buffer->Data->Layer[solder_silk_layer];
-  Buffer->Data->Layer[solder_silk_layer] =
-    Buffer->Data->Layer[component_silk_layer];
-  Buffer->Data->Layer[component_silk_layer] = swap;
+  swap = Buffer->Data->Layer[bottom_silk_layer];
+  Buffer->Data->Layer[bottom_silk_layer] =
+    Buffer->Data->Layer[top_silk_layer];
+  Buffer->Data->Layer[top_silk_layer] = swap;
 
   /* swap layer groups when balanced */
-  sgroup = GetLayerGroupNumberByNumber (solder_silk_layer);
-  cgroup = GetLayerGroupNumberByNumber (component_silk_layer);
-  if (PCB->LayerGroups.Number[cgroup] == PCB->LayerGroups.Number[sgroup])
+  bottom_group = GetLayerGroupNumberByNumber (bottom_silk_layer);
+  top_group = GetLayerGroupNumberByNumber (top_silk_layer);
+  if (PCB->LayerGroups.Number[top_group] == PCB->LayerGroups.Number[bottom_group])
     {
-      for (j = k = 0; j < PCB->LayerGroups.Number[sgroup]; j++)
+      for (j = k = 0; j < PCB->LayerGroups.Number[bottom_group]; j++)
 	{
 	  int t1, t2;
-	  Cardinal cnumber = PCB->LayerGroups.Entries[cgroup][k];
-	  Cardinal snumber = PCB->LayerGroups.Entries[sgroup][j];
+	  Cardinal top_number = PCB->LayerGroups.Entries[top_group][k];
+	  Cardinal bottom_number = PCB->LayerGroups.Entries[bottom_group][j];
 
-	  if (snumber >= max_copper_layer)
+	  if (bottom_number >= max_copper_layer)
 	    continue;
-	  swap = Buffer->Data->Layer[snumber];
+	  swap = Buffer->Data->Layer[bottom_number];
 
-	  while (cnumber >= max_copper_layer)
+	  while (top_number >= max_copper_layer)
 	    {
 	      k++;
-	      cnumber = PCB->LayerGroups.Entries[cgroup][k];
+	      top_number = PCB->LayerGroups.Entries[top_group][k];
 	    }
-	  Buffer->Data->Layer[snumber] = Buffer->Data->Layer[cnumber];
-	  Buffer->Data->Layer[cnumber] = swap;
+	  Buffer->Data->Layer[bottom_number] = Buffer->Data->Layer[top_number];
+	  Buffer->Data->Layer[top_number] = swap;
 	  k++;
 	  /* move the thermal flags with the layers */
 	  ALLPIN_LOOP (Buffer->Data);
 	  {
-	    t1 = TEST_THERM (snumber, pin);
-	    t2 = TEST_THERM (cnumber, pin);
-	    ASSIGN_THERM (snumber, t2, pin);
-	    ASSIGN_THERM (cnumber, t1, pin);
+	    t1 = TEST_THERM (bottom_number, pin);
+	    t2 = TEST_THERM (top_number, pin);
+	    ASSIGN_THERM (bottom_number, t2, pin);
+	    ASSIGN_THERM (top_number, t1, pin);
 	  }
 	  ENDALL_LOOP;
 	  VIA_LOOP (Buffer->Data);
 	  {
-	    t1 = TEST_THERM (snumber, via);
-	    t2 = TEST_THERM (cnumber, via);
-	    ASSIGN_THERM (snumber, t2, via);
-	    ASSIGN_THERM (cnumber, t1, via);
+	    t1 = TEST_THERM (bottom_number, via);
+	    t2 = TEST_THERM (top_number, via);
+	    ASSIGN_THERM (bottom_number, t2, via);
+	    ASSIGN_THERM (top_number, t1, via);
 	  }
 	  END_LOOP;
 	}
diff --git a/src/const.h b/src/const.h
index 7cbf194..76db89a 100644
--- a/src/const.h
+++ b/src/const.h
@@ -37,10 +37,10 @@
 
 /* ---------------------------------------------------------------------------
  * the layer-numbers of the two additional special layers
- * 'component' and 'solder'. The offset of MAX_LAYER is not added
+ * 'top' and 'bottom'. The offset of MAX_LAYER is not added
  */
-#define	SOLDER_LAYER		0
-#define	COMPONENT_LAYER		1
+#define	BOTTOM_LAYER		0
+#define	TOP_LAYER		1
 
 /* ---------------------------------------------------------------------------
  * misc constants
diff --git a/src/create.c b/src/create.c
index 8b5c2b9..5ea94c8 100644
--- a/src/create.c
+++ b/src/create.c
@@ -124,15 +124,15 @@ pcb_colors_from_settings (PCBType *ptr)
       ptr->Data->Layer[i].Color = Settings.LayerColor[i];
       ptr->Data->Layer[i].SelectedColor = Settings.LayerSelectedColor[i];
     }
-  ptr->Data->Layer[component_silk_layer].Color =
-    Settings.ShowSolderSide ?
+  ptr->Data->Layer[top_silk_layer].Color =
+    Settings.ShowBottomSide ?
     Settings.InvisibleObjectsColor : Settings.ElementColor;
-  ptr->Data->Layer[component_silk_layer].SelectedColor =
+  ptr->Data->Layer[top_silk_layer].SelectedColor =
     Settings.ElementSelectedColor;
-  ptr->Data->Layer[solder_silk_layer].Color =
-    Settings.ShowSolderSide ?
+  ptr->Data->Layer[bottom_silk_layer].Color =
+    Settings.ShowBottomSide ?
     Settings.ElementColor : Settings.InvisibleObjectsColor;
-  ptr->Data->Layer[solder_silk_layer].SelectedColor =
+  ptr->Data->Layer[bottom_silk_layer].SelectedColor =
     Settings.ElementSelectedColor;
 }
 
@@ -223,8 +223,8 @@ CreateNewPCBPost (PCBType *pcb, int use_defaults)
       if (ParseGroupString (Settings.Groups, &pcb->LayerGroups, DEF_LAYER))
 	return 1;
 
-      pcb->Data->Layer[component_silk_layer].Name = strdup ("silk");
-      pcb->Data->Layer[solder_silk_layer].Name = strdup ("silk");
+      pcb->Data->Layer[top_silk_layer].Name = strdup ("silk");
+      pcb->Data->Layer[bottom_silk_layer].Name = strdup ("silk");
     }
   return 0;
 }
diff --git a/src/crosshair.c b/src/crosshair.c
index 8729237..f7f9203 100644
--- a/src/crosshair.c
+++ b/src/crosshair.c
@@ -243,7 +243,7 @@ XORDrawElement (ElementType *Element, Coord DX, Coord DY)
   PAD_LOOP (Element);
   {
     if (PCB->InvisibleObjectsOn ||
-        (TEST_FLAG (ONSOLDERFLAG, pad) != 0) == Settings.ShowSolderSide)
+        (TEST_FLAG (ONSOLDERFLAG, pad) != 0) == Settings.ShowBottomSide)
       {
         /* Make a copy of the pad structure, moved to the correct position */
         PadType moved_pad = *pad;
@@ -990,7 +990,7 @@ FitCrosshairIntoGrid (Coord X, Coord Y)
       PadType *pad = (PadType *) ptr2;
       LayerType *desired_layer;
       Cardinal desired_group;
-      Cardinal SLayer, CLayer;
+      Cardinal bottom_group, top_group;
       int found_our_layer = false;
 
       desired_layer = CURRENT;
@@ -1000,10 +1000,10 @@ FitCrosshairIntoGrid (Coord X, Coord Y)
           desired_layer = (LayerType *)Crosshair.AttachedObject.Ptr1;
         }
 
-      /* find layer groups of the component side and solder side */
-      SLayer = GetLayerGroupNumberByNumber (solder_silk_layer);
-      CLayer = GetLayerGroupNumberByNumber (component_silk_layer);
-      desired_group = TEST_FLAG (ONSOLDERFLAG, pad) ? SLayer : CLayer;
+      /* find layer groups of the top side and bottom side */
+      bottom_group = GetLayerGroupNumberByNumber (bottom_silk_layer);
+      top_group    = GetLayerGroupNumberByNumber (top_silk_layer);
+      desired_group = TEST_FLAG (ONSOLDERFLAG, pad) ? bottom_group : top_group;
 
       GROUP_LOOP (PCB->Data, desired_group);
       {
diff --git a/src/data.h b/src/data.h
index 28cbfda..06daf0c 100644
--- a/src/data.h
+++ b/src/data.h
@@ -47,8 +47,8 @@ extern PCBType *PCB;
 
 #define max_group (PCB->Data->LayerN)
 #define max_copper_layer (PCB->Data->LayerN)
-#define solder_silk_layer (max_copper_layer + SOLDER_LAYER)
-#define component_silk_layer (max_copper_layer + COMPONENT_LAYER)
+#define bottom_silk_layer (max_copper_layer + BOTTOM_LAYER)
+#define top_silk_layer (max_copper_layer + TOP_LAYER)
 
 extern SettingType Settings;
 
diff --git a/src/djopt.c b/src/djopt.c
index 8508aa7..2398f75 100644
--- a/src/djopt.c
+++ b/src/djopt.c
@@ -113,8 +113,8 @@ static line_s *lines;
 
 static int layer_groupings[MAX_LAYER];
 static char layer_type[MAX_LAYER];
-#define LT_COMPONENT 1
-#define LT_SOLDER 2
+#define LT_TOP 1
+#define LT_BOTTOM 2
 
 static int autorouted_only = 1;
 
@@ -2789,7 +2789,7 @@ padcleaner ()
       ALLPAD_LOOP (PCB->Data);
 	{
 	  int layerflag =
-	    TEST_FLAG (ONSOLDERFLAG, element) ? LT_SOLDER : LT_COMPONENT;
+	    TEST_FLAG (ONSOLDERFLAG, element) ? LT_BOTTOM : LT_TOP;
 
 	  if (layer_type[l->layer] != layerflag)
 	    continue;
@@ -2833,10 +2833,10 @@ grok_layer_groups ()
       f = 0;
       for (j = 0; j < l->Number[i]; j++)
 	{
-	  if (l->Entries[i][j] == solder_silk_layer)
-	    f |= LT_SOLDER;
-	  if (l->Entries[i][j] == component_silk_layer)
-	    f |= LT_COMPONENT;
+	  if (l->Entries[i][j] == bottom_silk_layer)
+	    f |= LT_BOTTOM;
+	  if (l->Entries[i][j] == top_silk_layer)
+	    f |= LT_TOP;
 	}
       for (j = 0; j < l->Number[i]; j++)
 	{
@@ -2844,9 +2844,9 @@ grok_layer_groups ()
 	    {
 	      layer_type[l->Entries[i][j]] |= f;
 	      layer_groupings[l->Entries[i][j]] = i;
-	      if (solder_layer == -1 && f == LT_SOLDER)
+	      if (solder_layer == -1 && f == LT_BOTTOM)
 		solder_layer = l->Entries[i][j];
-	      if (component_layer == -1 && f == LT_COMPONENT)
+	      if (component_layer == -1 && f == LT_TOP)
 		component_layer = l->Entries[i][j];
 	    }
 	}
diff --git a/src/draw.c b/src/draw.c
index a682f9d..fb5e4cc 100644
--- a/src/draw.c
+++ b/src/draw.c
@@ -539,7 +539,7 @@ static void
 DrawEverything (const BoxType *drawn_area)
 {
   int i, ngroups, side;
-  int component, solder;
+  int top_group, bottom_group;
   /* This is the list of layer groups we will draw.  */
   int do_group[MAX_LAYER];
   /* This is the reverse of the order in which we draw them.  */
@@ -562,8 +562,8 @@ DrawEverything (const BoxType *drawn_area)
 	}
     }
 
-  component = GetLayerGroupNumberByNumber (component_silk_layer);
-  solder = GetLayerGroupNumberByNumber (solder_silk_layer);
+  top_group = GetLayerGroupNumberByNumber (top_silk_layer);
+  bottom_group = GetLayerGroupNumberByNumber (bottom_silk_layer);
 
   /*
    * first draw all 'invisible' stuff
@@ -571,7 +571,7 @@ DrawEverything (const BoxType *drawn_area)
   if (!TEST_FLAG (CHECKPLANESFLAG, PCB)
       && gui->set_layer ("invisible", SL (INVISIBLE, 0), 0))
     {
-      side = SWAP_IDENT ? COMPONENT_LAYER : SOLDER_LAYER;
+      side = SWAP_IDENT ? TOP_LAYER : BOTTOM_LAYER;
       if (PCB->ElementOn)
 	{
 	  r_search (PCB->Data->element_tree, drawn_area, NULL, element_callback, &side);
@@ -599,7 +599,7 @@ DrawEverything (const BoxType *drawn_area)
 
   /* Draw pins, pads, vias below silk */
   if (gui->gui)
-    DrawPPV (SWAP_IDENT ? solder : component, drawn_area);
+    DrawPPV (SWAP_IDENT ? bottom_group : top_group, drawn_area);
   else
     {
       CountHoles (&plated, &unplated, drawn_area);
@@ -620,25 +620,25 @@ DrawEverything (const BoxType *drawn_area)
   /* Draw the solder mask if turned on */
   if (gui->set_layer ("componentmask", SL (MASK, TOP), 0))
     {
-      DrawMask (COMPONENT_LAYER, drawn_area);
+      DrawMask (TOP_LAYER, drawn_area);
       gui->end_layer ();
     }
 
   if (gui->set_layer ("soldermask", SL (MASK, BOTTOM), 0))
     {
-      DrawMask (SOLDER_LAYER, drawn_area);
+      DrawMask (BOTTOM_LAYER, drawn_area);
       gui->end_layer ();
     }
 
   if (gui->set_layer ("topsilk", SL (SILK, TOP), 0))
     {
-      DrawSilk (COMPONENT_LAYER, drawn_area);
+      DrawSilk (TOP_LAYER, drawn_area);
       gui->end_layer ();
     }
 
   if (gui->set_layer ("bottomsilk", SL (SILK, BOTTOM), 0))
     {
-      DrawSilk (SOLDER_LAYER, drawn_area);
+      DrawSilk (BOTTOM_LAYER, drawn_area);
       gui->end_layer ();
     }
 
@@ -656,29 +656,29 @@ DrawEverything (const BoxType *drawn_area)
         }
     }
 
-  paste_empty = IsPasteEmpty (COMPONENT_LAYER);
+  paste_empty = IsPasteEmpty (TOP_LAYER);
   if (gui->set_layer ("toppaste", SL (PASTE, TOP), paste_empty))
     {
-      DrawPaste (COMPONENT_LAYER, drawn_area);
+      DrawPaste (TOP_LAYER, drawn_area);
       gui->end_layer ();
     }
 
-  paste_empty = IsPasteEmpty (SOLDER_LAYER);
+  paste_empty = IsPasteEmpty (BOTTOM_LAYER);
   if (gui->set_layer ("bottompaste", SL (PASTE, BOTTOM), paste_empty))
     {
-      DrawPaste (SOLDER_LAYER, drawn_area);
+      DrawPaste (BOTTOM_LAYER, drawn_area);
       gui->end_layer ();
     }
 
   if (gui->set_layer ("topassembly", SL (ASSY, TOP), 0))
     {
-      PrintAssembly (COMPONENT_LAYER, drawn_area);
+      PrintAssembly (TOP_LAYER, drawn_area);
       gui->end_layer ();
     }
 
   if (gui->set_layer ("bottomassembly", SL (ASSY, BOTTOM), 0))
     {
-      PrintAssembly (SOLDER_LAYER, drawn_area);
+      PrintAssembly (BOTTOM_LAYER, drawn_area);
       gui->end_layer ();
     }
 
@@ -739,8 +739,8 @@ DrawEMark (ElementType *e, Coord X, Coord Y, bool invisible)
 static void
 DrawPPV (int group, const BoxType *drawn_area)
 {
-  int component_group = GetLayerGroupNumberByNumber (component_silk_layer);
-  int solder_group = GetLayerGroupNumberByNumber (solder_silk_layer);
+  int top_group = GetLayerGroupNumberByNumber (top_silk_layer);
+  int bottom_group = GetLayerGroupNumberByNumber (bottom_silk_layer);
   int side;
 
   if (PCB->PinOn || !gui->gui)
@@ -749,15 +749,15 @@ DrawPPV (int group, const BoxType *drawn_area)
       r_search (PCB->Data->pin_tree, drawn_area, NULL, pin_callback, NULL);
 
       /* draw element pads */
-      if (group == component_group)
+      if (group == top_group)
         {
-          side = COMPONENT_LAYER;
+          side = TOP_LAYER;
           r_search (PCB->Data->pad_tree, drawn_area, NULL, pad_callback, &side);
         }
 
-      if (group == solder_group)
+      if (group == bottom_group)
         {
-          side = SOLDER_LAYER;
+          side = BOTTOM_LAYER;
           r_search (PCB->Data->pad_tree, drawn_area, NULL, pad_callback, &side);
         }
     }
diff --git a/src/find.c b/src/find.c
index 99893da..778ab16 100644
--- a/src/find.c
+++ b/src/find.c
@@ -495,13 +495,13 @@ InitComponentLookup (void)
   /* initialize pad data; start by counting the total number
    * on each of the two possible layers
    */
-  NumberOfPads[COMPONENT_LAYER] = NumberOfPads[SOLDER_LAYER] = 0;
+  NumberOfPads[TOP_LAYER] = NumberOfPads[BOTTOM_LAYER] = 0;
   ALLPAD_LOOP (PCB->Data);
   {
     if (TEST_FLAG (ONSOLDERFLAG, pad))
-      NumberOfPads[SOLDER_LAYER]++;
+      NumberOfPads[BOTTOM_LAYER]++;
     else
-      NumberOfPads[COMPONENT_LAYER]++;
+      NumberOfPads[TOP_LAYER]++;
   }
   ENDALL_LOOP;
   for (i = 0; i < 2; i++)
@@ -631,8 +631,8 @@ LOCtoPVpad_callback (const BoxType * b, void *cl)
 
   if (!TEST_FLAG (i->flag, pad) && IS_PV_ON_PAD (i->pv, pad) &&
       !TEST_FLAG (HOLEFLAG, i->pv) &&
-      ADD_PAD_TO_LIST (TEST_FLAG (ONSOLDERFLAG, pad) ? SOLDER_LAYER :
-                       COMPONENT_LAYER, pad, i->flag))
+      ADD_PAD_TO_LIST (TEST_FLAG (ONSOLDERFLAG, pad) ? BOTTOM_LAYER :
+                       TOP_LAYER, pad, i->flag))
     longjmp (i->env, 1);
   return 0;
 }
@@ -1686,7 +1686,7 @@ LOCtoArcPad_callback (const BoxType * b, void *cl)
   struct lo_info *i = (struct lo_info *) cl;
 
   if (!TEST_FLAG (i->flag, pad) && i->layer ==
-      (TEST_FLAG (ONSOLDERFLAG, pad) ? SOLDER_LAYER : COMPONENT_LAYER)
+      (TEST_FLAG (ONSOLDERFLAG, pad) ? BOTTOM_LAYER : TOP_LAYER)
       && ArcPadIntersect (i->arc, pad) && ADD_PAD_TO_LIST (i->layer, pad, i->flag))
     longjmp (i->env, 1);
   return 0;
@@ -1820,7 +1820,7 @@ LOCtoLinePad_callback (const BoxType * b, void *cl)
   struct lo_info *i = (struct lo_info *) cl;
 
   if (!TEST_FLAG (i->flag, pad) && i->layer ==
-      (TEST_FLAG (ONSOLDERFLAG, pad) ? SOLDER_LAYER : COMPONENT_LAYER)
+      (TEST_FLAG (ONSOLDERFLAG, pad) ? BOTTOM_LAYER : TOP_LAYER)
       && LinePadIntersect (i->line, pad) && ADD_PAD_TO_LIST (i->layer, pad, i->flag))
     longjmp (i->env, 1);
   return 0;
@@ -1955,7 +1955,7 @@ LOCtoPad_callback (const BoxType * b, void *cl)
   struct rat_info *i = (struct rat_info *) cl;
 
   if (!TEST_FLAG (i->flag, pad) && i->layer ==
-	(TEST_FLAG (ONSOLDERFLAG, pad) ? SOLDER_LAYER : COMPONENT_LAYER) &&
+	(TEST_FLAG (ONSOLDERFLAG, pad) ? BOTTOM_LAYER : TOP_LAYER) &&
       ((pad->Point1.X == i->Point->X && pad->Point1.Y == i->Point->Y) ||
        (pad->Point2.X == i->Point->X && pad->Point2.Y == i->Point->Y) ||
        ((pad->Point1.X + pad->Point2.X) / 2 == i->Point->X &&
@@ -2103,7 +2103,7 @@ LOCtoPadPad_callback (const BoxType * b, void *cl)
   struct lo_info *i = (struct lo_info *) cl;
 
   if (!TEST_FLAG (i->flag, pad) && i->layer ==
-      (TEST_FLAG (ONSOLDERFLAG, pad) ? SOLDER_LAYER : COMPONENT_LAYER)
+      (TEST_FLAG (ONSOLDERFLAG, pad) ? BOTTOM_LAYER : TOP_LAYER)
       && PadPadIntersect (pad, i->pad) && ADD_PAD_TO_LIST (i->layer, pad, i->flag))
     longjmp (i->env, 1);
   return 0;
@@ -2222,7 +2222,7 @@ LOCtoPolyPad_callback (const BoxType * b, void *cl)
   struct lo_info *i = (struct lo_info *) cl;
 
   if (!TEST_FLAG (i->flag, pad) && i->layer ==
-      (TEST_FLAG (ONSOLDERFLAG, pad) ? SOLDER_LAYER : COMPONENT_LAYER)
+      (TEST_FLAG (ONSOLDERFLAG, pad) ? BOTTOM_LAYER : TOP_LAYER)
       && IsPadInPolygon (pad, i->polygon))
     {
       if (ADD_PAD_TO_LIST (i->layer, pad, i->flag))
@@ -2677,8 +2677,8 @@ PrintAndSelectUnusedPinsAndPadsOfElement (ElementType *Element, FILE * FP, int f
             if (ADD_PV_TO_LIST (pin, flag))
               return true;
             DoIt (flag, true, true);
-            number = PadList[COMPONENT_LAYER].Number
-              + PadList[SOLDER_LAYER].Number + PVList.Number;
+            number = PadList[TOP_LAYER].Number
+              + PadList[BOTTOM_LAYER].Number + PVList.Number;
             /* the pin has no connection if it's the only
              * list entry; don't count vias
              */
@@ -2718,11 +2718,11 @@ PrintAndSelectUnusedPinsAndPadsOfElement (ElementType *Element, FILE * FP, int f
       {
         int i;
         if (ADD_PAD_TO_LIST (TEST_FLAG (ONSOLDERFLAG, pad)
-                             ? SOLDER_LAYER : COMPONENT_LAYER, pad, flag))
+                             ? BOTTOM_LAYER : TOP_LAYER, pad, flag))
           return true;
         DoIt (flag, true, true);
-        number = PadList[COMPONENT_LAYER].Number
-          + PadList[SOLDER_LAYER].Number + PVList.Number;
+        number = PadList[TOP_LAYER].Number
+          + PadList[BOTTOM_LAYER].Number + PVList.Number;
         /* the pin has no connection if it's the only
          * list entry; don't count vias
          */
@@ -2813,8 +2813,8 @@ PrintElementConnections (ElementType *Element, FILE * FP, int flag, bool AndDraw
     DoIt (flag, true, AndDraw);
     /* printout all found connections */
     PrintPinConnections (FP, true);
-    PrintPadConnections (COMPONENT_LAYER, FP, false);
-    PrintPadConnections (SOLDER_LAYER, FP, false);
+    PrintPadConnections (TOP_LAYER, FP, false);
+    PrintPadConnections (BOTTOM_LAYER, FP, false);
     fputs ("\t}\n", FP);
     if (PrepareNextLoop (FP))
       return (true);
@@ -2832,14 +2832,14 @@ PrintElementConnections (ElementType *Element, FILE * FP, int flag, bool AndDraw
         fputs ("\t\t__CHECKED_BEFORE__\n\t}\n", FP);
         continue;
       }
-    layer = TEST_FLAG (ONSOLDERFLAG, pad) ? SOLDER_LAYER : COMPONENT_LAYER;
+    layer = TEST_FLAG (ONSOLDERFLAG, pad) ? BOTTOM_LAYER : TOP_LAYER;
     if (ADD_PAD_TO_LIST (layer, pad, flag))
       return true;
     DoIt (flag, true, AndDraw);
     /* print all found connections */
     PrintPadConnections (layer, FP, true);
     PrintPadConnections (layer ==
-                         (COMPONENT_LAYER ? SOLDER_LAYER : COMPONENT_LAYER),
+                         (TOP_LAYER ? BOTTOM_LAYER : TOP_LAYER),
                          FP, false);
     PrintPinConnections (FP, false);
     fputs ("\t}\n", FP);
@@ -3032,7 +3032,7 @@ ListStart (int type, void *ptr1, void *ptr2, void *ptr3, int flag)
         PadType *pad = (PadType *) ptr2;
         if (ADD_PAD_TO_LIST
             (TEST_FLAG
-             (ONSOLDERFLAG, pad) ? SOLDER_LAYER : COMPONENT_LAYER, pad, flag))
+             (ONSOLDERFLAG, pad) ? BOTTOM_LAYER : TOP_LAYER, pad, flag))
           return true;
         break;
       }
diff --git a/src/flags.c b/src/flags.c
index 1383e99..d52407b 100644
--- a/src/flags.c
+++ b/src/flags.c
@@ -253,7 +253,7 @@ HID_Flag flags_flag_list[] = {
   {"fullpoly",             FlagSETTINGS,     OFFSET_POINTER (SettingType, FullPoly)},
   {"clearline",            FlagSETTINGS,     OFFSET_POINTER (SettingType, ClearLine)},
   {"uniquenames",          FlagSETTINGS,     OFFSET_POINTER (SettingType, UniqueNames)},
-  {"showsolderside",       FlagSETTINGS,     OFFSET_POINTER (SettingType, ShowSolderSide)},
+  {"showsolderside",       FlagSETTINGS,     OFFSET_POINTER (SettingType, ShowBottomSide)},
   {"savelastcommand",      FlagSETTINGS,     OFFSET_POINTER (SettingType, SaveLastCommand)},
   {"saveintmp",            FlagSETTINGS,     OFFSET_POINTER (SettingType, SaveInTMP)},
   {"drawgrid",             FlagSETTINGS,     OFFSET_POINTER (SettingType, DrawGrid)},
diff --git a/src/fontmode.c b/src/fontmode.c
index e09f825..4eabb9c 100644
--- a/src/fontmode.c
+++ b/src/fontmode.c
@@ -88,8 +88,8 @@ FontEdit (int argc, char **argv, Coord Ux, Coord Uy)
   Settings.minWid = PCB->minWid = 1;
   Settings.minSlk = PCB->minSlk = 1;
 
-  MoveLayerToGroup (max_copper_layer + COMPONENT_LAYER, 0);
-  MoveLayerToGroup (max_copper_layer + SOLDER_LAYER, 1);
+  MoveLayerToGroup (max_copper_layer + TOP_LAYER, 0);
+  MoveLayerToGroup (max_copper_layer + BOTTOM_LAYER, 1);
 
   while (PCB->Data->LayerN > 4)
     MoveLayer (4, -1);
diff --git a/src/global.h b/src/global.h
index 8103d1d..1d017fe 100644
--- a/src/global.h
+++ b/src/global.h
@@ -673,7 +673,7 @@ typedef struct			/* some resources... */
   bool ClearLine, FullPoly,
     UniqueNames,		/* force unique names */
     SnapPin,			/* snap to pins and pads */
-    ShowSolderSide,		/* mirror output */
+    ShowBottomSide,		/* mirror output */
     SaveLastCommand,		/* save the last command entered by user */
     SaveInTMP,			/* always save data in /tmp */
     SaveMetricOnly,		/* save with mm suffix only, not mil/mm hybrid */
diff --git a/src/hid/batch/batch.c b/src/hid/batch/batch.c
index e62e313..eb121ec 100644
--- a/src/hid/batch/batch.c
+++ b/src/hid/batch/batch.c
@@ -77,7 +77,7 @@ static int
 info (int argc, char **argv, Coord x, Coord y)
 {
   int i, j;
-  int cg, sg;
+  int top_group, bottom_group;
   if (!PCB || !PCB->Data || !PCB->Filename)
     {
       printf("No PCB loaded.\n");
@@ -87,15 +87,15 @@ info (int argc, char **argv, Coord x, Coord y)
   pcb_printf("Size: %ml x %ml mils, %mm x %mm mm\n",
 	 PCB->MaxWidth, PCB->MaxHeight,
 	 PCB->MaxWidth, PCB->MaxHeight);
-  cg = GetLayerGroupNumberByNumber (component_silk_layer);
-  sg = GetLayerGroupNumberByNumber (solder_silk_layer);
+  top_group = GetLayerGroupNumberByNumber (top_silk_layer);
+  bottom_group = GetLayerGroupNumberByNumber (bottom_silk_layer);
   for (i=0; i<MAX_LAYER; i++)
     {
       
       int lg = GetLayerGroupNumberByNumber (i);
       for (j=0; j<MAX_LAYER; j++)
 	putchar(j==lg ? '#' : '-');
-      printf(" %c %s\n", lg==cg ? 'c' : lg==sg ? 's' : '-',
+      printf(" %c %s\n", lg == top_group ? 'c' : lg == bottom_group ? 's' : '-',
 	     PCB->Data->Layer[i].Name);
     }
   return 0;
diff --git a/src/hid/common/flags.c b/src/hid/common/flags.c
index 9c87a54..3e492a1 100644
--- a/src/hid/common/flags.c
+++ b/src/hid/common/flags.c
@@ -181,7 +181,7 @@ layer_type_to_file_name (int idx, int style)
       group = GetLayerGroupNumberByNumber(idx);
       nlayers = PCB->LayerGroups.Number[group];
       single_name = PCB->Data->Layer[idx].Name;
-      if (group == GetLayerGroupNumberByNumber(component_silk_layer))
+      if (group == GetLayerGroupNumberByNumber(top_silk_layer))
 	{
 	  if (style == FNS_first
 	      || (style == FNS_single
@@ -189,7 +189,7 @@ layer_type_to_file_name (int idx, int style)
 	    return single_name;
 	  return "top";
 	}
-      else if (group == GetLayerGroupNumberByNumber(solder_silk_layer))
+      else if (group == GetLayerGroupNumberByNumber(bottom_silk_layer))
 	{
 	  if (style == FNS_first
 	      || (style == FNS_single
diff --git a/src/hid/gcode/gcode.c b/src/hid/gcode/gcode.c
index 208d02d..4eb42b7 100644
--- a/src/hid/gcode/gcode.c
+++ b/src/hid/gcode/gcode.c
@@ -110,7 +110,7 @@ static FILE *gcode_f = NULL;
 
 static int is_mask;
 static int is_drill;
-static int is_solder;
+static int is_bottom;
 
 /*
  * Which groups of layers to export into PNG layer masks. 1 means export, 0
@@ -611,10 +611,10 @@ gcode_do_export (HID_Attr_Val * options)
           /* magic */
           idx = (i >= 0 && i < max_group) ?
             PCB->LayerGroups.Entries[i][0] : i;
-          is_solder =
+          is_bottom =
             (GetLayerGroupNumberByNumber (idx) ==
-             GetLayerGroupNumberByNumber (solder_silk_layer)) ? 1 : 0;
-          save_drill = is_solder; /* save drills for one layer only */
+             GetLayerGroupNumberByNumber (bottom_silk_layer)) ? 1 : 0;
+          save_drill = is_bottom; /* save drills for one layer only */
           gcode_start_png ();
           hid_save_and_show_layer_ons (save_ons);
           gcode_start_png_export ();
@@ -628,7 +628,7 @@ gcode_do_export (HID_Attr_Val * options)
             {
               for (c = 0; c < gdImageSY (gcode_im); c++)
                 {
-                  if (is_solder)
+                  if (is_bottom)
                     v =  /* flip vertically and horizontally */
                       gdImageGetPixel (gcode_im, gdImageSX (gcode_im) - 1 - r,
                                        gdImageSY (gcode_im) - 1 - c);
@@ -641,7 +641,7 @@ gcode_do_export (HID_Attr_Val * options)
                   BM_PUT (bm, r, c, p);
                 }
             }
-          if (is_solder)
+          if (is_bottom)
             { /* flip back layer, used only for PNG output */
               gdImagePtr temp_im =
                 gdImageCreate (gdImageSX (gcode_im), gdImageSY (gcode_im));
@@ -1048,7 +1048,7 @@ gcode_do_export (HID_Attr_Val * options)
             LINE_LOOP (layer);
               {
                 ... calculate the offset for all lines and polygons of this layer,
-                mirror it if is_solder, then mill it ...
+                mirror it if is_bottom, then mill it ...
               }
             END_LOOP;
           }
diff --git a/src/hid/gerber/gerber.c b/src/hid/gerber/gerber.c
index 657f9f1..6983f58 100644
--- a/src/hid/gerber/gerber.c
+++ b/src/hid/gerber/gerber.c
@@ -472,13 +472,13 @@ assign_eagle_file_suffix (char *dest, int idx)
     default:
       group = GetLayerGroupNumberByNumber(idx);
       nlayers = PCB->LayerGroups.Number[group];
-      if (group == GetLayerGroupNumberByNumber(component_silk_layer))
+      if (group == GetLayerGroupNumberByNumber(top_silk_layer))
 	{
-	  suff = "cmp";
+	  suff = "cmp"; /* "Component layer" */
 	}
-      else if (group == GetLayerGroupNumberByNumber(solder_silk_layer))
+      else if (group == GetLayerGroupNumberByNumber(bottom_silk_layer))
 	{
-	  suff = "sol";
+	  suff = "sol"; /* "Solder layer" */
 	}
       else if (nlayers == 1
 	       && (strcmp (PCB->Data->Layer[idx].Name, "route") == 0 ||
@@ -527,11 +527,11 @@ assign_hackvana_file_suffix (char *dest, int idx)
     default:
       group = GetLayerGroupNumberByNumber(idx);
       nlayers = PCB->LayerGroups.Number[group];
-      if (group == GetLayerGroupNumberByNumber(component_silk_layer))
+      if (group == GetLayerGroupNumberByNumber(top_silk_layer))
       {
         suff = "gtl";
       }
-      else if (group == GetLayerGroupNumberByNumber(solder_silk_layer))
+      else if (group == GetLayerGroupNumberByNumber(bottom_silk_layer))
       {
         suff = "gbl";
       }
@@ -663,8 +663,8 @@ gerber_do_export (HID_Attr_Val * options)
       if (layer->LineN || layer->TextN || layer->ArcN || layer->PolygonN)
 	print_group[GetLayerGroupNumberByNumber (i)] = 1;
     }
-  print_group[GetLayerGroupNumberByNumber (solder_silk_layer)] = 1;
-  print_group[GetLayerGroupNumberByNumber (component_silk_layer)] = 1;
+  print_group[GetLayerGroupNumberByNumber (bottom_silk_layer)] = 1;
+  print_group[GetLayerGroupNumberByNumber (top_silk_layer)] = 1;
   for (i = 0; i < max_copper_layer; i++)
     if (print_group[GetLayerGroupNumberByNumber (i)])
       print_layer[i] = 1;
diff --git a/src/hid/gtk/gtkhid-main.c b/src/hid/gtk/gtkhid-main.c
index b24b9f7..8192c1b 100644
--- a/src/hid/gtk/gtkhid-main.c
+++ b/src/hid/gtk/gtkhid-main.c
@@ -1389,10 +1389,10 @@ static int
 SwapSides (int argc, char **argv, Coord x, Coord y)
 {
   int active_group = GetLayerGroupNumberByNumber (LayerStack[0]);
-  int comp_group = GetLayerGroupNumberByNumber (component_silk_layer);
-  int solder_group = GetLayerGroupNumberByNumber (solder_silk_layer);
-  bool comp_on = LAYER_PTR (PCB->LayerGroups.Entries[comp_group][0])->On;
-  bool solder_on = LAYER_PTR (PCB->LayerGroups.Entries[solder_group][0])->On;
+  int top_group = GetLayerGroupNumberByNumber (top_silk_layer);
+  int bottom_group = GetLayerGroupNumberByNumber (bottom_silk_layer);
+  bool top_on = LAYER_PTR (PCB->LayerGroups.Entries[top_group][0])->On;
+  bool bottom_on = LAYER_PTR (PCB->LayerGroups.Entries[bottom_group][0])->On;
 
   if (argc > 0)
     {
@@ -1408,24 +1408,24 @@ SwapSides (int argc, char **argv, Coord x, Coord y)
         case 'r':
         case 'R':
           ghid_flip_view (gport->pcb_x, gport->pcb_y, true, true);
-          Settings.ShowSolderSide = !Settings.ShowSolderSide; /* Swapped back below */
+          Settings.ShowBottomSide = !Settings.ShowBottomSide; /* Swapped back below */
           break;
         default:
           return 1;
       }
     }
 
-  Settings.ShowSolderSide = !Settings.ShowSolderSide;
+  Settings.ShowBottomSide = !Settings.ShowBottomSide;
 
-  if ((active_group == comp_group   && comp_on   && !solder_on) ||
-      (active_group == solder_group && solder_on && !comp_on))
+  if ((active_group == top_group    && top_on    && !bottom_on) ||
+      (active_group == bottom_group && bottom_on && !top_on))
     {
-      bool new_solder_vis = Settings.ShowSolderSide;
+      bool new_bottom_vis = Settings.ShowBottomSide;
 
-      ChangeGroupVisibility (PCB->LayerGroups.Entries[comp_group][0],
-                             !new_solder_vis, !new_solder_vis);
-      ChangeGroupVisibility (PCB->LayerGroups.Entries[solder_group][0],
-                             new_solder_vis, new_solder_vis);
+      ChangeGroupVisibility (PCB->LayerGroups.Entries[top_group][0],
+                             !new_bottom_vis, !new_bottom_vis);
+      ChangeGroupVisibility (PCB->LayerGroups.Entries[bottom_group][0],
+                             new_bottom_vis, new_bottom_vis);
     }
 
   return 0;
diff --git a/src/hid/gtk/gui-config.c b/src/hid/gtk/gui-config.c
index 56a6cd5..ed79d50 100644
--- a/src/hid/gtk/gui-config.c
+++ b/src/hid/gtk/gui-config.c
@@ -1369,9 +1369,9 @@ make_layer_group_string (LayerGroupType * lg)
       for (entry = 0; entry < lg->Number[group]; entry++)
 	{
 	  layer = lg->Entries[group][entry];
-	  if (layer == component_silk_layer)
+	  if (layer == top_silk_layer)
 	    string = g_string_append (string, "c");
-	  else if (layer == solder_silk_layer)
+	  else if (layer == bottom_silk_layer)
 	    string = g_string_append (string, "s");
 	  else
 	    g_string_append_printf (string, "%d", layer + 1);
@@ -1391,7 +1391,7 @@ config_layers_apply (void)
   LayerType *layer;
   gchar *s;
   gint group, i;
-  gint componentgroup = 0, soldergroup = 0;
+  gint top_group = 0, bottom_group = 0;
   gboolean use_as_default = FALSE, layers_modified = FALSE;
 
 #if FIXME
@@ -1434,25 +1434,25 @@ config_layers_apply (void)
 	  group = config_layer_group[i] - 1;
 	  layer_groups.Entries[group][layer_groups.Number[group]++] = i;
 
-	  if (i == component_silk_layer)
-	    componentgroup = group;
-	  else if (i == solder_silk_layer)
-	    soldergroup = group;
+	  if (i == top_silk_layer)
+	    top_group = group;
+	  else if (i == bottom_silk_layer)
+	    bottom_group = group;
 	}
 
       /* do some cross-checking
          |  top-side and bottom-side must be in different groups
          |  top-side and bottom-side must not be the only one in the group
        */
-      if (layer_groups.Number[soldergroup] <= 1
-	  || layer_groups.Number[componentgroup] <= 1)
+      if (layer_groups.Number[bottom_group] <= 1
+	  || layer_groups.Number[top_group] <= 1)
 	{
 	  Message (_
 		   ("Both, 'top side' and 'bottom side' layer must have at least\n"
 		    "\tone other layer in their group.\n"));
 	  return;
 	}
-      else if (soldergroup == componentgroup)
+      else if (bottom_group == top_group)
 	{
 	  Message (_
 		   ("The 'top side' and 'bottom side' layers are not allowed\n"
@@ -1565,9 +1565,9 @@ ghid_config_groups_changed(void)
    */
   for (layer = 0; layer < max_copper_layer + 2; ++layer)
     {
-      if (layer == component_silk_layer)
+      if (layer == top_silk_layer)
 	name = _("top side");
-      else if (layer == solder_silk_layer)
+      else if (layer == bottom_silk_layer)
 	name = _("bottom side");
       else
 	name = (gchar *) UNKNOWN (PCB->Data->Layer[layer].Name);
diff --git a/src/hid/gtk/gui-misc.c b/src/hid/gtk/gui-misc.c
index 64a6011..f739d5e 100644
--- a/src/hid/gtk/gui-misc.c
+++ b/src/hid/gtk/gui-misc.c
@@ -412,7 +412,7 @@ ghid_set_status_line_label (void)
           "<b>text</b>=%i%%  "
           "<b>buffer</b>=#%i"),
       Settings.grid_unit->allow,
-      Settings.ShowSolderSide ? C_("status", "bottom") : C_("status", "top"),
+      Settings.ShowBottomSide ? C_("status", "bottom") : C_("status", "top"),
       PCB->Grid,
       flag, TEST_FLAG (RUBBERBANDFLAG, PCB) ? ",R  " : "  ",
       Settings.LineThickness,
diff --git a/src/hid/lesstif/dialogs.c b/src/hid/lesstif/dialogs.c
index 59a44c8..db9c657 100644
--- a/src/hid/lesstif/dialogs.c
+++ b/src/hid/lesstif/dialogs.c
@@ -32,8 +32,8 @@ static int n;
 
 static int ok;
 
-#define COMPONENT_SIDE_NAME "(top)"
-#define SOLDER_SIDE_NAME "(bottom)"
+#define TOP_SIDE_NAME "(top)"
+#define BOTTOM_SIDE_NAME "(bottom)"
 
 /* ------------------------------------------------------------ */
 
@@ -1389,10 +1389,10 @@ lgbutton_expose (Widget w, XtPointer u, XmDrawingAreaCallbackStruct *cbs)
       int swidth;
       const char *name;
 
-      if (i == solder_silk_layer)
-	name = SOLDER_SIDE_NAME;
-      else if (i == component_silk_layer)
-	name = COMPONENT_SIDE_NAME;
+      if (i == bottom_silk_layer)
+	name = BOTTOM_SIDE_NAME;
+      else if (i == top_silk_layer)
+	name = TOP_SIDE_NAME;
       else
 	name = PCB->Data->Layer[i].Name;
       XTextExtents (lgr.font, name, strlen(name), &dir, &lg_fa, &lg_fd, &size);
@@ -1474,10 +1474,10 @@ lesstif_update_layer_groups ()
       int swidth;
       const char *name;
 
-      if (i == solder_silk_layer)
-	name = SOLDER_SIDE_NAME;
-      else if (i == component_silk_layer)
-	name = COMPONENT_SIDE_NAME;
+      if (i == bottom_silk_layer)
+	name = BOTTOM_SIDE_NAME;
+      else if (i == top_silk_layer)
+	name = TOP_SIDE_NAME;
       else
 	name = PCB->Data->Layer[i].Name;
       XTextExtents (lgr.font, name, strlen(name), &dir, &lg_fa, &lg_fd, &size);
@@ -1500,10 +1500,10 @@ lesstif_update_layer_groups ()
       n = 0;
       if (i < max_copper_layer)
 	name = PCB->Data->Layer[i].Name;
-      else if (i == solder_silk_layer)
-	name = SOLDER_SIDE_NAME;
-      else if (i == component_silk_layer)
-	name = COMPONENT_SIDE_NAME;
+      else if (i == bottom_silk_layer)
+	name = BOTTOM_SIDE_NAME;
+      else if (i == top_silk_layer)
+	name = TOP_SIDE_NAME;
       stdarg (XmNlabelString, XmStringCreatePCB (name));
       XtSetValues (lglabels[i], args, n);
       for (j = 0; j < max_group; j++)
diff --git a/src/hid/lesstif/main.c b/src/hid/lesstif/main.c
index 4cd8d4a..3df6148 100644
--- a/src/hid/lesstif/main.c
+++ b/src/hid/lesstif/main.c
@@ -613,14 +613,14 @@ group_showing (int g, int *c)
 static int
 SwapSides (int argc, char **argv, Coord x, Coord y)
 {
-  int old_shown_side = Settings.ShowSolderSide;
-  int comp_group = GetLayerGroupNumberByNumber (component_silk_layer);
-  int solder_group = GetLayerGroupNumberByNumber (solder_silk_layer);
+  int old_shown_side = Settings.ShowBottomSide;
+  int top_group = GetLayerGroupNumberByNumber (top_silk_layer);
+  int bottom_group = GetLayerGroupNumberByNumber (bottom_silk_layer);
   int active_group = GetLayerGroupNumberByNumber (LayerStack[0]);
-  int comp_layer;
-  int solder_layer;
-  int comp_showing = group_showing (comp_group, &comp_layer);
-  int solder_showing = group_showing (solder_group, &solder_layer);
+  int top_layer;
+  int bottom_layer;
+  int top_showing = group_showing (top_group, &top_layer);
+  int bottom_showing = group_showing (bottom_group, &bottom_layer);
 
   if (argc > 0)
     {
@@ -642,7 +642,7 @@ SwapSides (int argc, char **argv, Coord x, Coord y)
 	return 1;
       }
       /* SwapSides will swap this */
-      Settings.ShowSolderSide = (flip_x == flip_y);
+      Settings.ShowBottomSide = (flip_x == flip_y);
     }
 
   n = 0;
@@ -659,31 +659,31 @@ SwapSides (int argc, char **argv, Coord x, Coord y)
     stdarg (XmNprocessingDirection, XmMAX_ON_BOTTOM);
   XtSetValues (vscroll, args, n);
 
-  Settings.ShowSolderSide = !Settings.ShowSolderSide;
+  Settings.ShowBottomSide = !Settings.ShowBottomSide;
 
   /* The idea is that if we're looking at the front side and the front
      layer is active (or visa versa), switching sides should switch
      layers too.  We used to only do this if the other layer wasn't
      shown, but we now do it always.  Change it back if users get
      confused.  */
-  if (Settings.ShowSolderSide != old_shown_side)
+  if (Settings.ShowBottomSide != old_shown_side)
     {
-      if (Settings.ShowSolderSide)
+      if (Settings.ShowBottomSide)
 	{
-	  if (active_group == comp_group)
+	  if (active_group == top_group)
 	    {
-	      if (comp_showing && !solder_showing)
-		ChangeGroupVisibility (comp_layer, 0, 0);
-	      ChangeGroupVisibility (solder_layer, 1, 1);
+	      if (top_showing && !bottom_showing)
+		ChangeGroupVisibility (top_layer, 0, 0);
+	      ChangeGroupVisibility (bottom_layer, 1, 1);
 	    }
 	}
       else
 	{
-	  if (active_group == solder_group)
+	  if (active_group == bottom_group)
 	    {
-	      if (solder_showing && !comp_showing)
-		ChangeGroupVisibility (solder_layer, 0, 0);
-	      ChangeGroupVisibility (comp_layer, 1, 1);
+	      if (bottom_showing && !top_showing)
+		ChangeGroupVisibility (bottom_layer, 0, 0);
+	      ChangeGroupVisibility (top_layer, 1, 1);
 	    }
 	}
     }
diff --git a/src/hid/png/png.c b/src/hid/png/png.c
index 442b901..e0bcac4 100644
--- a/src/hid/png/png.c
+++ b/src/hid/png/png.c
@@ -68,11 +68,11 @@ static double bloat = 0;
 static double scale = 1;
 static Coord x_shift = 0;
 static Coord y_shift = 0;
-static int show_solder_side;
+static int show_bottom_side;
 #define SCALE(w)   ((int)round((w)/scale))
 #define SCALE_X(x) ((int)round(((x) - x_shift)/scale))
-#define SCALE_Y(y) ((int)round(((show_solder_side ? (PCB->MaxHeight-(y)) : (y)) - y_shift)/scale))
-#define SWAP_IF_SOLDER(a,b) do { Coord c; if (show_solder_side) { c=a; a=b; b=c; }} while (0)
+#define SCALE_Y(y) ((int)round(((show_bottom_side ? (PCB->MaxHeight-(y)) : (y)) - y_shift)/scale))
+#define SWAP_IF_SOLDER(a,b) do { Coord c; if (show_bottom_side) { c=a; a=b; b=c; }} while (0)
 
 /* Used to detect non-trivial outlines */
 #define NOT_EDGE_X(x) ((x) != 0 && (x) != PCB->MaxWidth)
@@ -502,7 +502,7 @@ png_get_export_options (int *n)
   return png_attribute_list;
 }
 
-static int comp_layer, solder_layer;
+static int top_group, bottom_group;
 
 static int
 group_for_layer (int l)
@@ -524,8 +524,8 @@ layer_sort (const void *va, const void *vb)
 
   if (a >= 0 && a <= max_copper_layer + 1)
     {
-      int aside = (al == solder_layer ? 0 : al == comp_layer ? 2 : 1);
-      int bside = (bl == solder_layer ? 0 : bl == comp_layer ? 2 : 1);
+      int aside = (al == bottom_group ? 0 : al == top_group ? 2 : 1);
+      int bside = (bl == bottom_group ? 0 : bl == top_group ? 2 : 1);
       if (bside != aside)
 	return bside - aside;
     }
@@ -556,7 +556,7 @@ png_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
 {
   int i;
   static int saved_layer_stack[MAX_LAYER];
-  int saved_show_solder_side;
+  int saved_show_bottom_side;
   BoxType region;
   FlagType save_flags;
 
@@ -581,15 +581,15 @@ png_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
       if (layer->LineN || layer->TextN || layer->ArcN || layer->PolygonN)
 	print_group[GetLayerGroupNumberByNumber (i)] = 1;
     }
-  print_group[GetLayerGroupNumberByNumber (solder_silk_layer)] = 1;
-  print_group[GetLayerGroupNumberByNumber (component_silk_layer)] = 1;
+  print_group[GetLayerGroupNumberByNumber (bottom_silk_layer)] = 1;
+  print_group[GetLayerGroupNumberByNumber (top_silk_layer)] = 1;
   for (i = 0; i < max_copper_layer; i++)
     if (print_group[GetLayerGroupNumberByNumber (i)])
       print_layer[i] = 1;
 
   memcpy (saved_layer_stack, LayerStack, sizeof (LayerStack));
   save_flags = PCB->Flags;
-  saved_show_solder_side = Settings.ShowSolderSide;
+  saved_show_bottom_side = Settings.ShowBottomSide;
 
   as_shown = options[HA_as_shown].int_value;
   fill_holes = options[HA_fill_holes].int_value;
@@ -597,10 +597,10 @@ png_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
   if (!options[HA_as_shown].int_value)
     {
       CLEAR_FLAG (SHOWMASKFLAG, PCB);
-      Settings.ShowSolderSide = 0;
+      Settings.ShowBottomSide = 0;
 
-      comp_layer = GetLayerGroupNumberByNumber (component_silk_layer);
-      solder_layer = GetLayerGroupNumberByNumber (solder_silk_layer);
+      top_group = GetLayerGroupNumberByNumber (top_silk_layer);
+      bottom_group = GetLayerGroupNumberByNumber (bottom_silk_layer);
       qsort (LayerStack, max_copper_layer, sizeof (LayerStack[0]), layer_sort);
 
       CLEAR_FLAG(THINDRAWFLAG, PCB);
@@ -611,19 +611,19 @@ png_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
 	  int i, n=0;
 	  SET_FLAG (SHOWMASKFLAG, PCB);
 	  photo_has_inners = 0;
-	  if (comp_layer < solder_layer)
-	    for (i = comp_layer; i <= solder_layer; i++)
+	  if (top_group < bottom_group)
+	    for (i = top_group; i <= bottom_group; i++)
 	      {
 		photo_groups[n++] = i;
-		if (i != comp_layer && i != solder_layer
+		if (i != top_group && i != bottom_group
 		    && ! IsLayerGroupEmpty (i))
 		  photo_has_inners = 1;
 	      }
 	  else
-	    for (i = comp_layer; i >= solder_layer; i--)
+	    for (i = top_group; i >= bottom_group; i--)
 	      {
 		photo_groups[n++] = i;
-		if (i != comp_layer && i != solder_layer
+		if (i != top_group && i != bottom_group
 		    && ! IsLayerGroupEmpty (i))
 		  photo_has_inners = 1;
 	      }
@@ -649,11 +649,11 @@ png_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
   lastbrush = (gdImagePtr)((void *) -1);
   lastcap = -1;
   lastgroup = -1;
-  show_solder_side = Settings.ShowSolderSide;
+  show_bottom_side = Settings.ShowBottomSide;
 
   in_mono = options[HA_mono].int_value;
 
-  if (!photo_mode && Settings.ShowSolderSide)
+  if (!photo_mode && Settings.ShowBottomSide)
     {
       int i, j;
       for (i=0, j=max_copper_layer-1; i<j; i++, j--)
@@ -668,7 +668,7 @@ png_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
 
   memcpy (LayerStack, saved_layer_stack, sizeof (LayerStack));
   PCB->Flags = save_flags;
-  Settings.ShowSolderSide = saved_show_solder_side;
+  Settings.ShowBottomSide = saved_show_bottom_side;
 }
 
 static void
@@ -1717,7 +1717,7 @@ png_draw_arc (hidGC gc, Coord cx, Coord cy, Coord width, Coord height,
    */
   start_angle = 180 - start_angle;
   delta_angle = -delta_angle;
-  if (show_solder_side)
+  if (show_bottom_side)
     {
       start_angle = - start_angle;
       delta_angle = -delta_angle;
diff --git a/src/hid/ps/eps.c b/src/hid/ps/eps.c
index 1445491..1945da4 100644
--- a/src/hid/ps/eps.c
+++ b/src/hid/ps/eps.c
@@ -149,7 +149,7 @@ eps_get_export_options (int *n)
   return eps_attribute_list;
 }
 
-static int comp_layer, solder_layer;
+static int top_group, bottom_group;
 
 static int
 group_for_layer (int l)
@@ -171,8 +171,8 @@ layer_sort (const void *va, const void *vb)
 
   if (a >= 0 && a <= max_copper_layer + 1)
     {
-      int aside = (al == solder_layer ? 0 : al == comp_layer ? 2 : 1);
-      int bside = (bl == solder_layer ? 0 : bl == comp_layer ? 2 : 1);
+      int aside = (al == bottom_group ? 0 : al == top_group ? 2 : 1);
+      int bside = (bl == bottom_group ? 0 : bl == top_group ? 2 : 1);
       if (bside != aside)
 	return bside - aside;
     }
@@ -234,7 +234,7 @@ eps_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
      layer to get the pins.  */
   if (fast_erase == 0)
     {
-      print_group[GetLayerGroupNumberByNumber (component_silk_layer)] = 1;
+      print_group[GetLayerGroupNumberByNumber (top_silk_layer)] = 1;
       fast_erase = 1;
     }
 
@@ -259,8 +259,8 @@ eps_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
   as_shown = options[HA_as_shown].int_value;
   if (!options[HA_as_shown].int_value)
     {
-      comp_layer = GetLayerGroupNumberByNumber (component_silk_layer);
-      solder_layer = GetLayerGroupNumberByNumber (solder_silk_layer);
+      top_group = GetLayerGroupNumberByNumber (top_silk_layer);
+      bottom_group = GetLayerGroupNumberByNumber (bottom_silk_layer);
       qsort (LayerStack, max_copper_layer, sizeof (LayerStack[0]), layer_sort);
     }
   fprintf (f, "%%!PS-Adobe-3.0 EPSF-3.0\n");
@@ -289,7 +289,7 @@ eps_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
   fprintf (f, "1 dup neg scale\n");
   fprintf (f, "%g dup scale\n", options[HA_scale].real_value);
   pcb_fprintf (f, "%mi %mi translate\n", -bounds->X1, -bounds->Y2);
-  if (options[HA_as_shown].int_value && Settings.ShowSolderSide)
+  if (options[HA_as_shown].int_value && Settings.ShowBottomSide)
     pcb_fprintf (f, "-1 1 scale %mi 0 translate\n", bounds->X1 - bounds->X2);
   linewidth = -1;
   lastcap = -1;
diff --git a/src/hid/ps/ps.c b/src/hid/ps/ps.c
index c7a1901..5c1896c 100644
--- a/src/hid/ps/ps.c
+++ b/src/hid/ps/ps.c
@@ -664,8 +664,8 @@ ps_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
 	  global.outline_layer = layer;
 	}
     }
-  global.print_group[GetLayerGroupNumberByNumber (solder_silk_layer)] = 1;
-  global.print_group[GetLayerGroupNumberByNumber (component_silk_layer)] = 1;
+  global.print_group[GetLayerGroupNumberByNumber (bottom_silk_layer)] = 1;
+  global.print_group[GetLayerGroupNumberByNumber (top_silk_layer)] = 1;
   for (i = 0; i < max_copper_layer; i++)
     if (global.print_group[GetLayerGroupNumberByNumber (i)])
       global.print_layer[i] = 1;
@@ -883,7 +883,7 @@ ps_set_layer (const char *name, int group, int empty)
 	mirror_this = !mirror_this;
       if (global.automirror
 	  &&
-	  ((idx >= 0 && group == GetLayerGroupNumberByNumber (solder_silk_layer))
+	  ((idx >= 0 && group == GetLayerGroupNumberByNumber (bottom_silk_layer))
 	   || (idx < 0 && SL_SIDE (idx) == SL_BOTTOM_SIDE)))
 	mirror_this = !mirror_this;
 
diff --git a/src/line.c b/src/line.c
index 47e3125..14983a3 100644
--- a/src/line.c
+++ b/src/line.c
@@ -228,7 +228,7 @@ AdjustTwoLine (bool way)
 struct drc_info
 {
   LineType *line;
-  bool solder;
+  bool bottom;
   jmp_buf env;
 };
 
@@ -249,7 +249,7 @@ drcPad_callback (const BoxType * b, void *cl)
   PadType *pad = (PadType *) b;
   struct drc_info *i = (struct drc_info *) cl;
 
-  if (TEST_FLAG (ONSOLDERFLAG, pad) == i->solder &&
+  if (TEST_FLAG (ONSOLDERFLAG, pad) == i->bottom &&
       !TEST_FLAG (FOUNDFLAG, pad) && LinePadIntersect (i->line, pad))
     longjmp (i->env, 1);
   return 1;
@@ -294,7 +294,7 @@ drc_lines (PointType *end, bool way)
   Coord dx, dy, temp, last, length;
   Coord temp2, last2, length2;
   LineType line1, line2;
-  Cardinal group, comp;
+  Cardinal group, top_group;
   struct drc_info info;
   bool two_lines, x_is_long, blocker;
   PointType ans;
@@ -321,13 +321,13 @@ drc_lines (PointType *end, bool way)
       length = abs (dy);
     }
   group = GetGroupOfLayer (INDEXOFCURRENT);
-  comp = max_group + 10;	/* this out-of-range group might save a call */
-  if (GetLayerGroupNumberByNumber (solder_silk_layer) == group)
-    info.solder = true;
+  top_group = max_group + 10;	/* this out-of-range group might save a call */
+  if (GetLayerGroupNumberByNumber (bottom_silk_layer) == group)
+    info.bottom = true;
   else
     {
-      info.solder = false;
-      comp = GetLayerGroupNumberByNumber (component_silk_layer);
+      info.bottom = false;
+      top_group = GetLayerGroupNumberByNumber (top_silk_layer);
     }
   temp = length;
   /* assume the worst */
@@ -411,7 +411,7 @@ drc_lines (PointType *end, bool way)
 			drcVia_callback, &info);
 	      r_search (PCB->Data->pin_tree, &line1.BoundingBox, NULL,
 			drcVia_callback, &info);
-	      if (info.solder || comp == group)
+	      if (info.bottom || top_group == group)
 		r_search (PCB->Data->pad_tree, &line1.BoundingBox, NULL,
 			  drcPad_callback, &info);
 	      if (two_lines)
@@ -421,7 +421,7 @@ drc_lines (PointType *end, bool way)
 			    drcVia_callback, &info);
 		  r_search (PCB->Data->pin_tree, &line2.BoundingBox, NULL,
 			    drcVia_callback, &info);
-		  if (info.solder || comp == group)
+		  if (info.bottom || top_group == group)
 		    r_search (PCB->Data->pad_tree, &line2.BoundingBox, NULL,
 			      drcPad_callback, &info);
 		}
diff --git a/src/macro.h b/src/macro.h
index 0c680ab..1b352e3 100644
--- a/src/macro.h
+++ b/src/macro.h
@@ -36,7 +36,7 @@
  * draw.c uses a different definition of TO_SCREEN
  */
 #ifndef	SWAP_IDENT
-#define	SWAP_IDENT			Settings.ShowSolderSide
+#define	SWAP_IDENT			Settings.ShowBottomSide
 #endif
 
 #define	SWAP_SIGN_X(x)		(x)
@@ -76,15 +76,15 @@
 #define	LAYER_ON_STACK(n)	(&PCB->Data->Layer[LayerStack[(n)]])
 #define LAYER_PTR(n)            (&PCB->Data->Layer[(n)])
 #define	CURRENT			(PCB->SilkActive ? &PCB->Data->Layer[ \
-				(Settings.ShowSolderSide ? solder_silk_layer : component_silk_layer)] \
+				(Settings.ShowBottomSide ? bottom_silk_layer : top_silk_layer)] \
 				: LAYER_ON_STACK(0))
 #define	INDEXOFCURRENT		(PCB->SilkActive ? \
-				(Settings.ShowSolderSide ? solder_silk_layer : component_silk_layer) \
+				(Settings.ShowBottomSide ? bottom_silk_layer : top_silk_layer) \
 				: LayerStack[0])
 #define SILKLAYER		Layer[ \
-				(Settings.ShowSolderSide ? solder_silk_layer : component_silk_layer)]
+				(Settings.ShowBottomSide ? bottom_silk_layer : top_silk_layer)]
 #define BACKSILKLAYER		Layer[ \
-				(Settings.ShowSolderSide ? component_silk_layer : solder_silk_layer)]
+				(Settings.ShowBottomSide ? top_silk_layer : bottom_silk_layer)]
 
 #define TEST_SILK_LAYER(layer)	(GetLayerNumber (PCB->Data, layer) >= max_copper_layer)
 
@@ -152,11 +152,11 @@ extern int mem_any_set (unsigned char *, int);
 	((TEST_FLAG(ONSOLDERFLAG, (o)) != 0) == SWAP_IDENT)
 
 /* ---------------------------------------------------------------------------
- *  Determines if an object is on the given side. side is either SOLDER_LAYER
- *  or COMPONENT_LAYER.
+ *  Determines if an object is on the given side. side is either BOTTOM_LAYER
+ *  or TOP_LAYER.
  */
 #define ON_SIDE(element, side) \
-        (TEST_FLAG (ONSOLDERFLAG, element) == (side == SOLDER_LAYER))
+        (TEST_FLAG (ONSOLDERFLAG, element) == (side == BOTTOM_LAYER))
 
 /* ---------------------------------------------------------------------------
  * some loop shortcuts
diff --git a/src/misc.c b/src/misc.c
index 95806bb..38470ce 100644
--- a/src/misc.c
+++ b/src/misc.c
@@ -1019,7 +1019,7 @@ ParseGroupString (char *s, LayerGroupType *LayerGroup, int LayerN)
             case 'C':
             case 't':
             case 'T':
-              layer = LayerN + COMPONENT_LAYER;
+              layer = LayerN + TOP_LAYER;
               c_set = true;
               break;
 
@@ -1027,7 +1027,7 @@ ParseGroupString (char *s, LayerGroupType *LayerGroup, int LayerN)
             case 'S':
             case 'b':
             case 'B':
-              layer = LayerN + SOLDER_LAYER;
+              layer = LayerN + BOTTOM_LAYER;
               s_set = true;
               break;
 
@@ -1037,7 +1037,7 @@ ParseGroupString (char *s, LayerGroupType *LayerGroup, int LayerN)
               layer = atoi (s) - 1;
               break;
             }
-          if (layer > LayerN + MAX (SOLDER_LAYER, COMPONENT_LAYER) ||
+          if (layer > LayerN + MAX (BOTTOM_LAYER, TOP_LAYER) ||
               member >= LayerN + 1)
             goto error;
           groupnum[layer] = group;
@@ -1057,12 +1057,12 @@ ParseGroupString (char *s, LayerGroupType *LayerGroup, int LayerN)
         s++;
     }
   if (!s_set)
-    LayerGroup->Entries[SOLDER_LAYER][LayerGroup->Number[SOLDER_LAYER]++] =
-      LayerN + SOLDER_LAYER;
+    LayerGroup->Entries[BOTTOM_LAYER][LayerGroup->Number[BOTTOM_LAYER]++] =
+      LayerN + BOTTOM_LAYER;
   if (!c_set)
     LayerGroup->
-      Entries[COMPONENT_LAYER][LayerGroup->Number[COMPONENT_LAYER]++] =
-      LayerN + COMPONENT_LAYER;
+      Entries[TOP_LAYER][LayerGroup->Number[TOP_LAYER]++] =
+      LayerN + TOP_LAYER;
 
   for (layer = 0; layer < LayerN && group < LayerN; layer++)
     if (groupnum[layer] == -1)
@@ -1335,7 +1335,7 @@ LayerStringToLayerStack (char *s)
   PCB->ViaOn = false;
   PCB->RatOn = false;
   CLEAR_FLAG (SHOWMASKFLAG, PCB);
-  Settings.ShowSolderSide = 0;
+  Settings.ShowBottomSide = 0;
 
   for (i=argn-1; i>=0; i--)
     {
@@ -1353,7 +1353,7 @@ LayerStringToLayerStack (char *s)
       else if (strcasecmp (args[i], "mask") == 0)
 	SET_FLAG (SHOWMASKFLAG, PCB);
       else if (strcasecmp (args[i], "solderside") == 0)
-	Settings.ShowSolderSide = 1;
+	Settings.ShowBottomSide = 1;
       else if (isdigit ((int) args[i][0]))
 	{
 	  lno = atoi (args[i]);
@@ -1554,7 +1554,7 @@ SetArcBoundingBox (ArcType *Arc)
 void
 ResetStackAndVisibility (void)
 {
-  int comp_group;
+  int top_group;
   Cardinal i;
 
   for (i = 0; i < max_copper_layer + 2; i++)
@@ -1570,8 +1570,8 @@ ResetStackAndVisibility (void)
   PCB->RatOn = true;
 
   /* Bring the component group to the front and make it active.  */
-  comp_group = GetLayerGroupNumberByNumber (component_silk_layer);
-  ChangeGroupVisibility (PCB->LayerGroups.Entries[comp_group][0], 1, 1);
+  top_group = GetLayerGroupNumberByNumber (top_silk_layer);
+  ChangeGroupVisibility (PCB->LayerGroups.Entries[top_group][0], 1, 1);
 }
 
 /* ---------------------------------------------------------------------------
@@ -1974,10 +1974,10 @@ MoveLayerToGroup (int layer, int group)
   if (layer < 0 || layer > max_copper_layer + 1)
     return -1;
   prev = GetLayerGroupNumberByNumber (layer);
-  if ((layer == solder_silk_layer
-        && group == GetLayerGroupNumberByNumber (component_silk_layer))
-      || (layer == component_silk_layer
-          && group == GetLayerGroupNumberByNumber (solder_silk_layer))
+  if ((layer == bottom_silk_layer
+        && group == GetLayerGroupNumberByNumber (top_silk_layer))
+      || (layer == top_silk_layer
+          && group == GetLayerGroupNumberByNumber (bottom_silk_layer))
       || (group < 0 || group >= max_group) || (prev == group))
     return prev;
 
@@ -2013,11 +2013,11 @@ LayerGroupsToString (LayerGroupType *lg)
         for (entry = 0; entry < PCB->LayerGroups.Number[group]; entry++)
           {
             int layer = PCB->LayerGroups.Entries[group][entry];
-            if (layer == component_silk_layer)
+            if (layer == top_silk_layer)
               {
                 *cp++ = 'c';
               }
-            else if (layer == solder_silk_layer)
+            else if (layer == bottom_silk_layer)
               {
                 *cp++ = 's';
               }
diff --git a/src/move.c b/src/move.c
index cf2ab88..c9e8628 100644
--- a/src/move.c
+++ b/src/move.c
@@ -639,7 +639,7 @@ MoveTextToLayerLowLevel (LayerType *Source, TextType *text,
   Destination->Text = g_list_append (Destination->Text, text);
   Destination->TextN ++;
 
-  if (GetLayerGroupNumberByNumber (solder_silk_layer) ==
+  if (GetLayerGroupNumberByNumber (bottom_silk_layer) ==
       GetLayerGroupNumberByPointer (Destination))
     SET_FLAG (ONSOLDERFLAG, text);
   else
@@ -908,22 +908,22 @@ move_all_thermals (int old_index, int new_index)
 }
 
 static int
-LastLayerInComponentGroup (int layer)
+LastLayerInTopGroup (int layer)
 {
-  int cgroup = GetLayerGroupNumberByNumber(component_silk_layer);
+  int top_group = GetLayerGroupNumberByNumber(top_silk_layer);
   int lgroup = GetLayerGroupNumberByNumber(layer);
-  if (cgroup == lgroup
+  if (top_group == lgroup
       && PCB->LayerGroups.Number[lgroup] == 2)
     return 1;
   return 0;
 }
 
 static int
-LastLayerInSolderGroup (int layer)
+LastLayerInBottomGroup (int layer)
 {
-  int sgroup = GetLayerGroupNumberByNumber(solder_silk_layer);
+  int bottom_group = GetLayerGroupNumberByNumber(bottom_silk_layer);
   int lgroup = GetLayerGroupNumberByNumber(layer);
-  if (sgroup == lgroup
+  if (bottom_group == lgroup
       && PCB->LayerGroups.Number[lgroup] == 2)
     return 1;
   return 0;
@@ -955,14 +955,14 @@ MoveLayer (int old_index, int new_index)
     return 0;
 
   if (new_index == -1
-      && LastLayerInComponentGroup (old_index))
+      && LastLayerInTopGroup (old_index))
     {
       gui->confirm_dialog ("You can't delete the last top-side layer\n", "Ok", NULL);
       return 1;
     }
 
   if (new_index == -1
-      && LastLayerInSolderGroup (old_index))
+      && LastLayerInBottomGroup (old_index))
     {
       gui->confirm_dialog ("You can't delete the last bottom-side layer\n", "Ok", NULL);
       return 1;
diff --git a/src/parse_y.y b/src/parse_y.y
index 6cd4c7b..6fc0724 100644
--- a/src/parse_y.y
+++ b/src/parse_y.y
@@ -1060,7 +1060,7 @@ text_newformat
 				if ($8 & ONSILKFLAG)
 				{
 					LayerType *lay = &yyData->Layer[yyData->LayerN +
-						(($8 & ONSOLDERFLAG) ? SOLDER_LAYER : COMPONENT_LAYER)];
+						(($8 & ONSOLDERFLAG) ? BOTTOM_LAYER : TOP_LAYER)];
 
 					CreateNewText(lay ,yyFont, OU ($3), OU ($4), $5, $6, $7,
 						      OldFlags($8));
@@ -1085,7 +1085,7 @@ text_hi_format
 				if ($8.f & ONSILKFLAG)
 				{
 					LayerType *lay = &yyData->Layer[yyData->LayerN +
-						(($8.f & ONSOLDERFLAG) ? SOLDER_LAYER : COMPONENT_LAYER)];
+						(($8.f & ONSOLDERFLAG) ? BOTTOM_LAYER : TOP_LAYER)];
 
 					CreateNewText(lay, yyFont, NU ($3), NU ($4), $5, $6, $7, $8);
 				}
diff --git a/src/polygon.c b/src/polygon.c
index 9a23afa..75e1b9e 100644
--- a/src/polygon.c
+++ b/src/polygon.c
@@ -873,7 +873,7 @@ struct cpInfo
   DataType *data;
   LayerType *layer;
   PolygonType *polygon;
-  bool solder;
+  bool bottom;
   POLYAREA *accumulate;
   int batch_size;
   jmp_buf env;
@@ -962,7 +962,7 @@ pad_sub_callback (const BoxType * b, void *cl)
   if (pad->Clearance == 0)
     return 0;
   polygon = info->polygon;
-  if (XOR (TEST_FLAG (ONSOLDERFLAG, pad), !info->solder))
+  if (XOR (TEST_FLAG (ONSOLDERFLAG, pad), !info->bottom))
     {
       if (SubtractPad (pad, polygon) < 0)
         longjmp (info->env, 1);
@@ -1042,7 +1042,7 @@ clearPoly (DataType *Data, LayerType *Layer, PolygonType * polygon,
       || GetLayerNumber (Data, Layer) >= max_copper_layer)
     return 0;
   group = Group (Data, GetLayerNumber (Data, Layer));
-  info.solder = (group == Group (Data, solder_silk_layer));
+  info.bottom = (group == Group (Data, bottom_silk_layer));
   info.data = Data;
   info.other = here;
   info.layer = Layer;
@@ -1058,7 +1058,7 @@ clearPoly (DataType *Data, LayerType *Layer, PolygonType * polygon,
       r = 0;
       info.accumulate = NULL;
       info.batch_size = 0;
-      if (info.solder || group == Group (Data, component_silk_layer))
+      if (info.bottom || group == Group (Data, top_silk_layer))
 	r += r_search (Data->pad_tree, &region, NULL, pad_sub_callback, &info);
       GROUP_LOOP (Data, group);
       {
@@ -1597,7 +1597,7 @@ PlowsPolygon (DataType * Data, int type, void *ptr1, void *ptr2,
       {
         Cardinal group = GetLayerGroupNumberByNumber (
                             TEST_FLAG (ONSOLDERFLAG, (PadType *) ptr2) ?
-                              solder_silk_layer : component_silk_layer);
+                              bottom_silk_layer : top_silk_layer);
         GROUP_LOOP (Data, group);
         {
           info.layer = layer;
diff --git a/src/puller.c b/src/puller.c
index 64cb52a..140a12a 100644
--- a/src/puller.c
+++ b/src/puller.c
@@ -626,7 +626,7 @@ static Extra multi_next;
 static GHashTable *lines;
 static GHashTable *arcs;
 static int did_something;
-static int current_is_component, current_is_solder;
+static int current_is_top, current_is_bottom;
 
 /* If set, these are the pins/pads/vias that this path ends on.  */
 /* static void *start_pin_pad, *end_pin_pad; */
@@ -942,12 +942,12 @@ find_pair_padline_callback (const BoxType * b, void *cl)
 
   if (TEST_FLAG (ONSOLDERFLAG, pad))
     {
-      if (!current_is_solder)
+      if (!current_is_bottom)
 	return 0;
     }
   else
     {
-      if (!current_is_component)
+      if (!current_is_top)
 	return 0;
     }
 
@@ -1010,12 +1010,12 @@ find_pair_padarc_callback (const BoxType * b, void *cl)
 
   if (TEST_FLAG (ONSOLDERFLAG, pad))
     {
-      if (!current_is_solder)
+      if (!current_is_bottom)
 	return 0;
     }
   else
     {
-      if (!current_is_component)
+      if (!current_is_top)
 	return 0;
     }
 
@@ -1782,12 +1782,12 @@ gp_pad_cb (const BoxType *b, void *cb)
 
   if (TEST_FLAG (ONSOLDERFLAG, p))
     {
-      if (!current_is_solder)
+      if (!current_is_bottom)
 	return 0;
     }
   else
     {
-      if (!current_is_component)
+      if (!current_is_top)
 	return 0;
     }
 
@@ -2576,10 +2576,10 @@ GlobalPuller(int argc, char **argv, Coord x, Coord y)
   /* This canonicalizes all the lines, and cleans up near-misses.  */
   /* hid_actionl ("djopt", "puller", 0); */
 
-  current_is_solder = (GetLayerGroupNumberByPointer(CURRENT)
-		       == GetLayerGroupNumberByNumber (solder_silk_layer));
-  current_is_component = (GetLayerGroupNumberByPointer(CURRENT)
-			  == GetLayerGroupNumberByNumber (component_silk_layer));
+  current_is_bottom = (GetLayerGroupNumberByPointer(CURRENT)
+                        == GetLayerGroupNumberByNumber (bottom_silk_layer));
+  current_is_top = (GetLayerGroupNumberByPointer(CURRENT)
+                     == GetLayerGroupNumberByNumber (top_silk_layer));
 
   lines = g_hash_table_new_full (NULL, NULL, NULL, (GDestroyNotify)FreeExtra);
   arcs  = g_hash_table_new_full (NULL, NULL, NULL, (GDestroyNotify)FreeExtra);
diff --git a/src/rats.c b/src/rats.c
index fb1d41f..fefc4de 100644
--- a/src/rats.c
+++ b/src/rats.c
@@ -76,7 +76,7 @@ static void TransferNet (NetListType *, NetType *, NetType *);
  * some local identifiers
  */
 static bool badnet = false;
-static Cardinal SLayer, CLayer;	/* layer group holding solder/component side */
+static Cardinal top_group, bottom_group;	/* layer group holding top/bottom side */
 
 /* ---------------------------------------------------------------------------
  * parse a connection description from a string
@@ -133,7 +133,7 @@ FindPad (char *ElementName, char *PinNum, ConnectionType * conn, bool Same)
           conn->type = PAD_TYPE;
           conn->ptr1 = element;
           conn->ptr2 = pad;
-          conn->group = TEST_FLAG (ONSOLDERFLAG, pad) ? SLayer : CLayer;
+          conn->group = TEST_FLAG (ONSOLDERFLAG, pad) ? bottom_group : top_group;
 
           if (TEST_FLAG (EDGE2FLAG, pad))
             {
@@ -160,7 +160,7 @@ FindPad (char *ElementName, char *PinNum, ConnectionType * conn, bool Same)
           conn->type = PIN_TYPE;
           conn->ptr1 = element;
           conn->ptr2 = pin;
-          conn->group = SLayer;        /* any layer will do */
+          conn->group = bottom_group;        /* any layer will do */
           conn->X = pin->X;
           conn->Y = pin->Y;
           return true;
@@ -226,9 +226,9 @@ ProcNetlist (LibraryType *net_menu)
   free (Wantlist);
   badnet = false;
 
-  /* find layer groups of the component side and solder side */
-  SLayer = GetLayerGroupNumberByNumber (solder_silk_layer);
-  CLayer = GetLayerGroupNumberByNumber (component_silk_layer);
+  /* find layer groups of the top and bottom sides */
+  bottom_group = GetLayerGroupNumberByNumber (bottom_silk_layer);
+  top_group = GetLayerGroupNumberByNumber (top_silk_layer);
 
   Wantlist = (NetListType *)calloc (1, sizeof (NetListType));
   if (Wantlist)
@@ -530,7 +530,7 @@ GatherSubnets (NetListType *Netl, bool NoWarn, bool AndRats)
 	    conn->type = VIA_TYPE;
 	    conn->ptr1 = via;
 	    conn->ptr2 = via;
-	    conn->group = SLayer;
+	    conn->group = bottom_group;
 	  }
       }
       END_LOOP;
@@ -924,8 +924,8 @@ AddNet (void)
 
   /* will work for pins to since the FLAG is common */
   group1 = (TEST_FLAG (ONSOLDERFLAG, (PadType *) ptr2) ?
-	    GetLayerGroupNumberByNumber (solder_silk_layer) :
-	    GetLayerGroupNumberByNumber (component_silk_layer));
+	    GetLayerGroupNumberByNumber (bottom_silk_layer) :
+	    GetLayerGroupNumberByNumber (top_silk_layer));
   strcpy (name1, ConnectionName (found, ptr1, ptr2));
   found = SearchObjectByLocation (PAD_TYPE | PIN_TYPE, &ptr1, &ptr2, &ptr3,
 				  Crosshair.AttachedLine.Point2.X,
@@ -942,8 +942,8 @@ AddNet (void)
       return (NULL);
     }
   group2 = (TEST_FLAG (ONSOLDERFLAG, (PadType *) ptr2) ?
-	    GetLayerGroupNumberByNumber (solder_silk_layer) :
-	    GetLayerGroupNumberByNumber (component_silk_layer));
+	    GetLayerGroupNumberByNumber (bottom_silk_layer) :
+	    GetLayerGroupNumberByNumber (top_silk_layer));
   name2 = ConnectionName (found, ptr1, ptr2);
 
   menu = netnode_to_netname (name1);
diff --git a/src/rubberband.c b/src/rubberband.c
index cd2c4f6..06f5246 100644
--- a/src/rubberband.c
+++ b/src/rubberband.c
@@ -231,7 +231,7 @@ CheckPadForRubberbandConnection (PadType *Pad)
   info.box.Y2 = MAX (Pad->Point1.Y, Pad->Point2.Y) + half;
   info.radius = 0;
   info.line = NULL;
-  i = TEST_FLAG (ONSOLDERFLAG, Pad) ? solder_silk_layer : component_silk_layer;
+  i = TEST_FLAG (ONSOLDERFLAG, Pad) ? bottom_silk_layer : top_silk_layer;
   group = GetLayerGroupNumberByNumber (i);
 
   /* check all visible layers in the same group */
@@ -319,7 +319,7 @@ CheckPadForRat (PadType *Pad)
   struct rinfo info;
   Cardinal i;
 
-  i = TEST_FLAG (ONSOLDERFLAG, Pad) ? solder_silk_layer : component_silk_layer;
+  i = TEST_FLAG (ONSOLDERFLAG, Pad) ? bottom_silk_layer : top_silk_layer;
   info.group = GetLayerGroupNumberByNumber (i);
   info.pad = Pad;
   info.type = PAD_TYPE;
diff --git a/src/toporouter.c b/src/toporouter.c
index 33c8e84..f7ab35d 100644
--- a/src/toporouter.c
+++ b/src/toporouter.c
@@ -1702,8 +1702,8 @@ read_pads(toporouter_t *r, toporouter_layer_t *l, guint layer)
   GList *vlist = NULL;
   toporouter_bbox_t *bbox = NULL;
 
-  guint front = GetLayerGroupNumberByNumber (component_silk_layer);
-  guint back = GetLayerGroupNumberByNumber (solder_silk_layer);
+  guint front = GetLayerGroupNumberByNumber (top_silk_layer);
+  guint back = GetLayerGroupNumberByNumber (bottom_silk_layer);
 
 //  printf("read_pads: front = %d back = %d layer = %d\n", 
 //     front, back, layer);
